1 0.000934447497933 -12.7946757465 -11.6754608943 -1.11921485212 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', cdr_([])) ), sep='')" 1.0 1.0
1 0.000910762639867 -12.8203488755 -11.6754608943 -1.14488798113 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.888888888889 0.8
1 0.018762064219 -9.79503894028 -1.2527629685 -8.54227597178 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
1 0.00089563097637 -12.8371027184 -11.6754608943 -1.16164182404 11 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.818181818182 0.9
1 0.00963573610743 -10.4613972125 -7.09049341566 -3.37090379687 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.1
1 0.000926545774899 -12.803167739 -11.6754608943 -1.12770684469 12 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 1.0 1.0
1 0.00963573610743 -10.4613972125 -7.09049341566 -3.37090379687 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.1
1 0.0225563996987 -9.61085708473 -7.78364059622 -1.82721648851 10 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.888888888889 0.8
1 0.000913321106515 -12.8175436662 -11.6754608943 -1.14208277186 9 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
1 0.00963573610743 -10.4613972125 -7.09049341566 -3.37090379687 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.1
1 0.0219635700915 -9.6374907349 -7.78364059622 -1.85385013868 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.818181818182 0.9
1 0.000901602346096 -12.8304576249 -11.6754608943 -1.15499673058 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 1.0 0.9
1 0.000917600114281 -12.8128694994 -11.6754608943 -1.13740860509 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.909090909091 1.0
1 0.000909031318466 -12.8222516424 -11.6754608943 -1.14679074811 13 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.909090909091 1.0
1 0.067450152752 -8.51548706348 -5.14458326661 -3.37090379687 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.1
1 0.00963573610743 -10.4613972125 -7.09049341566 -3.37090379687 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.1
1 0.00963573610743 -10.4613972125 -7.09049341566 -3.37090379687 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.1
1 6.70711497896e-05 -15.4288771967 -14.3145182239 -1.11435897274 8 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 1.0 0.7
1 0.00631651189352 -10.8837087706 -9.72955074528 -1.15415802531 10 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.769230769231 1.0
1 0.000914863126504 -12.8158567242 -11.6754608943 -1.14039582989 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.909090909091 1.0
1 0.0446628164739 -8.92773460158 -7.78364059622 -1.14409400536 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.833333333333 1.0
1 6.66247569209e-05 -15.4355549558 -14.3145182239 -1.12103673182 7 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_(recurse_()) ) if flip_() else [] )), sep='')" 1.0 0.7
1 0.000880315679692 -12.8543506197 -11.6754608943 -1.17888972538 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 1.0 0.7
1 0.000855776771624 -12.8826216285 -11.6754608943 -1.20716073413 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 1.0 0.5
1 0.000927227286785 -12.802432469 -11.6754608943 -1.12697157463 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.909090909091 1.0
1 0.000904149261328 -12.8276367309 -11.6754608943 -1.1521758366 9 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.9 0.9
1 0.000945013470177 -12.7834320082 -11.6754608943 -1.1079711139 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_(recurse_())) )), sep='')" 0.833333333333 1.0
1 0.000916595890639 -12.813964501 -11.6754608943 -1.13850360665 9 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.909090909091 1.0
1 0.00963573610743 -10.4613972125 -7.09049341566 -3.37090379687 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.1
1 0.00963573610743 -10.4613972125 -7.09049341566 -3.37090379687 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.1
1 0.000884943337027 -12.8491075728 -11.6754608943 -1.17364667845 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 1.0 0.6
1 0.00647553305397 -10.8588449817 -9.72955074528 -1.12929423639 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.9 0.9
1 0.000918517952067 -12.8118697403 -11.6754608943 -1.136408846 12 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 0.9
1 0.000932092471487 -12.7971991617 -11.6754608943 -1.12173826735 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 1.0 1.0
1 0.0064216347016 -10.8672031991 -9.72955074528 -1.13765245382 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.833333333333 1.0
1 0.000457299588261 -13.5092924595 -12.3686080749 -1.1406843846 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else recurse_() ) )), sep='')" 0.9 0.9
1 0.00640852839448 -10.8692462459 -9.72955074528 -1.13969550059 12 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 1.0 0.9
1 0.00647017747331 -10.8596723725 -9.72955074528 -1.1301216272 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.909090909091 1.0
1 0.000886436952603 -12.8474211863 -11.6754608943 -1.17196029192 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
1 0.000910797252333 -12.8203108724 -11.6754608943 -1.14484997803 10 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.909090909091 1.0
1 0.000935069431631 -12.7940104048 -11.6754608943 -1.11854951049 9 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 1.0 0.8
1 0.000931763711418 -12.7975519358 -11.6754608943 -1.12209104143 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
1 0.000920680701246 -12.8095179007 -11.6754608943 -1.13405700634 11 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep='')" 1.0 0.9
1 0.067450152752 -8.51548706348 -5.14458326661 -3.37090379687 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.1
1 0.000907681886458 -12.8237372179 -11.6754608943 -1.14827632355 10 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep='')" 0.9 0.9
1 0.00963573610743 -10.4613972125 -7.09049341566 -3.37090379687 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
1 0.000915244289789 -12.8154401768 -11.6754608943 -1.13997928243 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.818181818182 0.9
1 0.00093109298611 -12.7982720398 -11.6754608943 -1.12281114549 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.9 0.9
1 0.000924366394738 -12.8055226656 -11.6754608943 -1.13006177131 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.909090909091 1.0
1 0.000903694965186 -12.8281393142 -11.6754608943 -1.15267841989 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 1.0 0.6
1 0.00963573610743 -10.4613972125 -7.09049341566 -3.37090379687 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
1 0.00963573610743 -10.4613972125 -7.09049341566 -3.37090379687 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.1
1 0.00638684783281 -10.872635061 -9.72955074528 -1.14308431575 11 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
1 0.00963573610743 -10.4613972125 -7.09049341566 -3.37090379687 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.1
1 0.067450152752 -8.51548706348 -5.14458326661 -3.37090379687 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.1
1 0.0450865405302 -8.91829214497 -7.78364059622 -1.13465154875 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.9 0.9
1 0.000922359828383 -12.807695773 -11.6754608943 -1.13223487863 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.909090909091 1.0
1 0.000926130018743 -12.803616556 -11.6754608943 -1.12815566165 9 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 1.0 1.0
1 0.472151069264 -6.56957691443 -3.19867311755 -3.37090379687 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.1
7 0.00626642797164 -19.3588641483 -11.6754608943 -7.68340325396 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', cdr_([])) ), sep='')" 1.0 1.0
7 0.00661218042756 -19.3051571716 -11.6754608943 -7.62969627729 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.888888888889 0.8
7 4.8997169237e-21 -61.0514248802 -1.2527629685 -59.7986619117 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
7 0.00604672775633 -19.3945533801 -11.6754608943 -7.71909248577 11 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.818181818182 0.9
7 4.63289569242e-07 -28.8712289189 -7.09049341566 -21.7807355033 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.1
7 0.00697726739186 -19.2514132901 -11.6754608943 -7.57595239578 10 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 1.0 1.0
7 4.63289569242e-07 -28.8712289189 -7.09049341566 -21.7807355033 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.1
7 0.0018375542894 -20.5856351422 -7.78364059622 -12.801994546 11 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.888888888889 0.8
7 0.0054764050159 -19.4936217724 -11.6754608943 -7.81816087808 10 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
7 4.63289569242e-07 -28.8712289189 -7.09049341566 -21.7807355033 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.1
7 0.00274037385926 -20.185976283 -7.78364059622 -12.4023356868 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.818181818182 0.9
7 0.00513701250798 -19.5575989527 -11.6754608943 -7.88213805841 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 1.0 0.9
7 0.00629082169079 -19.3549789425 -11.6754608943 -7.67951804812 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.909090909091 1.0
7 0.00633149286564 -19.348534591 -11.6754608943 -7.67307369666 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.909090909091 1.0
7 3.2430269847e-06 -26.9253187699 -5.14458326661 -21.7807355033 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.1
7 4.63289569242e-07 -28.8712289189 -7.09049341566 -21.7807355033 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.1
7 4.63289569242e-07 -28.8712289189 -7.09049341566 -21.7807355033 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.1
7 0.000641058313029 -21.6387054933 -14.3145182239 -7.32418726939 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 1.0 0.7
7 0.0387281301045 -17.537504427 -9.72955074528 -7.80795368175 10 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.769230769231 1.0
7 0.00664846215476 -19.2996850661 -11.6754608943 -7.62422417177 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.909090909091 1.0
7 0.294901901531 -15.5074278752 -7.78364059622 -7.72378727903 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.833333333333 1.0
7 0.000552708357544 -21.7869954381 -14.3145182239 -7.47247721411 7 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_(recurse_()) ) if flip_() else [] )), sep='')" 1.0 0.7
7 0.00633091055561 -19.3486265656 -11.6754608943 -7.67316567131 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 1.0 0.7
7 0.00543207192881 -19.5017500073 -11.6754608943 -7.82628911292 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 1.0 0.5
7 0.00611757629043 -19.382904652 -11.6754608943 -7.70744375766 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.909090909091 1.0
7 0.00633089161291 -19.3486295577 -11.6754608943 -7.67316866341 10 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.9 0.9
7 0.00524520304983 -19.536756685 -11.6754608943 -7.86129579064 12 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_(recurse_())) )), sep='')" 0.833333333333 1.0
7 0.00686737606184 -19.2672885473 -11.6754608943 -7.591827653 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.909090909091 1.0
7 4.63289569242e-07 -28.8712289189 -7.09049341566 -21.7807355033 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.1
7 4.63289569242e-07 -28.8712289189 -7.09049341566 -21.7807355033 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.1
7 0.00648232808048 -19.3249909216 -11.6754608943 -7.64953002725 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 1.0 0.6
7 0.0398411181497 -17.5091711408 -9.72955074528 -7.77962039549 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.9 0.9
7 0.00677398347162 -19.2809813247 -11.6754608943 -7.60552043035 11 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 0.9
7 0.00556206801123 -19.4781006555 -11.6754608943 -7.80263976119 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 1.0 1.0
7 0.049283207713 -17.2964872304 -9.72955074528 -7.56693648514 12 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.833333333333 1.0
7 0.00320814189587 -20.0283787182 -12.3686080749 -7.6597706433 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else recurse_() ) )), sep='')" 0.9 0.9
7 0.034429795511 -17.655148301 -9.72955074528 -7.92559755576 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 1.0 0.9
7 0.0446406267361 -17.3954262813 -9.72955074528 -7.66587553606 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.909090909091 1.0
7 0.0061669112349 -19.3748725368 -11.6754608943 -7.69941164243 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
7 0.00530065510254 -19.5262402219 -11.6754608943 -7.8507793276 12 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.909090909091 1.0
7 0.00580064213998 -19.4361020139 -11.6754608943 -7.76064111956 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 1.0 0.8
7 0.00543934680285 -19.5004116584 -11.6754608943 -7.82495076412 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
7 0.00608645054371 -19.3880055608 -11.6754608943 -7.71254466651 12 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep='')" 1.0 0.9
7 3.2430269847e-06 -26.9253187699 -5.14458326661 -21.7807355033 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.1
7 0.0063994132788 -19.3378643281 -11.6754608943 -7.66240343379 9 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep='')" 0.9 0.9
7 4.63289569242e-07 -28.8712289189 -7.09049341566 -21.7807355033 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
7 0.00473568397631 -19.6389444717 -11.6754608943 -7.96348357739 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.818181818182 0.9
7 0.00648768880153 -19.3241642887 -11.6754608943 -7.64870339434 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.9 0.9
7 0.00634490480513 -19.3464185412 -11.6754608943 -7.67095764685 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.909090909091 1.0
7 0.00647861685489 -19.3255635998 -11.6754608943 -7.65010270551 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 1.0 0.6
7 4.63289569242e-07 -28.8712289189 -7.09049341566 -21.7807355033 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
7 4.63289569242e-07 -28.8712289189 -7.09049341566 -21.7807355033 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.1
7 0.0374797358337 -17.5702702299 -9.72955074528 -7.84071948467 9 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
7 4.63289569242e-07 -28.8712289189 -7.09049341566 -21.7807355033 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.1
7 3.2430269847e-06 -26.9253187699 -5.14458326661 -21.7807355033 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.1
7 0.26855159522 -15.6010275826 -7.78364059622 -7.81738698642 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.9 0.9
7 0.00652768525393 -19.3180182374 -11.6754608943 -7.64255734305 12 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.909090909091 1.0
7 0.00642932039123 -19.3332017999 -11.6754608943 -7.65774090554 12 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 1.0 1.0
7 2.27011888929e-05 -24.9794086208 -3.19867311755 -21.7807355033 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.1
13 0.00475410158321 -26.2615230839 -11.6754608943 -14.5860621895 12 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', cdr_([])) ), sep='')" 1.0 1.0
13 0.0065349228995 -25.9433702716 -11.6754608943 -14.2679093773 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.888888888889 0.8
13 2.03146753749e-40 -112.307420805 -1.2527629685 -111.054657836 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
13 0.00586954632067 -26.0507534775 -11.6754608943 -14.3752925831 11 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.818181818182 0.9
13 9.95316773245e-13 -48.5484908849 -7.09049341566 -41.4579974692 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.1
13 0.00775804309488 -25.7718006966 -11.6754608943 -14.0963398023 11 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 1.0 1.0
13 9.95316773245e-13 -48.5484908849 -7.09049341566 -41.4579974692 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.1
13 6.39246806433e-05 -30.5705805741 -7.78364059622 -22.7869399779 11 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.888888888889 0.8
13 0.00548366434967 -26.1187572661 -11.6754608943 -14.4432963717 11 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
13 9.95316773245e-13 -48.5484908849 -7.09049341566 -41.4579974692 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.1
13 2.59828547553e-05 -31.4708492115 -7.78364059622 -23.6872086153 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.818181818182 0.9
13 0.00724606248994 -25.840072604 -11.6754608943 -14.1646117097 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 1.0 0.9
13 0.00709292266512 -25.8614333413 -11.6754608943 -14.185972447 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.909090909091 1.0
13 0.00730614526566 -25.8318150093 -11.6754608943 -14.1563541149 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.909090909091 1.0
13 6.96721741271e-12 -46.6025807358 -5.14458326661 -41.4579974692 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.1
13 9.95316773245e-13 -48.5484908849 -7.09049341566 -41.4579974692 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.1
13 9.95316773245e-13 -48.5484908849 -7.09049341566 -41.4579974692 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.1
13 0.000933394898618 -27.8894577314 -14.3145182239 -13.5749395074 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 1.0 0.7
13 0.0487256074659 -23.934326108 -9.72955074528 -14.2047753627 9 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.769230769231 1.0
13 0.0075054163045 -25.8049058867 -11.6754608943 -14.1294449923 12 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.909090909091 1.0
13 0.280417641335 -22.1842507524 -7.78364059622 -14.4006101562 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.833333333333 1.0
13 0.000888465086996 -27.938790747 -14.3145182239 -13.624272523 7 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_(recurse_()) ) if flip_() else [] )), sep='')" 1.0 0.7
13 0.0056778454595 -26.0839589803 -11.6754608943 -14.4084980859 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 1.0 0.7
13 0.00501184960346 -26.2087257912 -11.6754608943 -14.5332648969 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 1.0 0.5
13 0.00675071822873 -25.910881917 -11.6754608943 -14.2354210227 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.909090909091 1.0
13 0.00725224871154 -25.8392192326 -11.6754608943 -14.1637583383 11 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.9 0.9
13 0.00842309789585 -25.6895531388 -11.6754608943 -14.0140922445 9 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_(recurse_())) )), sep='')" 0.833333333333 1.0
13 0.00628712773804 -25.9820264935 -11.6754608943 -14.3065655992 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.909090909091 1.0
13 9.95316773245e-13 -48.5484908849 -7.09049341566 -41.4579974692 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.1
13 9.95316773245e-13 -48.5484908849 -7.09049341566 -41.4579974692 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.1
13 0.00447387829592 -26.3222751603 -11.6754608943 -14.646814266 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 1.0 0.6
13 0.0529635791954 -23.8509263282 -9.72955074528 -14.1213755829 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.9 0.9
13 0.00604281769591 -26.0216604114 -11.6754608943 -14.3461995171 10 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 0.9
13 0.00514509932987 -26.1824861453 -11.6754608943 -14.507025251 8 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 1.0 1.0
13 0.0331724774126 -24.318810282 -9.72955074528 -14.5892595367 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.833333333333 1.0
13 0.00391432995313 -26.4558866543 -12.3686080749 -14.0872785795 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else recurse_() ) )), sep='')" 0.9 0.9
13 0.0426464600316 -24.0675865505 -9.72955074528 -14.3380358052 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 1.0 0.9
13 0.0404105083788 -24.121440961 -9.72955074528 -14.3918902157 13 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.909090909091 1.0
13 0.00639596123357 -25.9648640866 -11.6754608943 -14.2894031923 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
13 0.00734027962124 -25.8271538831 -11.6754608943 -14.1516929887 10 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.909090909091 1.0
13 0.00613954333994 -26.0057804557 -11.6754608943 -14.3303195614 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 1.0 0.8
13 0.00576770853849 -26.0682559526 -11.6754608943 -14.3927950583 12 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
13 0.00718919607614 -25.8479514664 -11.6754608943 -14.1724905721 10 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep='')" 1.0 0.9
13 6.96721741271e-12 -46.6025807358 -5.14458326661 -41.4579974692 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.1
13 0.00708748264575 -25.8622006 -11.6754608943 -14.1867397057 10 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep='')" 0.9 0.9
13 9.95316773245e-13 -48.5484908849 -7.09049341566 -41.4579974692 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
13 0.00619163568608 -25.9973315222 -11.6754608943 -14.3218706279 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.818181818182 0.9
13 0.00528697656539 -26.1552842758 -11.6754608943 -14.4798233814 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.9 0.9
13 0.00616260686902 -26.0020309395 -11.6754608943 -14.3265700451 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.909090909091 1.0
13 0.00730956341041 -25.8313472735 -11.6754608943 -14.1558863792 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 1.0 0.6
13 9.95316773245e-13 -48.5484908849 -7.09049341566 -41.4579974692 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
13 9.95316773245e-13 -48.5484908849 -7.09049341566 -41.4579974692 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.1
13 0.0427237921571 -24.0657748621 -9.72955074528 -14.3362241168 10 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
13 9.95316773245e-13 -48.5484908849 -7.09049341566 -41.4579974692 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.1
13 6.96721741271e-12 -46.6025807358 -5.14458326661 -41.4579974692 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.1
13 0.259056328193 -22.2634852991 -7.78364059622 -14.4798447029 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.9 0.9
13 0.00754220183674 -25.8000166603 -11.6754608943 -14.124555766 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.909090909091 1.0
13 0.00702884452081 -25.8705084922 -11.6754608943 -14.1950475979 10 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 1.0 1.0
13 4.8770521889e-11 -44.6566705868 -3.19867311755 -41.4579974692 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.1
19 0.00391888348961 -33.0179554887 -11.6754608943 -21.3424945943 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', cdr_([])) ), sep='')" 1.0 1.0
19 0.00395761890346 -33.0081197204 -11.6754608943 -21.3326588261 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.888888888889 0.8
19 7.87735182721e-60 -163.567120794 -1.2527629685 -162.314357825 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
19 0.00427414092657 -32.9311791485 -11.6754608943 -21.2557182541 11 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.818181818182 0.9
19 4.38034945858e-18 -67.4454101665 -7.09049341566 -60.3549167508 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.1
19 0.00392646180152 -33.0160235624 -11.6754608943 -21.3405626681 10 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 1.0 1.0
19 4.38034945858e-18 -67.4454101665 -7.09049341566 -60.3549167508 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.1
19 3.46716971434e-07 -42.3507640329 -7.78364059622 -34.5671234367 12 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.888888888889 0.8
19 0.00604705988247 -32.5841900937 -11.6754608943 -20.9087291994 10 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
19 4.38034945858e-18 -67.4454101665 -7.09049341566 -60.3549167508 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.1
19 9.56704643785e-08 -43.6383632121 -7.78364059622 -35.8547226159 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.818181818182 0.9
19 0.00850999862378 -32.242520497 -11.6754608943 -20.5670596026 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 1.0 0.9
19 0.00452588203649 -32.8739497945 -11.6754608943 -21.1984889001 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.909090909091 1.0
19 0.00671190253809 -32.4798798293 -11.6754608943 -20.804418935 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.909090909091 1.0
19 3.06624462101e-17 -65.4995000174 -5.14458326661 -60.3549167508 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.1
19 4.38034945858e-18 -67.4454101665 -7.09049341566 -60.3549167508 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.1
19 4.38034945858e-18 -67.4454101665 -7.09049341566 -60.3549167508 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.1
19 0.00087485384337 -34.5174607205 -14.3145182239 -20.2029424966 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 1.0 0.7
19 0.0265275038695 -31.1055802012 -9.72955074528 -21.3760294559 10 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.769230769231 1.0
19 0.00598238359211 -32.5949431953 -11.6754608943 -20.9194823009 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.909090909091 1.0
19 0.277968777263 -28.7562534824 -7.78364059622 -20.9726128862 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.833333333333 1.0
19 0.00094796092733 -34.4372042713 -14.3145182239 -20.1226860473 8 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_(recurse_()) ) if flip_() else [] )), sep='')" 1.0 0.7
19 0.00274816642588 -33.3728283427 -11.6754608943 -21.6973674484 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 1.0 0.7
19 0.00452615865681 -32.8738886767 -11.6754608943 -21.1984277824 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 1.0 0.5
19 0.00421543824318 -32.9450087195 -11.6754608943 -21.2695478252 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.909090909091 1.0
19 0.00458614103759 -32.8607233399 -11.6754608943 -21.1852624456 10 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.9 0.9
19 0.00476555737987 -32.8223477738 -11.6754608943 -21.1468868795 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_(recurse_())) )), sep='')" 0.833333333333 1.0
19 0.00587176610036 -32.6136068203 -11.6754608943 -20.938145926 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.909090909091 1.0
19 4.38034945858e-18 -67.4454101665 -7.09049341566 -60.3549167508 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.1
19 4.38034945858e-18 -67.4454101665 -7.09049341566 -60.3549167508 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.1
19 0.00604329396996 -32.5848130553 -11.6754608943 -20.9093521609 7 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 1.0 0.6
19 0.0567664484091 -30.3448168236 -9.72955074528 -20.6152660784 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.9 0.9
19 0.00676778731985 -32.4715880804 -11.6754608943 -20.796127186 9 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 0.9
19 0.00692900104021 -32.448046625 -11.6754608943 -20.7725857307 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 1.0 1.0
19 0.022720658922 -31.2604876825 -9.72955074528 -21.5309369373 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.833333333333 1.0
19 0.00220595404667 -33.5926021883 -12.3686080749 -21.2239941134 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else recurse_() ) )), sep='')" 0.9 0.9
19 0.0194180321791 -31.4175601497 -9.72955074528 -21.6880094044 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 1.0 0.9
19 0.042895038755 -30.6250061053 -9.72955074528 -20.89545536 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.909090909091 1.0
19 0.00407726303211 -32.97833634 -11.6754608943 -21.3028754456 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
19 0.00602699555972 -32.58751364 -11.6754608943 -20.9120527457 9 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.909090909091 1.0
19 0.00513879172513 -32.7469442989 -11.6754608943 -21.0714834046 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 1.0 0.8
19 0.00467636027523 -32.8412421894 -11.6754608943 -21.1657812951 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
19 0.00573101663968 -32.6378693388 -11.6754608943 -20.9624084445 9 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep='')" 1.0 0.9
19 3.06624462101e-17 -65.4995000174 -5.14458326661 -60.3549167508 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.1
19 0.00587041957548 -32.6138361686 -11.6754608943 -20.9383752743 9 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep='')" 0.9 0.9
19 4.38034945858e-18 -67.4454101665 -7.09049341566 -60.3549167508 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
19 0.00569985074602 -32.6433222882 -11.6754608943 -20.9678613939 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.818181818182 0.9
19 0.00394598987475 -33.0110624362 -11.6754608943 -21.3356015418 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.9 0.9
19 0.00695015415098 -32.4449984385 -11.6754608943 -20.7695375442 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.909090909091 1.0
19 0.00250750295705 -33.4644748577 -11.6754608943 -21.7890139634 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 1.0 0.6
19 4.38034945858e-18 -67.4454101665 -7.09049341566 -60.3549167508 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
19 4.38034945858e-18 -67.4454101665 -7.09049341566 -60.3549167508 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.1
19 0.0395455933068 -30.7063080106 -9.72955074528 -20.9767572653 12 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
19 4.38034945858e-18 -67.4454101665 -7.09049341566 -60.3549167508 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.1
19 3.06624462101e-17 -65.4995000174 -5.14458326661 -60.3549167508 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.1
19 0.353896261608 -28.5147584539 -7.78364059622 -20.7311178577 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.9 0.9
19 0.00584009194448 -32.6190157372 -11.6754608943 -20.9435548429 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.909090909091 1.0
19 0.00546039603398 -32.686240957 -11.6754608943 -21.0107800627 10 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 1.0 1.0
19 2.1463712347e-16 -63.5535898683 -3.19867311755 -60.3549167508 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.1
25 0.00730728198386 -39.0913183108 -11.6754608943 -27.4158574165 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', cdr_([])) ), sep='')" 1.0 1.0
25 0.00573731088117 -39.3331990808 -11.6754608943 -27.6577381865 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.888888888889 0.8
25 3.51571918228e-79 -214.819412653 -1.2527629685 -213.566649685 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
25 0.00708476897934 -39.1222424282 -11.6754608943 -27.4467815339 10 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.818181818182 0.9
25 1.30102338225e-23 -86.8687403818 -7.09049341566 -79.7782469661 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.1
25 0.00522718829752 -39.4263161707 -11.6754608943 -27.7508552764 10 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 1.0 1.0
25 1.30102338225e-23 -86.8687403818 -7.09049341566 -79.7782469661 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.1
25 1.01502718903e-08 -52.5781997594 -7.78364059622 -44.7945591632 10 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.888888888889 0.8
25 0.0066954876162 -39.1787558844 -11.6754608943 -27.5032949901 9 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
25 1.30102338225e-23 -86.8687403818 -7.09049341566 -79.7782469661 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.1
25 3.79594621473e-09 -53.56176654 -7.78364059622 -45.7781259438 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.818181818182 0.9
25 0.00586271041374 -39.3115776692 -11.6754608943 -27.6361167749 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 1.0 0.9
25 0.012381243863 -38.564006958 -11.6754608943 -26.8885460637 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.909090909091 1.0
25 0.00459581423978 -39.5550437524 -11.6754608943 -27.8795828581 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.909090909091 1.0
25 9.10716367576e-23 -84.9228302327 -5.14458326661 -79.7782469661 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.1
25 1.30102338225e-23 -86.8687403818 -7.09049341566 -79.7782469661 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.1
25 1.30102338225e-23 -86.8687403818 -7.09049341566 -79.7782469661 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.1
25 0.00167294382457 -40.56560485 -14.3145182239 -26.2510866261 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 1.0 0.7
25 0.0249150706158 -37.8647168278 -9.72955074528 -28.1351660825 10 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.769230769231 1.0
25 0.00590449568073 -39.3044756533 -11.6754608943 -27.6290147589 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.909090909091 1.0
25 0.287592294679 -35.4186458601 -7.78364059622 -27.6350052639 12 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.833333333333 1.0
25 0.00120992554716 -40.8896308673 -14.3145182239 -26.5751126434 8 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_(recurse_()) ) if flip_() else [] )), sep='')" 1.0 0.7
25 0.00516286506357 -39.4386980235 -11.6754608943 -27.7632371292 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 1.0 0.7
25 0.00346904299065 -39.8363109331 -11.6754608943 -28.1608500387 7 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 1.0 0.5
25 0.00654905328193 -39.2008691917 -11.6754608943 -27.5254082974 13 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.909090909091 1.0
25 0.00494248233717 -39.4823219914 -11.6754608943 -27.8068610971 9 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.9 0.9
25 0.00513121130803 -39.4448479401 -11.6754608943 -27.7693870457 9 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_(recurse_())) )), sep='')" 0.833333333333 1.0
25 0.00967673871455 -38.8104647589 -11.6754608943 -27.1350038646 9 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.909090909091 1.0
25 1.30102338225e-23 -86.8687403818 -7.09049341566 -79.7782469661 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.1
25 1.30102338225e-23 -86.8687403818 -7.09049341566 -79.7782469661 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.1
25 0.00633463235291 -39.234157916 -11.6754608943 -27.5586970216 7 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 1.0 0.6
25 0.0359637318637 -37.4976787114 -9.72955074528 -27.7681279661 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.9 0.9
25 0.00556198002593 -39.3642355292 -11.6754608943 -27.6887746348 11 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 0.9
25 0.00606519264674 -39.2776233882 -11.6754608943 -27.6021624939 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 1.0 1.0
25 0.0713985537231 -36.8119120806 -9.72955074528 -27.0823613354 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.833333333333 1.0
25 0.00191244703212 -40.4318061031 -12.3686080749 -28.0631980282 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else recurse_() ) )), sep='')" 0.9 0.9
25 0.0246164530968 -37.8767746493 -9.72955074528 -28.1472239041 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 1.0 0.9
25 0.0499594588785 -37.1689778397 -9.72955074528 -27.4394270944 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.909090909091 1.0
25 0.00876565949562 -38.9093479363 -11.6754608943 -27.233887042 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
25 0.00463650129877 -39.5462296424 -11.6754608943 -27.8707687481 11 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.909090909091 1.0
25 0.00745901121047 -39.0707668339 -11.6754608943 -27.3953059395 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 1.0 0.8
25 0.00703469758118 -39.1293349919 -11.6754608943 -27.4538740976 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
25 0.00383703521837 -39.7354897039 -11.6754608943 -28.0600288096 9 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep='')" 1.0 0.9
25 9.10716367576e-23 -84.9228302327 -5.14458326661 -79.7782469661 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.1
25 0.00686596670202 -39.1536128485 -11.6754608943 -27.4781519541 11 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep='')" 0.9 0.9
25 1.30102338225e-23 -86.8687403818 -7.09049341566 -79.7782469661 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
25 0.00148376072755 -40.6856097968 -11.6754608943 -29.0101489025 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.818181818182 0.9
25 0.00497561739847 -39.4756402307 -11.6754608943 -27.8001793364 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.9 0.9
25 0.0042446482275 -39.634530745 -11.6754608943 -27.9590698506 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.909090909091 1.0
25 0.0110035742867 -38.6819695386 -11.6754608943 -27.0065086443 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 1.0 0.6
25 1.30102338225e-23 -86.8687403818 -7.09049341566 -79.7782469661 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
25 1.30102338225e-23 -86.8687403818 -7.09049341566 -79.7782469661 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.1
25 0.0416598652593 -37.3506514923 -9.72955074528 -27.621100747 10 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
25 1.30102338225e-23 -86.8687403818 -7.09049341566 -79.7782469661 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.1
25 9.10716367576e-23 -84.9228302327 -5.14458326661 -79.7782469661 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.1
25 0.270433244995 -35.4801644097 -7.78364059622 -27.6965238135 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.9 0.9
25 0.0098089164918 -38.7968978757 -11.6754608943 -27.1214369813 9 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.909090909091 1.0
25 0.00486110722364 -39.498923458 -11.6754608943 -27.8234625637 9 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 1.0 1.0
25 6.37501457303e-22 -82.9769200837 -3.19867311755 -79.7782469661 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.1
31 0.00405593104968 -46.4975803302 -11.6754608943 -34.8221194359 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', cdr_([])) ), sep='')" 1.0 1.0
31 0.0120075084904 -45.4122284351 -11.6754608943 -33.7367675408 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.888888888889 0.8
31 1.75398857385e-98 -266.081452052 -1.2527629685 -264.828689083 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
31 0.0136490186238 -45.2840929734 -11.6754608943 -33.6086320791 10 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.818181818182 0.9
31 5.5476952132e-29 -106.05159045 -7.09049341566 -98.9610970343 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.1
31 0.00405014626188 -46.4990076022 -11.6754608943 -34.8235467079 10 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 1.0 1.0
31 5.5476952132e-29 -106.05159045 -7.09049341566 -98.9610970343 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.1
31 3.54328322131e-11 -65.0533875797 -7.78364059622 -57.2697469835 11 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.888888888889 0.8
31 0.00526912574661 -46.2358961405 -11.6754608943 -34.5604352461 9 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
31 5.5476952132e-29 -106.05159045 -7.09049341566 -98.9610970343 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.1
31 6.66997788424e-10 -62.1182397035 -7.78364059622 -54.3345991073 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.818181818182 0.9
31 0.00870158162621 -45.7342557915 -11.6754608943 -34.0587948972 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 1.0 0.9
31 0.00854406210371 -45.7525240459 -11.6754608943 -34.0770631515 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.909090909091 1.0
31 0.00575342454614 -46.147965346 -11.6754608943 -34.4725044517 13 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.909090909091 1.0
31 3.88338664924e-28 -104.105680301 -5.14458326661 -98.9610970343 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.1
31 5.5476952132e-29 -106.05159045 -7.09049341566 -98.9610970343 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.1
31 5.5476952132e-29 -106.05159045 -7.09049341566 -98.9610970343 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.1
31 0.00197509178147 -47.2171457279 -14.3145182239 -32.9026275039 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 1.0 0.7
31 0.0553534113803 -43.8840223066 -9.72955074528 -34.1544715613 9 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.769230769231 1.0
31 0.00664620092674 -46.0037151946 -11.6754608943 -34.3282543002 13 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.909090909091 1.0
31 0.134016604101 -42.9997968933 -7.78364059622 -35.2161562971 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.833333333333 1.0
31 0.00158798115271 -47.4352971026 -14.3145182239 -33.1207788786 7 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_(recurse_()) ) if flip_() else [] )), sep='')" 1.0 0.7
31 0.00292272182285 -46.8252452835 -11.6754608943 -35.1497843892 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 1.0 0.7
31 0.0128585654435 -45.343750436 -11.6754608943 -33.6682895417 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 1.0 0.5
31 0.00728481457613 -45.9119686103 -11.6754608943 -34.2365077159 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.909090909091 1.0
31 0.00651032453305 -46.0243712903 -11.6754608943 -34.348910396 9 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.9 0.9
31 0.00555670531856 -46.1827552327 -11.6754608943 -34.5072943384 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_(recurse_())) )), sep='')" 0.833333333333 1.0
31 0.00902081429366 -45.6982259903 -11.6754608943 -34.022765096 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.909090909091 1.0
31 5.5476952132e-29 -106.05159045 -7.09049341566 -98.9610970343 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.1
31 5.5476952132e-29 -106.05159045 -7.09049341566 -98.9610970343 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.1
31 0.0065885728027 -46.0124238419 -11.6754608943 -34.3369629475 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 1.0 0.6
31 0.0130741542139 -45.3271232762 -9.72955074528 -35.5975725309 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.9 0.9
31 0.0102459951346 -45.5708736861 -11.6754608943 -33.8954127918 11 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 0.9
31 0.00841808651578 -45.767378049 -11.6754608943 -34.0919171547 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 1.0 1.0
31 0.0732729153337 -43.6035695605 -9.72955074528 -33.8740188152 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.833333333333 1.0
31 0.00556446200794 -46.1813602909 -12.3686080749 -33.812752216 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else recurse_() ) )), sep='')" 0.9 0.9
31 0.038710733907 -44.2416436732 -9.72955074528 -34.512092928 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 1.0 0.9
31 0.0906569956127 -43.3906774909 -9.72955074528 -33.6611267456 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.909090909091 1.0
31 0.00901776125501 -45.6985644914 -11.6754608943 -34.023103597 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
31 0.00748833911871 -45.8844135703 -11.6754608943 -34.208952676 9 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.909090909091 1.0
31 0.00937814661337 -45.6593784425 -11.6754608943 -33.9839175481 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 1.0 0.8
31 0.00492276295661 -46.3038906473 -11.6754608943 -34.628429753 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
31 0.00604656504575 -46.098270247 -11.6754608943 -34.4228093527 10 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep='')" 1.0 0.9
31 3.88338664924e-28 -104.105680301 -5.14458326661 -98.9610970343 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.1
31 0.00825612601179 -45.7868051251 -11.6754608943 -34.1113442307 9 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep='')" 0.9 0.9
31 5.5476952132e-29 -106.05159045 -7.09049341566 -98.9610970343 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
31 0.0064691156627 -46.0307211803 -11.6754608943 -34.355260286 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.818181818182 0.9
31 0.0101579549902 -45.5795034554 -11.6754608943 -33.904042561 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.9 0.9
31 0.0050573897827 -46.2769100998 -11.6754608943 -34.6014492054 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.909090909091 1.0
31 0.00277149249883 -46.8783746134 -11.6754608943 -35.2029137191 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 1.0 0.6
31 5.5476952132e-29 -106.05159045 -7.09049341566 -98.9610970343 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
31 5.5476952132e-29 -106.05159045 -7.09049341566 -98.9610970343 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.1
31 0.0460233157368 -44.0686124648 -9.72955074528 -34.3390617196 9 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
31 5.5476952132e-29 -106.05159045 -7.09049341566 -98.9610970343 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.1
31 3.88338664924e-28 -104.105680301 -5.14458326661 -98.9610970343 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.1
31 0.316373492224 -42.1408371437 -7.78364059622 -34.3571965475 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.9 0.9
31 0.00491357501711 -46.3057588105 -11.6754608943 -34.6302979162 9 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.909090909091 1.0
31 0.0108280130773 -45.5156240173 -11.6754608943 -33.8401631229 11 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 1.0 1.0
31 2.71837065447e-27 -102.159770152 -3.19867311755 -98.9610970343 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.1
37 0.00438727142272 -52.4280592863 -11.6754608943 -40.7525983919 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', cdr_([])) ), sep='')" 1.0 1.0
37 0.00681477333297 -51.9876739718 -11.6754608943 -40.3122130774 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.888888888889 0.8
37 3.94578519013e-118 -317.331404502 -1.2527629685 -316.078641533 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
37 0.0059748988213 -52.1191996123 -11.6754608943 -40.443738718 13 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.818181818182 0.9
37 6.04639994471e-34 -123.487441615 -7.09049341566 -116.396948199 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.1
37 0.00215598983325 -53.1385168389 -11.6754608943 -41.4630559445 10 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 1.0 1.0
37 6.04639994471e-34 -123.487441615 -7.09049341566 -116.396948199 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.1
37 1.52979145356e-11 -71.902316099 -7.78364059622 -64.1186755028 10 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.888888888889 0.8
37 0.00565261921898 -52.17464776 -11.6754608943 -40.4991868657 10 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
37 6.04639994471e-34 -123.487441615 -7.09049341566 -116.396948199 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.1
37 9.82624218673e-13 -74.6475611253 -7.78364059622 -66.8639205291 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.818181818182 0.9
37 0.00429416066082 -52.4495106624 -11.6754608943 -40.7740497681 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 1.0 0.9
37 0.00790284071559 -51.8395444972 -11.6754608943 -40.1640836029 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.909090909091 1.0
37 0.001725196871 -53.3614256042 -11.6754608943 -41.6859647099 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.909090909091 1.0
37 4.23247996129e-33 -121.541531466 -5.14458326661 -116.396948199 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.1
37 6.04639994471e-34 -123.487441615 -7.09049341566 -116.396948199 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.1
37 6.04639994471e-34 -123.487441615 -7.09049341566 -116.396948199 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.1
37 0.00127629272708 -53.6628072078 -14.3145182239 -39.3482889838 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 1.0 0.7
37 0.0400075965483 -50.2176974265 -9.72955074528 -40.4881466813 10 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.769230769231 1.0
37 0.00465394306935 -52.3690519442 -11.6754608943 -40.6935910498 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.909090909091 1.0
37 0.567005280321 -47.5663981599 -7.78364059622 -39.7827575637 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.833333333333 1.0
37 0.00303980956776 -52.7949719051 -14.3145182239 -38.4804536811 7 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_(recurse_()) ) if flip_() else [] )), sep='')" 1.0 0.7
37 0.000673273157735 -54.3023709273 -11.6754608943 -42.6269100329 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 1.0 0.7
37 0.00574028729034 -52.1592575167 -11.6754608943 -40.4837966223 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 1.0 0.5
37 0.00425151488427 -52.4594914135 -11.6754608943 -40.7840305192 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.909090909091 1.0
37 0.00616271763823 -52.088248921 -11.6754608943 -40.4127880267 11 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.9 0.9
37 0.00399763913594 -52.5210628055 -11.6754608943 -40.8456019111 9 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_(recurse_())) )), sep='')" 0.833333333333 1.0
37 0.00594135026419 -52.1248303516 -11.6754608943 -40.4493694573 9 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.909090909091 1.0
37 6.04639994471e-34 -123.487441615 -7.09049341566 -116.396948199 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.1
37 6.04639994471e-34 -123.487441615 -7.09049341566 -116.396948199 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.1
37 0.00224845798917 -53.0965221332 -11.6754608943 -41.4210612389 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 1.0 0.6
37 0.0418987141834 -50.1715116376 -9.72955074528 -40.4419608923 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.9 0.9
37 0.00212300664096 -53.1539334655 -11.6754608943 -41.4784725712 13 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 0.9
37 0.00520982233288 -52.2562210223 -11.6754608943 -40.580760128 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 1.0 1.0
37 0.0159440051393 -51.1376838711 -9.72955074528 -41.4081331258 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.833333333333 1.0
37 0.00272754890806 -52.9033634063 -12.3686080749 -40.5347553314 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else recurse_() ) )), sep='')" 0.9 0.9
37 0.0480165415376 -50.0352212094 -9.72955074528 -40.3056704641 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 1.0 0.9
37 0.0286134715637 -50.5528891357 -9.72955074528 -40.8233383904 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.909090909091 1.0
37 0.00839657605448 -51.7789427661 -11.6754608943 -40.1034818718 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
37 0.00288864446484 -52.8459794275 -11.6754608943 -41.1705185332 11 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.909090909091 1.0
37 0.00901813353519 -51.7075293888 -11.6754608943 -40.0320684945 9 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 1.0 0.8
37 0.005614403807 -52.1814313724 -11.6754608943 -40.5059704781 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
37 0.00309934639066 -52.7755755288 -11.6754608943 -41.1001146345 10 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep='')" 1.0 0.9
37 4.23247996129e-33 -121.541531466 -5.14458326661 -116.396948199 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.1
37 0.00340911342207 -52.6803145124 -11.6754608943 -41.004853618 13 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep='')" 0.9 0.9
37 6.04639994471e-34 -123.487441615 -7.09049341566 -116.396948199 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
37 0.00539979709817 -52.2204053979 -11.6754608943 -40.5449445035 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.818181818182 0.9
37 0.00602925312156 -52.1101436337 -11.6754608943 -40.4346827394 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.9 0.9
37 0.00408081148671 -52.5004709139 -11.6754608943 -40.8250100196 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.909090909091 1.0
37 0.00962381436231 -51.6425260869 -11.6754608943 -39.9670651925 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 1.0 0.6
37 6.04639994471e-34 -123.487441615 -7.09049341566 -116.396948199 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
37 6.04639994471e-34 -123.487441615 -7.09049341566 -116.396948199 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.1
37 0.0238187064758 -50.736295518 -9.72955074528 -41.0067447727 11 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
37 6.04639994471e-34 -123.487441615 -7.09049341566 -116.396948199 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.1
37 4.23247996129e-33 -121.541531466 -5.14458326661 -116.396948199 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.1
37 0.0780576184831 -49.5493195238 -7.78364059622 -41.7656789276 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.9 0.9
37 0.00871836704049 -51.7413348219 -11.6754608943 -40.0658739276 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.909090909091 1.0
37 0.00340639046498 -52.6811135603 -11.6754608943 -41.005652666 11 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 1.0 1.0
37 2.96273597291e-32 -119.595621317 -3.19867311755 -116.396948199 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.1
43 0.00523819460189 -58.6158279047 -11.6754608943 -46.9403670104 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', cdr_([])) ), sep='')" 1.0 1.0
43 0.00166970420046 -59.7591583168 -11.6754608943 -48.0836974224 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.888888888889 0.8
43 1.25961590477e-137 -368.587400426 -1.2527629685 -367.334637458 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
43 0.00464661571224 -58.7356656512 -11.6754608943 -47.0602047569 11 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.818181818182 0.9
43 7.28126208527e-39 -141.179563939 -7.09049341566 -134.089070524 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.1
43 0.00266710503794 -59.2908111733 -11.6754608943 -47.615350279 10 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 1.0 1.0
43 7.28126208527e-39 -141.179563939 -7.09049341566 -134.089070524 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.1
43 7.53511363507e-15 -85.883252005 -7.78364059622 -78.0996114088 11 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.888888888889 0.8
43 0.00327751310801 -59.084719866 -11.6754608943 -47.4092589717 10 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
43 7.28126208527e-39 -141.179563939 -7.09049341566 -134.089070524 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.1
43 1.19153603588e-14 -85.4249975637 -7.78364059622 -77.6413569675 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.818181818182 0.9
43 0.00512429984399 -58.6378109022 -11.6754608943 -46.9623500078 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 1.0 0.9
43 0.00827595479862 -58.1584505039 -11.6754608943 -46.4829896096 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.909090909091 1.0
43 0.00562105119542 -58.5452861102 -11.6754608943 -46.8698252158 12 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.909090909091 1.0
43 5.09688345969e-38 -139.23365379 -5.14458326661 -134.089070524 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.1
43 7.28126208527e-39 -141.179563939 -7.09049341566 -134.089070524 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.1
43 7.28126208527e-39 -141.179563939 -7.09049341566 -134.089070524 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.1
43 0.00310709064081 -59.138117999 -14.3145182239 -44.823599775 8 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 1.0 0.7
43 0.0208975895068 -57.2321709843 -9.72955074528 -47.502620239 12 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.769230769231 1.0
43 0.00564647922124 -58.5407725978 -11.6754608943 -46.8653117035 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.909090909091 1.0
43 0.459147846879 -54.1424325374 -7.78364059622 -46.3587919411 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.833333333333 1.0
43 0.00244810563584 -59.3764902864 -14.3145182239 -45.0619720625 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_(recurse_()) ) if flip_() else [] )), sep='')" 1.0 0.7
43 0.0109419600087 -57.8791998612 -11.6754608943 -46.2037389669 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 1.0 0.7
43 0.00512206430377 -58.6382472599 -11.6754608943 -46.9627863656 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 1.0 0.5
43 0.00565923233816 -58.5385165483 -11.6754608943 -46.863055654 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.909090909091 1.0
43 0.00243225277688 -59.3829869055 -11.6754608943 -47.7075260111 10 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.9 0.9
43 0.00476917531132 -58.7096314028 -11.6754608943 -47.0341705085 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_(recurse_())) )), sep='')" 0.833333333333 1.0
43 0.00475472772426 -58.7126653686 -11.6754608943 -47.0372044743 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.909090909091 1.0
43 7.28126208527e-39 -141.179563939 -7.09049341566 -134.089070524 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.1
43 7.28126208527e-39 -141.179563939 -7.09049341566 -134.089070524 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.1
43 0.00804077334766 -58.187279536 -11.6754608943 -46.5118186416 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 1.0 0.6
43 0.0182968054676 -57.365078322 -9.72955074528 -47.6355275768 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.9 0.9
43 0.00695424587434 -58.3324524118 -11.6754608943 -46.6569915175 11 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 0.9
43 0.00360050503035 -58.9907306802 -11.6754608943 -47.3152697859 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 1.0 1.0
43 0.0544704875921 -56.2741457591 -9.72955074528 -46.5445950138 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.833333333333 1.0
43 0.00150833471043 -59.8607986006 -12.3686080749 -47.4921905257 9 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else recurse_() ) )), sep='')" 0.9 0.9
43 0.0111079066474 -57.8641476367 -9.72955074528 -48.1345968914 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 1.0 0.9
43 0.03686496734 -56.6645430965 -9.72955074528 -46.9349923513 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.909090909091 1.0
43 0.0132262547014 -57.6896009553 -11.6754608943 -46.014140061 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
43 0.00209789564921 -59.5308700315 -11.6754608943 -47.8554091372 9 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.909090909091 1.0
43 0.0104378521373 -57.9263659747 -11.6754608943 -46.2509050804 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 1.0 0.8
43 0.00495848758971 -58.6707040292 -11.6754608943 -46.9952431349 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
43 0.00694602670016 -58.3336350038 -11.6754608943 -46.6581741094 11 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep='')" 1.0 0.9
43 5.09688345969e-38 -139.23365379 -5.14458326661 -134.089070524 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.1
43 0.00137095820457 -59.9562948873 -11.6754608943 -48.280833993 10 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep='')" 0.9 0.9
43 7.28126208527e-39 -141.179563939 -7.09049341566 -134.089070524 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
43 0.0160543194242 -57.4958268657 -11.6754608943 -45.8203659713 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.818181818182 0.9
43 0.00643307624958 -58.4103519568 -11.6754608943 -46.7348910625 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.9 0.9
43 0.0076917791531 -58.231652686 -11.6754608943 -46.5561917916 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.909090909091 1.0
43 0.00266352496187 -59.2921543829 -11.6754608943 -47.6166934885 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 1.0 0.6
43 7.28126208527e-39 -141.179563939 -7.09049341566 -134.089070524 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
43 7.28126208527e-39 -141.179563939 -7.09049341566 -134.089070524 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.1
43 0.0303834221731 -56.8579076656 -9.72955074528 -47.1283569203 10 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
43 7.28126208527e-39 -141.179563939 -7.09049341566 -134.089070524 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.1
43 5.09688345969e-38 -139.23365379 -5.14458326661 -134.089070524 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.1
43 0.18402350827 -55.0567412903 -7.78364059622 -47.273100694 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.9 0.9
43 0.00425537658297 -58.8236215403 -11.6754608943 -47.148160646 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.909090909091 1.0
43 0.00716652934728 -58.3023833166 -11.6754608943 -46.6269224223 11 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 1.0 1.0
43 3.56781842178e-37 -137.287743641 -3.19867311755 -134.089070524 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.1
49 0.00473166031356 -65.662822187 -11.6754608943 -53.9873612926 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', cdr_([])) ), sep='')" 1.0 1.0
49 0.00269868633166 -66.2243332348 -11.6754608943 -54.5488723404 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.888888888889 0.8
49 7.1836407017e-157 -419.843396351 -1.2527629685 -418.590633382 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
49 0.00324248122703 -66.040759498 -11.6754608943 -54.3652986037 11 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.818181818182 0.9
49 8.45419683939e-45 -161.791009266 -7.09049341566 -154.70051585 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.1
49 0.00952157234916 -64.9635383477 -11.6754608943 -53.2880774533 11 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 1.0 1.0
49 8.45419683939e-45 -161.791009266 -7.09049341566 -154.70051585 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.1
49 1.14885816392e-17 -99.3145210993 -7.78364059622 -91.5308805031 9 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.888888888889 0.8
49 0.00575873013182 -65.4663813584 -11.6754608943 -53.790920464 10 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
49 8.45419683939e-45 -161.791009266 -7.09049341566 -154.70051585 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.1
49 1.40455643267e-15 -94.5083979148 -7.78364059622 -86.7247573186 12 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.818181818182 0.9
49 0.00925903229459 -64.9914988062 -11.6754608943 -53.3160379118 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 1.0 0.9
49 0.00435314846774 -65.7461989766 -11.6754608943 -54.0707380822 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.909090909091 1.0
49 0.00217259113433 -66.4411778192 -11.6754608943 -54.7657169249 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.909090909091 1.0
49 5.91793778757e-44 -159.845099117 -5.14458326661 -154.70051585 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.1
49 8.45419683939e-45 -161.791009266 -7.09049341566 -154.70051585 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.1
49 8.45419683939e-45 -161.791009266 -7.09049341566 -154.70051585 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.1
49 0.00444137843033 -65.72613356 -14.3145182239 -51.4116153361 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 1.0 0.7
49 0.0703358451695 -62.9638167881 -9.72955074528 -53.2342660428 10 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.769230769231 1.0
49 0.00956679078301 -64.9588005377 -11.6754608943 -53.2833396434 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.909090909091 1.0
49 0.135670985255 -62.3068656169 -7.78364059622 -54.5232250207 9 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.833333333333 1.0
49 0.000763831443245 -67.4865064837 -14.3145182239 -53.1719882598 8 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_(recurse_()) ) if flip_() else [] )), sep='')" 1.0 0.7
49 0.0130645236439 -64.6471979077 -11.6754608943 -52.9717370134 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 1.0 0.7
49 0.0104354819057 -64.8718866244 -11.6754608943 -53.1964257301 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 1.0 0.5
49 0.00667636512757 -65.3185246487 -11.6754608943 -53.6430637544 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.909090909091 1.0
49 0.00301019393341 -66.1150938392 -11.6754608943 -54.4396329448 11 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.9 0.9
49 0.0105282279655 -64.8630383179 -11.6754608943 -53.1875774236 9 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_(recurse_())) )), sep='')" 0.833333333333 1.0
49 0.00381318349946 -65.8786339411 -11.6754608943 -54.2031730468 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.909090909091 1.0
49 8.45419683939e-45 -161.791009266 -7.09049341566 -154.70051585 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.1
49 8.45419683939e-45 -161.791009266 -7.09049341566 -154.70051585 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.1
49 0.00937300732938 -64.9792643478 -11.6754608943 -53.3038034535 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 1.0 0.6
49 0.0822130163078 -62.8077847068 -9.72955074528 -53.0782339615 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.9 0.9
49 0.00376055749336 -65.8925311296 -11.6754608943 -54.2170702353 10 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 0.9
49 0.00572889757974 -65.4715752278 -11.6754608943 -53.7961143335 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 1.0 1.0
49 0.0435912667673 -63.4422415188 -9.72955074528 -53.7126907735 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.833333333333 1.0
49 0.00125852256609 -66.9871598792 -12.3686080749 -54.6185518043 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else recurse_() ) )), sep='')" 0.9 0.9
49 0.0646367660879 -63.0483149622 -9.72955074528 -53.3187642169 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 1.0 0.9
49 0.0226278494998 -64.0979169192 -9.72955074528 -54.3683661739 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.909090909091 1.0
49 0.0106106179532 -64.8552431521 -11.6754608943 -53.1797822578 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
49 0.00367416134024 -65.9157734457 -11.6754608943 -54.2403125513 10 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.909090909091 1.0
49 0.00297214385538 -66.1278148163 -11.6754608943 -54.452353922 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 1.0 0.8
49 0.00287257379029 -66.1618899266 -11.6754608943 -54.4864290323 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
49 0.00341936035863 -65.9876448416 -11.6754608943 -54.3121839473 11 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep='')" 1.0 0.9
49 5.91793778757e-44 -159.845099117 -5.14458326661 -154.70051585 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.1
49 0.00578108280697 -65.4625073436 -11.6754608943 -53.7870464492 11 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep='')" 0.9 0.9
49 8.45419683939e-45 -161.791009266 -7.09049341566 -154.70051585 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
49 0.00591714697543 -65.4392439426 -11.6754608943 -53.7637830483 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.818181818182 0.9
49 0.00740216495631 -65.2153258265 -11.6754608943 -53.5398649321 13 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.9 0.9
49 0.00448645174671 -65.7160362131 -11.6754608943 -54.0405753187 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.909090909091 1.0
49 0.000285324081813 -68.4712279611 -11.6754608943 -56.7957670668 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 1.0 0.6
49 8.45419683939e-45 -161.791009266 -7.09049341566 -154.70051585 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
49 8.45419683939e-45 -161.791009266 -7.09049341566 -154.70051585 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.1
49 0.0498503984548 -63.3080718561 -9.72955074528 -53.5785211108 9 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
49 8.45419683939e-45 -161.791009266 -7.09049341566 -154.70051585 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.1
49 5.91793778757e-44 -159.845099117 -5.14458326661 -154.70051585 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.1
49 0.341919725398 -61.3825223571 -7.78364059622 -53.5988817609 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.9 0.9
49 0.0074867410018 -65.203964756 -11.6754608943 -53.5285038616 12 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.909090909091 1.0
49 0.0100875142425 -64.9057999001 -11.6754608943 -53.2303390057 8 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 1.0 1.0
49 4.1425564513e-43 -157.899188968 -3.19867311755 -154.70051585 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.1
55 0.00492267795109 -72.804376715 -11.6754608943 -61.1289158207 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', cdr_([])) ), sep='')" 1.0 1.0
55 0.00397815618836 -73.0174109537 -11.6754608943 -61.3419500594 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.888888888889 0.8
55 5.1311813578e-176 -471.110114568 -1.2527629685 -469.857351599 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
55 0.00359789078915 -73.1178816146 -11.6754608943 -61.4424207202 10 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.818181818182 0.9
55 3.57755780907e-51 -183.647633469 -7.09049341566 -176.557140053 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.1
55 0.00249378050015 -73.4844295642 -11.6754608943 -61.8089686699 10 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 1.0 1.0
55 3.57755780907e-51 -183.647633469 -7.09049341566 -176.557140053 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.1
55 1.4695208948e-17 -106.249484273 -7.78364059622 -98.4658436764 11 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.888888888889 0.8
55 0.00711386889293 -72.4361831525 -11.6754608943 -60.7607222582 8 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
55 3.57755780907e-51 -183.647633469 -7.09049341566 -176.557140053 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.1
55 3.90454144706e-18 -107.574865442 -7.78364059622 -99.7912248459 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.818181818182 0.9
55 0.00852470402843 -72.2552610919 -11.6754608943 -60.5798001976 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 1.0 0.9
55 0.00760279357359 -72.3697136412 -11.6754608943 -60.6942527469 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.909090909091 1.0
55 0.0224223766692 -71.2881699778 -11.6754608943 -59.6127090834 12 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.909090909091 1.0
55 2.50429046635e-50 -181.70172332 -5.14458326661 -176.557140053 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.1
55 3.57755780907e-51 -183.647633469 -7.09049341566 -176.557140053 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.1
55 3.57755780907e-51 -183.647633469 -7.09049341566 -176.557140053 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.1
55 0.00682571966503 -72.4775316155 -14.3145182239 -58.1630133915 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 1.0 0.7
55 0.037228083425 -70.7811659892 -9.72955074528 -61.0516152439 12 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.769230769231 1.0
55 0.00477758379847 -72.8342944592 -11.6754608943 -61.1588335649 12 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.909090909091 1.0
55 0.154776541659 -69.3562469864 -7.78364059622 -61.5726063902 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.833333333333 1.0
55 0.00319098798514 -73.2378988144 -14.3145182239 -58.9233805904 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_(recurse_()) ) if flip_() else [] )), sep='')" 1.0 0.7
55 0.00547485497553 -72.6980636096 -11.6754608943 -61.0226027152 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 1.0 0.7
55 0.00130493462228 -74.1320764548 -11.6754608943 -62.4566155605 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 1.0 0.5
55 0.00347237910844 -73.1533894154 -11.6754608943 -61.477928521 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.909090909091 1.0
55 0.00623150600837 -72.568611358 -11.6754608943 -60.8931504636 12 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.9 0.9
55 0.00750976952159 -72.3820246207 -11.6754608943 -60.7065637263 9 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_(recurse_())) )), sep='')" 0.833333333333 1.0
55 0.00717689858623 -72.4273620585 -11.6754608943 -60.7519011641 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.909090909091 1.0
55 3.57755780907e-51 -183.647633469 -7.09049341566 -176.557140053 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.1
55 3.57755780907e-51 -183.647633469 -7.09049341566 -176.557140053 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.1
55 0.0038920935475 -73.0392821966 -11.6754608943 -61.3638213022 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 1.0 0.6
55 0.111134953009 -69.6874841407 -9.72955074528 -59.9579333954 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.9 0.9
55 0.00410961168986 -72.9849008517 -11.6754608943 -61.3094399574 12 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 0.9
55 0.0026632914761 -73.4186666416 -11.6754608943 -61.7432057472 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 1.0 1.0
55 0.0725977344829 -70.1132956806 -9.72955074528 -60.3837449353 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.833333333333 1.0
55 0.00705566891838 -72.4443980008 -12.3686080749 -60.0757899259 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else recurse_() ) )), sep='')" 0.9 0.9
55 0.0268844749277 -71.1066804167 -9.72955074528 -61.3771296714 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 1.0 0.9
55 0.0396666793841 -70.7177178714 -9.72955074528 -60.9881671261 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.909090909091 1.0
55 0.00547880712937 -72.6973419963 -11.6754608943 -61.021881102 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
55 0.00419554686025 -72.964205705 -11.6754608943 -61.2887448107 11 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.909090909091 1.0
55 0.0113649551046 -71.9676948895 -11.6754608943 -60.2922339951 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 1.0 0.8
55 0.0245314364628 -71.1982739804 -11.6754608943 -59.5228130861 12 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
55 0.00496138179197 -72.7965451074 -11.6754608943 -61.1210842131 10 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep='')" 1.0 0.9
55 2.50429046635e-50 -181.70172332 -5.14458326661 -176.557140053 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.1
55 0.00368296369189 -73.0945116173 -11.6754608943 -61.419050723 10 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep='')" 0.9 0.9
55 3.57755780907e-51 -183.647633469 -7.09049341566 -176.557140053 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
55 0.00546354368117 -72.7001317913 -11.6754608943 -61.024670897 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.818181818182 0.9
55 0.022788728709 -71.2719633376 -11.6754608943 -59.5965024432 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.9 0.9
55 0.0263116715536 -71.1282167704 -11.6754608943 -59.4527558761 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.909090909091 1.0
55 0.0235201080448 -71.2403736797 -11.6754608943 -59.5649127853 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 1.0 0.6
55 3.57755780907e-51 -183.647633469 -7.09049341566 -176.557140053 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
55 3.57755780907e-51 -183.647633469 -7.09049341566 -176.557140053 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.1
55 0.0337514359519 -70.8792064333 -9.72955074528 -61.149655688 10 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
55 3.57755780907e-51 -183.647633469 -7.09049341566 -176.557140053 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.1
55 2.50429046635e-50 -181.70172332 -5.14458326661 -176.557140053 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.1
55 0.242184708573 -68.9085287028 -7.78364059622 -61.1248881066 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.9 0.9
55 0.0189946703509 -71.4540709645 -11.6754608943 -59.7786100701 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.909090909091 1.0
55 0.00614002671097 -72.583400304 -11.6754608943 -60.9079394096 13 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 1.0 1.0
55 1.75300332645e-49 -179.755813171 -3.19867311755 -176.557140053 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.1
61 0.0108945907823 -78.2776424222 -11.6754608943 -66.6021815278 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', cdr_([])) ), sep='')" 1.0 1.0
61 0.00406398499308 -79.2637448121 -11.6754608943 -67.5882839178 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.888888888889 0.8
61 1.48433444709e-195 -522.367280197 -1.2527629685 -521.114517228 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
61 0.00401262902686 -79.2764621855 -11.6754608943 -67.6010012912 10 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.818181818182 0.9
61 2.36563741505e-55 -199.53928616 -7.09049341566 -192.448792744 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.1
61 0.0020311262545 -79.9573183853 -11.6754608943 -68.281857491 9 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 1.0 1.0
61 2.36563741505e-55 -199.53928616 -7.09049341566 -192.448792744 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.1
61 5.92754962572e-20 -118.0302445 -7.78364059622 -110.246603903 11 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.888888888889 0.8
61 0.0111150747328 -78.2576065587 -11.6754608943 -66.5821456644 11 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
61 2.36563741505e-55 -199.53928616 -7.09049341566 -192.448792744 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.1
61 8.34953454566e-18 -113.08247943 -7.78364059622 -105.298838834 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.818181818182 0.9
61 0.0127299359471 -78.1219524488 -11.6754608943 -66.4464915545 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 1.0 0.9
61 0.00413286678012 -79.2469375279 -11.6754608943 -67.5714766336 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.909090909091 1.0
61 0.00116472706224 -80.5134220515 -11.6754608943 -68.8379611571 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.909090909091 1.0
61 1.65594619054e-54 -197.593376011 -5.14458326661 -192.448792744 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.1
61 2.36563741505e-55 -199.53928616 -7.09049341566 -192.448792744 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.1
61 2.36563741505e-55 -199.53928616 -7.09049341566 -192.448792744 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.1
61 0.00691570947806 -78.73211327 -14.3145182239 -64.417595046 8 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 1.0 0.7
61 0.13178027588 -75.7847728707 -9.72955074528 -66.0552221255 10 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.769230769231 1.0
61 0.00383259136936 -79.3223676576 -11.6754608943 -67.6469067632 12 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.909090909091 1.0
61 0.280745394676 -75.0284606399 -7.78364059622 -67.2448200436 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.833333333333 1.0
61 0.00978521360275 -78.3850363995 -14.3145182239 -64.0705181755 8 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_(recurse_()) ) if flip_() else [] )), sep='')" 1.0 0.7
61 0.00906930014653 -78.4610137299 -11.6754608943 -66.7855528356 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 1.0 0.7
61 0.0173471415811 -77.8124810873 -11.6754608943 -66.1370201929 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 1.0 0.5
61 0.00179779072702 -80.0793502925 -11.6754608943 -68.4038893982 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.909090909091 1.0
61 0.0174239925807 -77.8080606893 -11.6754608943 -66.132599795 10 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.9 0.9
61 0.00578557517685 -78.9105410484 -11.6754608943 -67.2350801541 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_(recurse_())) )), sep='')" 0.833333333333 1.0
61 0.018278000934 -77.7602106278 -11.6754608943 -66.0847497334 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.909090909091 1.0
61 2.36563741505e-55 -199.53928616 -7.09049341566 -192.448792744 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.1
61 2.36563741505e-55 -199.53928616 -7.09049341566 -192.448792744 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.1
61 0.017089551194 -77.8274415943 -11.6754608943 -66.1519806999 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 1.0 0.6
61 0.0355936505008 -77.0937415645 -9.72955074528 -67.3641908192 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.9 0.9
61 0.00436038645056 -79.1933481408 -11.6754608943 -67.5178872465 11 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 0.9
61 0.00188288307306 -80.0331046781 -11.6754608943 -68.3576437837 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 1.0 1.0
61 0.090138794888 -76.1645581819 -9.72955074528 -66.4350074366 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.833333333333 1.0
61 0.000861992499757 -80.814417539 -12.3686080749 -68.4458094642 13 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else recurse_() ) )), sep='')" 0.9 0.9
61 0.0902015772191 -76.163861917 -9.72955074528 -66.4343111717 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 1.0 0.9
61 0.0580181833533 -76.6051523622 -9.72955074528 -66.8756016169 8 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.909090909091 1.0
61 0.00926767499468 -78.4393762912 -11.6754608943 -66.7639153969 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
61 0.00688724467395 -78.7362377268 -11.6754608943 -67.0607768325 10 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.909090909091 1.0
61 0.00999291100712 -78.3640328874 -11.6754608943 -66.6885719931 13 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 1.0 0.8
61 0.00857083974469 -78.5175431154 -11.6754608943 -66.842082221 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.9 0.9
61 0.00505463789254 -79.0456026133 -11.6754608943 -67.370141719 10 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep='')" 1.0 0.9
61 1.65594619054e-54 -197.593376011 -5.14458326661 -192.448792744 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.1
61 0.00507231756428 -79.0421110033 -11.6754608943 -67.3666501089 12 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep='')" 0.9 0.9
61 2.36563741505e-55 -199.53928616 -7.09049341566 -192.448792744 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
61 0.00956994529782 -78.4072813403 -11.6754608943 -66.7318204459 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.818181818182 0.9
61 0.00385567679895 -79.3163622742 -11.6754608943 -67.6409013798 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.9 0.9
61 0.0126919559804 -78.1249404243 -11.6754608943 -66.44947953 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.909090909091 1.0
61 0.00543963891379 -78.9721961472 -11.6754608943 -67.2967352529 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 1.0 0.6
61 2.36563741505e-55 -199.53928616 -7.09049341566 -192.448792744 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.1
61 2.36563741505e-55 -199.53928616 -7.09049341566 -192.448792744 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.1
61 0.00795277653174 -78.5923877127 -9.72955074528 -68.8628369675 9 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 1.0 1.0
61 2.36563741505e-55 -199.53928616 -7.09049341566 -192.448792744 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.1
61 1.65594619054e-54 -197.593376011 -5.14458326661 -192.448792744 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.1
61 0.0568605071382 -76.6253078045 -7.78364059622 -68.8416672082 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.9 0.9
61 0.00280973527011 -79.6328185607 -11.6754608943 -67.9573576664 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.909090909091 1.0
61 0.00492119728122 -79.072356979 -11.6754608943 -67.3968960846 10 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 1.0 1.0
61 1.15916233338e-53 -195.647465862 -3.19867311755 -192.448792744 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.1
