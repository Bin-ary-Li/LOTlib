1 0.000624422309989 -12.6822495178 -11.6754608943 -1.0067886235 10 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
1 0.000628881198886 -12.6751340702 -11.6754608943 -0.999673175916 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.3 1.0
1 1.46086419434e-05 -16.4374631686 -15.5672811924 -0.870181976134 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else car_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
1 0.000655533243069 -12.6336274201 -11.6754608943 -0.958166525799 11 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 0.3 1.0
1 0.000101830552146 -14.4957662577 -13.6213710434 -0.874395214324 6 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
1 0.000627133920734 -12.6779163286 -11.6754608943 -1.00245543427 12 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.25 1.0
1 5.23328955985e-05 -15.1614512838 -14.3145182239 -0.846933059882 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_(recurse_()) ) )), sep='')" 0.375 1.0
1 0.000102454994197 -14.489652815 -13.6213710434 -0.868281771581 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
1 0.000655852866378 -12.6331399614 -11.6754608943 -0.957679067051 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.333333333333 1.0
1 1.44645577246e-05 -16.4473750737 -15.5672811924 -0.880093881265 7 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', car_([])) ), sep='')" 0.428571428571 1.0
1 0.0104986941059 -9.86007027857 -7.09049341566 -2.76957686291 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.333333333333
1 2.1241170793e-06 -18.3657202122 -17.5131913415 -0.852528870673 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
1 0.0305784742885 -8.79102485034 -7.78364059622 -1.00738425411 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
1 5.13129559805e-05 -15.1811331626 -14.3145182239 -0.866614938649 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
1 5.08701420217e-05 -15.1898002854 -14.3145182239 -0.87528206148 7 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_(recurse_()) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.428571428571 1.0
1 9.219333064e-05 -14.595188644 -13.6213710434 -0.973817600572 12 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else cdr_([]) )))), sep='')" 0.272727272727 1.0
1 1.46239852645e-05 -16.436413429 -15.5672811924 -0.869132236585 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.6 1.0
1 0.00065026307856 -12.6416994189 -11.6754608943 -0.966238524529 8 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.3 1.0
1 2.12798859854e-06 -18.3638992225 -17.5131913415 -0.850707880978 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.5 1.0
1 1.48261702512e-05 -16.4226825567 -15.5672811924 -0.855401364215 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.428571428571 1.0
1 0.000102452913666 -14.489673122 -13.6213710434 -0.868302078564 7 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
1 0.00430382700549 -10.751816529 -9.72955074528 -1.02226578369 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
1 0.000103201418041 -14.4823938424 -13.6213710434 -0.861022799061 7 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.5 1.0
1 7.36004726374e-06 -17.1230100817 -16.260428373 -0.862581708687 6 "lambda recurse_: flatten2str(( cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )) if flip_() else recurse_() ), sep='')" 0.5 1.0
1 1.46707391582e-05 -16.4332214595 -15.5672811924 -0.865940267088 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.5 1.0
1 0.000105766755965 -14.4578401819 -13.6213710434 -0.836469138511 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else car_([]) ) )), sep='')" 0.5 1.0
1 0.0320938513622 -8.74265669169 -7.78364059622 -0.959016095469 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.3 1.0
1 2.12447373343e-06 -18.3655523193 -17.5131913415 -0.852360977766 7 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
1 0.000632977312181 -12.6686418563 -11.6754608943 -0.993180962015 9 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.25 1.0
1 0.000628152656159 -12.6762932161 -11.6754608943 -1.0008323218 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
1 0.0112128753706 -9.79425845243 -1.2527629685 -8.54149548394 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
1 0.000103021046923 -14.4841431297 -13.6213710434 -0.862772086316 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
1 0.0104986941059 -9.86007027857 -7.09049341566 -2.76957686291 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.333333333333
1 1.46330867482e-05 -16.4357912558 -15.5672811924 -0.868510063318 6 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
1 2.08499006584e-06 -18.3843123455 -17.5131913415 -0.871121003963 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
1 0.0104986941059 -9.86007027857 -7.09049341566 -2.76957686291 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.333333333333
1 2.08144054869e-06 -18.3860162106 -17.5131913415 -0.872824869134 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
1 0.000102585099312 -14.4883837448 -13.6213710434 -0.867012701416 4 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )), sep='')" 0.428571428571 1.0
1 0.000103845840559 -14.476168939 -13.6213710434 -0.854797895599 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )), sep='')" 0.6 1.0
1 5.27932131105e-05 -15.1526937932 -14.3145182239 -0.83817556929 6 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.5 1.0
1 2.13943718268e-06 -18.3585336404 -17.5131913415 -0.845342298922 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )))), sep='')" 0.6 1.0
1 0.000615907248387 -12.6959800547 -11.6754608943 -1.02051916039 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.3 1.0
1 0.000102843933751 -14.4858638033 -13.6213710434 -0.864492759879 7 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
1 1.47313772905e-05 -16.4290967076 -15.5672811924 -0.861815515159 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )))), sep='')" 0.428571428571 1.0
1 0.000104464992026 -14.4702244254 -13.6213710434 -0.84885338198 5 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( recurse_() if flip_() else [] )) ), sep='')" 0.428571428571 1.0
1 0.0104986941059 -9.86007027857 -7.09049341566 -2.76957686291 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.333333333333
1 0.0104986941059 -9.86007027857 -7.09049341566 -2.76957686291 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.333333333333
1 0.000721478290897 -12.5377741472 -11.6754608943 -0.862313252867 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 0.6 1.0
1 0.000647990962991 -12.6451996859 -11.6754608943 -0.969738791528 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
1 0.000103902109374 -14.4756272363 -13.6213710434 -0.854256192867 6 "lambda recurse_: flatten2str(cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.5 1.0
1 0.00064300337839 -12.6529264578 -11.6754608943 -0.977465563452 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 0.272727272727 1.0
1 2.01009909573e-06 -18.4208924139 -17.5131913415 -0.907701072402 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
1 0.000661973698371 -12.6238506115 -11.6754608943 -0.948389717191 11 "lambda recurse_: flatten2str(cons_('a', cdr_(( [] if flip_() else cons_('a', recurse_()) ))), sep='')" 0.25 1.0
1 0.000104453153836 -14.4703377539 -13.6213710434 -0.84896671048 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
1 0.000100682662277 -14.5071028232 -13.6213710434 -0.885731779852 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
1 0.00010366576966 -14.4779044654 -13.6213710434 -0.856533422053 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
1 1.44866711578e-05 -16.4458474399 -15.5672811924 -0.878566247491 5 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
1 5.20244487832e-05 -15.1673626591 -14.3145182239 -0.852844435172 8 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.5 1.0
1 1.46245474531e-05 -16.4363749869 -15.5672811924 -0.869093794409 5 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
1 7.30392268651e-06 -17.130664878 -16.260428373 -0.870236504964 6 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
1 9.34792861677e-05 -14.5813365627 -13.6213710434 -0.959965519289 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( car_([]) if flip_() else recurse_() )))), sep='')" 0.272727272727 1.0
1 0.00453512373633 -10.6994687892 -9.72955074528 -0.969918043913 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.272727272727 1.0
1 0.000626951980259 -12.6782064849 -11.6754608943 -1.00274559059 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.272727272727 1.0
1 0.073490858741 -7.91416012952 -5.14458326661 -2.76957686291 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.333333333333
1 0.0104986941059 -9.86007027857 -7.09049341566 -2.76957686291 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.333333333333
1 1.46245099472e-05 -16.4363775514 -15.5672811924 -0.869096358999 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.6 1.0
1 0.00455143665526 -10.6958782256 -9.72955074528 -0.966327480322 10 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.25 1.0
1 0.000721880052347 -12.5372174435 -11.6754608943 -0.861756549174 4 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
1 0.000619285473091 -12.6905100854 -11.6754608943 -1.01504919109 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.333333333333 1.0
1 9.97192906591e-05 -14.5167172908 -13.6213710434 -0.895346247422 3 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', car_(cdr_(recurse_()))) )), sep='')" 1.0 1.0
1 1.45715415379e-05 -16.4400060193 -15.5672811924 -0.87272482687 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.5 1.0
1 0.0104986941059 -9.86007027857 -7.09049341566 -2.76957686291 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.333333333333
1 0.000627633439958 -12.6771201344 -11.6754608943 -1.00165924006 8 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
1 0.073490858741 -7.91416012952 -5.14458326661 -2.76957686291 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.333333333333
1 1.47330984909e-05 -16.4289798754 -15.5672811924 -0.861698682917 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', car_([])) ), sep='')" 0.5 1.0
1 7.40918977439e-06 -17.116355345 -16.260428373 -0.855926971969 7 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
1 1.43059012502e-05 -16.4584043091 -15.5672811924 -0.89112311669 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
1 0.000104576243081 -14.4691600319 -13.6213710434 -0.847788988491 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
1 2.06902842602e-06 -18.3919972984 -17.5131913415 -0.87880595693 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
1 2.09353182543e-06 -18.3802239277 -17.5131913415 -0.867032586233 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.428571428571 1.0
1 0.000101395195498 -14.5000507278 -13.6213710434 -0.878679684369 6 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
1 0.000657181383098 -12.631116378 -11.6754608943 -0.955655483625 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.333333333333 1.0
1 0.000633505860209 -12.6678071859 -11.6754608943 -0.992346291536 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.3 1.0
1 0.000730031755106 -12.5259884028 -11.6754608943 -0.85052750844 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
1 0.0104986941059 -9.86007027857 -7.09049341566 -2.76957686291 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
1 0.000635045460025 -12.6653798492 -11.6754608943 -0.98991895486 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 0.3 1.0
1 1.48820238419e-05 -16.4189224051 -15.5672811924 -0.851641212635 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.6 1.0
1 0.0104986941059 -9.86007027857 -7.09049341566 -2.76957686291 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.333333333333
1 0.073490858741 -7.91416012952 -5.14458326661 -2.76957686291 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.333333333333
1 7.48276338585e-06 -17.1064742757 -16.260428373 -0.846045902738 8 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_(recurse_()) )) if flip_() else cons_('a', []) ), sep='')" 0.428571428571 1.0
1 0.000102439086162 -14.4898080955 -13.6213710434 -0.868437052149 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
1 9.21155135492e-05 -14.5960330646 -13.6213710434 -0.974662021204 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else car_([]) )))), sep='')" 0.3 1.0
1 0.0140115402905 -9.5714398606 -7.78364059622 -1.78779926438 10 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.3 1.0
1 0.000627384555885 -12.6775167567 -11.6754608943 -1.00205586239 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.3 1.0
1 5.10820413914e-05 -15.1856434412 -14.3145182239 -0.871125217207 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
1 0.0145596338571 -9.53306826185 -7.78364059622 -1.74942766563 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.333333333333 1.0
1 0.00458541201933 -10.688441193 -9.72955074528 -0.958890447735 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.375 1.0
1 2.08117217685e-06 -18.3861451546 -17.5131913415 -0.872953813074 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )))), sep='')" 0.5 1.0
1 1.44560453885e-05 -16.4479637431 -15.5672811924 -0.88068255062 6 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
1 0.00066345939303 -12.6216087854 -11.6754608943 -0.946147891042 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.3 1.0
1 0.000102258644388 -14.4915711031 -13.6213710434 -0.870200059689 7 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
1 0.000659003517754 -12.6283475636 -11.6754608943 -0.952886669275 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 0.3 1.0
1 0.000722046101277 -12.5369874471 -11.6754608943 -0.861526552742 7 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
1 0.00450951698453 -10.7051311081 -9.72955074528 -0.975580362849 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.3 1.0
1 0.000104026475092 -14.4744310012 -13.6213710434 -0.853059957786 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
1 0.00010373894366 -14.4771988498 -13.6213710434 -0.855827806425 5 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.375 1.0
1 8.81815904952e-05 -14.6396782194 -13.6213710434 -1.01830717604 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else recurse_() )))), sep='')" 0.3 1.0
1 1.47909700483e-05 -16.4250595734 -15.5672811924 -0.857778380982 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.5 1.0
1 0.000101597790655 -14.4980546467 -13.6213710434 -0.876683603337 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )), sep='')" 0.6 1.0
1 0.0104986941059 -9.86007027857 -7.09049341566 -2.76957686291 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
1 0.0104986941059 -9.86007027857 -7.09049341566 -2.76957686291 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.333333333333
1 0.00447888184857 -10.7119477292 -9.72955074528 -0.982396983953 11 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
1 0.000642390471918 -12.6538801056 -11.6754608943 -0.978419211267 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.3 1.0
1 0.514436011187 -5.96824998046 -3.19867311755 -2.76957686291 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.333333333333
7 0.00581448973161 -18.5862508735 -11.6754608943 -6.91078997921 9 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
7 0.00464982974278 -18.8097733008 -11.6754608943 -7.13431240649 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.3 1.0
7 0.000244584843051 -21.7547969292 -15.5672811924 -6.18751573677 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else car_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
7 0.00606669505816 -18.54378992 -11.6754608943 -6.86832902565 10 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 0.3 1.0
7 0.00162520618426 -19.8609692149 -13.6213710434 -6.23959817156 6 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
7 0.00631977688327 -18.502920001 -11.6754608943 -6.82745910671 10 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.25 1.0
7 0.000980452933417 -20.3663445424 -14.3145182239 -6.05182631848 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_(recurse_()) ) )), sep='')" 0.375 1.0
7 0.00184099470678 -19.7362978782 -13.6213710434 -6.11492683485 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
7 0.00705490703266 -18.3928804976 -11.6754608943 -6.71741960326 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.333333333333 1.0
7 0.000296070144154 -21.5637627845 -15.5672811924 -5.9964815921 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', car_([])) ), sep='')" 0.428571428571 1.0
7 1.48163362032e-06 -26.8612139077 -7.09049341566 -19.7707204921 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.333333333333
7 3.68258259133e-05 -23.6481597941 -17.5131913415 -6.13496845263 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
7 0.25760536389 -14.7951750887 -7.78364059622 -7.01153449251 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
7 0.000926703023594 -20.4227260329 -14.3145182239 -6.10820780899 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
7 0.00102582185459 -20.3211098046 -14.3145182239 -6.00659158068 7 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_(recurse_()) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.428571428571 1.0
7 0.00070366291209 -20.6980597608 -13.6213710434 -7.07668871746 9 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else cdr_([]) )))), sep='')" 0.272727272727 1.0
7 0.000225283426748 -21.8369999004 -15.5672811924 -6.26971870792 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.6 1.0
7 0.00583877859012 -18.5820822759 -11.6754608943 -6.90662138153 10 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.3 1.0
7 3.95800977588e-05 -23.5760327742 -17.5131913415 -6.06284143271 7 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.5 1.0
7 0.00029202822985 -21.5775087091 -15.5672811924 -6.01022751667 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.428571428571 1.0
7 0.00173926320247 -19.7931423286 -13.6213710434 -6.17177128522 6 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
7 0.0438343420575 -16.5661863299 -9.72955074528 -6.83663558462 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
7 0.0019015711493 -19.7039234402 -13.6213710434 -6.08255239676 6 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.5 1.0
7 0.000130654161142 -22.3818053433 -16.260428373 -6.12137697028 6 "lambda recurse_: flatten2str(( cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )) if flip_() else recurse_() ), sep='')" 0.5 1.0
7 0.00027747171895 -21.62864017 -15.5672811924 -6.06135897754 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.5 1.0
7 0.00193614765752 -19.68590365 -13.6213710434 -6.06453260659 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else car_([]) ) )), sep='')" 0.5 1.0
7 0.237502667074 -14.8764250521 -7.78364059622 -7.09278445588 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.3 1.0
7 3.6644873442e-05 -23.6530856445 -17.5131913415 -6.13989430303 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
7 0.00632969410962 -18.5013519942 -11.6754608943 -6.82589109989 11 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.25 1.0
7 0.00563622540788 -18.6173893178 -11.6754608943 -6.94192842343 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
7 2.11679726667e-21 -61.0432313561 -1.2527629685 -59.7904683876 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
7 0.00173943191816 -19.7930453292 -13.6213710434 -6.17167428581 4 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
7 1.48163362032e-06 -26.8612139077 -7.09049341566 -19.7707204921 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.333333333333
7 0.000259786590097 -21.6944986976 -15.5672811924 -6.12721750519 5 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
7 3.87140804648e-05 -23.5981558141 -17.5131913415 -6.08496447262 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
7 1.48163362032e-06 -26.8612139077 -7.09049341566 -19.7707204921 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.333333333333
7 3.39856741879e-05 -23.7284200959 -17.5131913415 -6.21522875437 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
7 0.00173040324236 -19.7982494359 -13.6213710434 -6.17687839249 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )), sep='')" 0.428571428571 1.0
7 0.00193174058369 -19.688182452 -13.6213710434 -6.06681140859 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )), sep='')" 0.6 1.0
7 0.000991020773827 -20.3556236877 -14.3145182239 -6.04110546373 7 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.5 1.0
7 3.70151455223e-05 -23.643032017 -17.5131913415 -6.12984067545 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )))), sep='')" 0.6 1.0
7 0.00658864504996 -18.4612561849 -11.6754608943 -6.78579529058 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.3 1.0
7 0.00174787473229 -19.7882032941 -13.6213710434 -6.1668322507 5 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
7 0.000267109105526 -21.6667019744 -15.5672811924 -6.09942078198 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )))), sep='')" 0.428571428571 1.0
7 0.00199335857521 -19.6567829629 -13.6213710434 -6.03541191955 7 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( recurse_() if flip_() else [] )) ), sep='')" 0.428571428571 1.0
7 1.48163362032e-06 -26.8612139077 -7.09049341566 -19.7707204921 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.333333333333
7 1.48163362032e-06 -26.8612139077 -7.09049341566 -19.7707204921 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.333333333333
7 0.0112889281014 -17.922781474 -11.6754608943 -6.24732057962 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 0.6 1.0
7 0.0054345333919 -18.6538302409 -11.6754608943 -6.97836934654 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
7 0.00185013881844 -19.731343232 -13.6213710434 -6.10997218864 5 "lambda recurse_: flatten2str(cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.5 1.0
7 0.00695117866888 -18.4076926675 -11.6754608943 -6.73223177312 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 0.272727272727 1.0
7 3.60119194279e-05 -23.6705092054 -17.5131913415 -6.15731786391 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
7 0.00735678631193 -18.3509807103 -11.6754608943 -6.67551981598 11 "lambda recurse_: flatten2str(cons_('a', cdr_(( [] if flip_() else cons_('a', recurse_()) ))), sep='')" 0.25 1.0
7 0.00198626192771 -19.6603494613 -13.6213710434 -6.03897841792 7 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
7 0.00148493325784 -19.9512340783 -13.6213710434 -6.32986303488 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
7 0.00173835410886 -19.7936651542 -13.6213710434 -6.17229411079 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
7 0.000214373025443 -21.8866415772 -15.5672811924 -6.31936038472 6 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
7 0.000938944837865 -20.4096024524 -14.3145182239 -6.09508422847 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.5 1.0
7 0.000250100053619 -21.732498132 -15.5672811924 -6.16521693957 5 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
7 0.000118007065259 -22.4836146865 -16.260428373 -6.22318631352 6 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
7 0.000849344499756 -20.5098943091 -13.6213710434 -6.88852326568 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( car_([]) if flip_() else recurse_() )))), sep='')" 0.272727272727 1.0
7 0.0417351802284 -16.6152594816 -9.72955074528 -6.88570873633 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.272727272727 1.0
7 0.00586553439308 -18.5775103117 -11.6754608943 -6.9020494174 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.272727272727 1.0
7 1.03714353422e-05 -24.9153037587 -5.14458326661 -19.7707204921 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.333333333333
7 1.48163362032e-06 -26.8612139077 -7.09049341566 -19.7707204921 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.333333333333
7 0.000242315841043 -21.7641171808 -15.5672811924 -6.19683598835 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.6 1.0
7 0.0369070002601 -16.7382026633 -9.72955074528 -7.00865191802 10 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.25 1.0
7 0.0138701493101 -17.7168649061 -11.6754608943 -6.04140401173 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
7 0.00735766895713 -18.3508607405 -11.6754608943 -6.67539984617 12 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.333333333333 1.0
7 0.00123099240083 -20.1387832313 -13.6213710434 -6.5174121879 3 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', car_(cdr_(recurse_()))) )), sep='')" 1.0 1.0
7 0.000241904012797 -21.7658181781 -15.5672811924 -6.1985369857 7 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.5 1.0
7 1.48163362032e-06 -26.8612139077 -7.09049341566 -19.7707204921 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.333333333333
7 0.00673351179207 -18.4395070861 -11.6754608943 -6.76404619181 9 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
7 1.03714353422e-05 -24.9153037587 -5.14458326661 -19.7707204921 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.333333333333
7 0.00026922259587 -21.6588206529 -15.5672811924 -6.09153946048 7 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', car_([])) ), sep='')" 0.5 1.0
7 0.000129108894746 -22.3937029907 -16.260428373 -6.13327461769 6 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
7 0.000285550484151 -21.5999403437 -15.5672811924 -6.03265915123 8 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
7 0.00186943835054 -19.7209658669 -13.6213710434 -6.09959482346 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
7 3.6349465945e-05 -23.6611796724 -17.5131913415 -6.14798833093 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
7 3.64423544685e-05 -23.6586275018 -17.5131913415 -6.14543616028 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.428571428571 1.0
7 0.00206641779442 -19.6207873312 -13.6213710434 -5.99941628783 5 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
7 0.00549562545987 -18.6426515005 -11.6754608943 -6.96719060614 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.333333333333 1.0
7 0.00701272951178 -18.398876906 -11.6754608943 -6.7234160117 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.3 1.0
7 0.0128884849172 -17.7902696347 -11.6754608943 -6.11480874032 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
7 1.48163362032e-06 -26.8612139077 -7.09049341566 -19.7707204921 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
7 0.00614800518754 -18.5304762358 -11.6754608943 -6.85501534151 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 0.3 1.0
7 0.000270993852862 -21.6522630468 -15.5672811924 -6.08498185438 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.6 1.0
7 1.48163362032e-06 -26.8612139077 -7.09049341566 -19.7707204921 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.333333333333
7 1.03714353422e-05 -24.9153037587 -5.14458326661 -19.7707204921 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.333333333333
7 0.000140068182954 -22.3122298591 -16.260428373 -6.05180148612 8 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_(recurse_()) )) if flip_() else cons_('a', []) ), sep='')" 0.428571428571 1.0
7 0.00201068827856 -19.6481268147 -13.6213710434 -6.02675577131 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
7 0.000644542759547 -20.7858180188 -13.6213710434 -7.16444697541 9 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else car_([]) )))), sep='')" 0.3 1.0
7 0.00200250933012 -19.6522028461 -7.78364059622 -11.8685622499 12 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.3 1.0
7 0.00511610394304 -18.7142107045 -11.6754608943 -7.03874981021 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.3 1.0
7 0.00111177614928 -20.2406450343 -14.3145182239 -5.92612681039 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
7 0.00228880542655 -19.5185738716 -7.78364059622 -11.7349332754 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.333333333333 1.0
7 0.0473957300878 -16.4880717632 -9.72955074528 -6.75852101791 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.375 1.0
7 4.25721937898e-05 -23.5031578721 -17.5131913415 -5.98996653057 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )))), sep='')" 0.5 1.0
7 0.00026352146502 -21.6802243584 -15.5672811924 -6.112943166 5 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
7 0.0066495936871 -18.4520481522 -11.6754608943 -6.77658725785 13 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.3 1.0
7 0.00168564254474 -19.824457082 -13.6213710434 -6.20308603861 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
7 0.00614308758888 -18.5312764249 -11.6754608943 -6.85581553056 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 0.3 1.0
7 0.0128468316251 -17.7935066905 -11.6754608943 -6.11804579617 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
7 0.0520668491886 -16.394075451 -9.72955074528 -6.66452470575 12 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.3 1.0
7 0.00167583410359 -19.8302928917 -13.6213710434 -6.20892184829 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
7 0.00194524913875 -19.6812138445 -13.6213710434 -6.05984280114 4 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.375 1.0
7 0.000737727169959 -20.6507851164 -13.6213710434 -7.02941407305 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else recurse_() )))), sep='')" 0.3 1.0
7 0.000224983254867 -21.8383332077 -15.5672811924 -6.27105201522 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.5 1.0
7 0.00169342028659 -19.8198535833 -13.6213710434 -6.19848253996 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )), sep='')" 0.6 1.0
7 1.48163362032e-06 -26.8612139077 -7.09049341566 -19.7707204921 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
7 1.48163362032e-06 -26.8612139077 -7.09049341566 -19.7707204921 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.333333333333
7 0.0392481443378 -16.6766997402 -9.72955074528 -6.94714899493 11 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
7 0.00448496288736 -18.8458736847 -11.6754608943 -7.17041279033 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.3 1.0
7 7.26000473955e-05 -22.9693936096 -3.19867311755 -19.7707204921 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.333333333333
13 0.0054667809528 -24.7178818823 -11.6754608943 -13.042420988 10 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
13 0.00706184604821 -24.461865337 -11.6754608943 -12.7864044427 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.3 1.0
13 0.000332760368763 -27.5169044956 -15.5672811924 -11.9496233032 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else car_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
13 0.00511303787663 -24.7847781103 -11.6754608943 -13.1093172159 9 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 0.3 1.0
13 0.00351638667899 -25.1591378835 -13.6213710434 -11.5377668401 6 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
13 0.00424479803986 -24.9708775916 -11.6754608943 -13.2954166973 10 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.25 1.0
13 0.00204284148107 -25.7022301127 -14.3145182239 -11.3877118887 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_(recurse_()) ) )), sep='')" 0.375 1.0
13 0.00359851060672 -25.1360517947 -13.6213710434 -11.5146807514 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
13 0.00674696729015 -24.5074787207 -11.6754608943 -12.8320178263 13 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.333333333333 1.0
13 0.000434089396834 -27.2510766168 -15.5672811924 -11.6837954244 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', car_([])) ), sep='')" 0.428571428571 1.0
13 5.90685782422e-12 -45.3637236522 -7.09049341566 -38.2732302365 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.333333333333
13 5.39937401811e-05 -29.3354589959 -17.5131913415 -11.8222676545 4 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
13 0.249712806246 -20.8962603517 -7.78364059622 -13.1126197555 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
13 0.00211265921458 -25.668624389 -14.3145182239 -11.354106165 9 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
13 0.00191983069078 -25.764334834 -14.3145182239 -11.44981661 8 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_(recurse_()) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.428571428571 1.0
13 0.00112417622453 -26.2995213117 -13.6213710434 -12.6781502683 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else cdr_([]) )))), sep='')" 0.272727272727 1.0
13 0.000514656516432 -27.0808273935 -15.5672811924 -11.513546201 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.6 1.0
13 0.00490292489507 -24.8267398898 -11.6754608943 -13.1512789955 12 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.3 1.0
13 7.31145244432e-05 -29.0323000734 -17.5131913415 -11.5191087319 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.5 1.0
13 0.000490508537346 -27.128884429 -15.5672811924 -11.5616032365 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.428571428571 1.0
13 0.00253898016796 -25.4848093425 -13.6213710434 -11.8634382991 6 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
13 0.0438434226675 -22.6359471229 -9.72955074528 -12.9063963776 12 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
13 0.00340285829006 -25.1919560822 -13.6213710434 -11.5705850389 5 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.5 1.0
13 0.000224134348871 -27.9120814694 -16.260428373 -11.6516530964 6 "lambda recurse_: flatten2str(( cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )) if flip_() else recurse_() ), sep='')" 0.5 1.0
13 0.000370596740431 -27.4092125948 -15.5672811924 -11.8419314023 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.5 1.0
13 0.00319950207 -25.2535766397 -13.6213710434 -11.6322055963 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else car_([]) ) )), sep='')" 0.5 1.0
13 0.196214614172 -21.1373628038 -7.78364059622 -13.3537222076 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.3 1.0
13 6.17082377362e-05 -29.2019096785 -17.5131913415 -11.688718337 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
13 0.00612632622437 -24.6039765748 -11.6754608943 -12.9285156805 11 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.25 1.0
13 0.0058142627383 -24.6562578425 -11.6754608943 -12.9807969482 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
13 5.06625106061e-41 -112.29220426 -1.2527629685 -111.039441291 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
13 0.00432168865409 -24.9529256162 -13.6213710434 -11.3315545728 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
13 5.90685782422e-12 -45.3637236522 -7.09049341566 -38.2732302365 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.333333333333
13 0.00040865248517 -27.3114619879 -15.5672811924 -11.7441807954 6 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
13 5.71324483534e-05 -29.2789548856 -17.5131913415 -11.7657635441 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
13 5.90685782422e-12 -45.3637236522 -7.09049341566 -38.2732302365 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.333333333333
13 5.42953236405e-05 -29.3298890108 -17.5131913415 -11.8166976693 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
13 0.00257016026856 -25.472603576 -13.6213710434 -11.8512325326 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )), sep='')" 0.428571428571 1.0
13 0.00348687808081 -25.1675650311 -13.6213710434 -11.5461939877 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )), sep='')" 0.6 1.0
13 0.00160512934383 -25.9433674928 -14.3145182239 -11.6288492689 5 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.5 1.0
13 3.56909103702e-05 -29.7494310683 -17.5131913415 -12.2362397268 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )))), sep='')" 0.6 1.0
13 0.00599542289172 -24.6255755075 -11.6754608943 -12.9501146132 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.3 1.0
13 0.00299722651546 -25.318884468 -13.6213710434 -11.6975134246 5 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
13 0.000493572166789 -27.1226580304 -15.5672811924 -11.555376838 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )))), sep='')" 0.428571428571 1.0
13 0.00358261169772 -25.1404797753 -13.6213710434 -11.5191087319 5 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( recurse_() if flip_() else [] )) ), sep='')" 0.428571428571 1.0
13 5.90685782422e-12 -45.3637236522 -7.09049341566 -38.2732302365 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.333333333333
13 5.90685782422e-12 -45.3637236522 -7.09049341566 -38.2732302365 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.333333333333
13 0.0299733059141 -23.0162646516 -11.6754608943 -11.3408037572 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 0.6 1.0
13 0.00736436819182 -24.4199185732 -11.6754608943 -12.7444576789 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
13 0.00375175912183 -25.0943470051 -13.6213710434 -11.4729759617 6 "lambda recurse_: flatten2str(cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.5 1.0
13 0.0078312479183 -24.3584499604 -11.6754608943 -12.6829890661 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 0.272727272727 1.0
13 7.86261051154e-05 -28.9596233428 -17.5131913415 -11.4464320013 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
13 0.00405496513683 -25.0166297443 -11.6754608943 -13.34116885 9 "lambda recurse_: flatten2str(cons_('a', cdr_(( [] if flip_() else cons_('a', recurse_()) ))), sep='')" 0.25 1.0
13 0.00427202316922 -24.9644843091 -13.6213710434 -11.3431132657 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
13 0.00264980161205 -25.4420870604 -13.6213710434 -11.820716017 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
13 0.00241464042942 -25.5350214487 -13.6213710434 -11.9136504053 7 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
13 0.000339184689895 -27.4977823462 -15.5672811924 -11.9305011538 6 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
13 0.00129049917941 -26.1615427299 -14.3145182239 -11.847024506 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.5 1.0
13 0.000427333266992 -27.2667629197 -15.5672811924 -11.6994817272 6 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
13 0.000302212836587 -27.6131955872 -16.260428373 -11.3527672142 5 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
13 0.000875332632182 -26.549723148 -13.6213710434 -12.9283521047 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( car_([]) if flip_() else recurse_() )))), sep='')" 0.272727272727 1.0
13 0.0296335468617 -23.0276647747 -9.72955074528 -13.2981140295 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.272727272727 1.0
13 0.00824996276999 -24.3063631466 -11.6754608943 -12.6309022523 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.272727272727 1.0
13 4.13480047695e-11 -43.4178135031 -5.14458326661 -38.2732302365 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.333333333333
13 5.90685782422e-12 -45.3637236522 -7.09049341566 -38.2732302365 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.333333333333
13 0.000403839602656 -27.3233093372 -15.5672811924 -11.7560281448 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.6 1.0
13 0.0387437185572 -22.7596031933 -9.72955074528 -13.0300524481 12 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.25 1.0
13 0.0148047773686 -23.7216219104 -11.6754608943 -12.0461610161 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
13 0.00701205086986 -24.4689416125 -11.6754608943 -12.7934807182 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.333333333333 1.0
13 0.00175705256905 -25.8529341057 -13.6213710434 -12.2315630623 3 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', car_(cdr_(recurse_()))) )), sep='')" 1.0 1.0
13 0.000286317335955 -27.6672263512 -15.5672811924 -12.0999451588 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.5 1.0
13 5.90685782422e-12 -45.3637236522 -7.09049341566 -38.2732302365 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.333333333333
13 0.00899314480425 -24.2201092356 -11.6754608943 -12.5446483412 10 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
13 4.13480047695e-11 -43.4178135031 -5.14458326661 -38.2732302365 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.333333333333
13 0.000332358423499 -27.5181131378 -15.5672811924 -11.9508319453 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', car_([])) ), sep='')" 0.5 1.0
13 0.000159615631138 -28.2515584935 -16.260428373 -11.9911301205 6 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
13 0.000406761669137 -27.3160996788 -15.5672811924 -11.7488184864 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
13 0.0033377413946 -25.2112774852 -13.6213710434 -11.5899064418 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
13 6.50945341288e-05 -29.1484865287 -17.5131913415 -11.6352951872 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
13 6.70817377932e-05 -29.1184152703 -17.5131913415 -11.6052239288 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.428571428571 1.0
13 0.00284764356116 -25.3700800026 -13.6213710434 -11.7487089592 6 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
13 0.00458671306128 -24.8934081754 -11.6754608943 -13.217947281 13 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.333333333333 1.0
13 0.00824083928698 -24.3074696403 -11.6754608943 -12.632008746 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.3 1.0
13 0.0218871119681 -23.3306738653 -11.6754608943 -11.6552129709 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
13 5.90685782422e-12 -45.3637236522 -7.09049341566 -38.2732302365 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
13 0.00623458556343 -24.5864597267 -11.6754608943 -12.9109988324 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 0.3 1.0
13 0.00034812158209 -27.4717753206 -15.5672811924 -11.9044941282 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.6 1.0
13 5.90685782422e-12 -45.3637236522 -7.09049341566 -38.2732302365 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.333333333333
13 4.13480047695e-11 -43.4178135031 -5.14458326661 -38.2732302365 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.333333333333
13 0.000245666881881 -27.8203506337 -16.260428373 -11.5599222607 8 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_(recurse_()) )) if flip_() else cons_('a', []) ), sep='')" 0.428571428571 1.0
13 0.0029678900214 -25.3287205644 -13.6213710434 -11.707349521 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
13 0.00115376737255 -26.2735392701 -13.6213710434 -12.6521682267 12 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else car_([]) )))), sep='')" 0.3 1.0
13 2.23081260765e-05 -30.2193761031 -7.78364059622 -22.4357355069 10 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.3 1.0
13 0.00662741696843 -24.5253567035 -11.6754608943 -12.8498958091 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.3 1.0
13 0.00108738760469 -26.3327937076 -14.3145182239 -12.0182754837 7 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
13 1.14017761053e-05 -30.8905579712 -7.78364059622 -23.106917375 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.333333333333 1.0
13 0.0547347826461 -22.4140724467 -9.72955074528 -12.6845217014 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.375 1.0
13 8.07002816041e-05 -28.9335850484 -17.5131913415 -11.4203937069 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )))), sep='')" 0.5 1.0
13 0.000489480137983 -27.1309832282 -15.5672811924 -11.5637020358 6 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
13 0.0060249992348 -24.6206544819 -11.6754608943 -12.9451935875 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.3 1.0
13 0.00333129663593 -25.2132102259 -13.6213710434 -11.5918391825 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
13 0.00526711695093 -24.7550886895 -11.6754608943 -13.0796277952 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 0.3 1.0
13 0.0246147067529 -23.2132277344 -11.6754608943 -11.5377668401 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
13 0.0248186712694 -23.2049755906 -9.72955074528 -13.4754248453 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.3 1.0
13 0.00446098339243 -24.9212026009 -13.6213710434 -11.2998315575 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
13 0.00250234337714 -25.4993441906 -13.6213710434 -11.8779731472 5 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.375 1.0
13 0.00062436797268 -26.8875872188 -13.6213710434 -13.2662161755 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else recurse_() )))), sep='')" 0.3 1.0
13 0.000442575297559 -27.2317164993 -15.5672811924 -11.6644353068 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.5 1.0
13 0.00281165522205 -25.3827984773 -13.6213710434 -11.7614274339 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )), sep='')" 0.6 1.0
13 5.90685782422e-12 -45.3637236522 -7.09049341566 -38.2732302365 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
13 5.90685782422e-12 -45.3637236522 -7.09049341566 -38.2732302365 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.333333333333
13 0.0420461887539 -22.677803088 -9.72955074528 -12.9482523427 9 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
13 0.00474335771529 -24.8598265706 -11.6754608943 -13.1843656762 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.3 1.0
13 2.89436033387e-10 -41.4719033541 -3.19867311755 -38.2732302365 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.333333333333
19 0.00307591083383 -30.8736353152 -11.6754608943 -19.1981744209 10 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
19 0.00482835941991 -30.4227296334 -11.6754608943 -18.7472687391 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.3 1.0
19 0.00101206444698 -31.9852441271 -15.5672811924 -16.4179629347 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else car_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
19 0.0036259183116 -30.7091287952 -11.6754608943 -19.0336679009 10 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 0.3 1.0
19 0.00822425561205 -29.8901485893 -13.6213710434 -16.2687775459 5 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
19 0.00417141169415 -30.5689818645 -11.6754608943 -18.8935209701 9 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.25 1.0
19 0.00260770236025 -31.0387668669 -14.3145182239 -16.7242486429 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_(recurse_()) ) )), sep='')" 0.375 1.0
19 0.00675748903056 -30.0865850029 -13.6213710434 -16.4652139595 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
19 0.00650052728854 -30.1253530838 -11.6754608943 -18.4498921895 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.333333333333 1.0
19 0.000595857041116 -32.5149908834 -15.5672811924 -16.9477096909 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', car_([])) ), sep='')" 0.428571428571 1.0
19 9.66899811701e-17 -61.9645029839 -7.09049341566 -54.8740095683 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.333333333333
19 2.98858716173e-05 -35.5076058102 -17.5131913415 -17.9944144687 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
19 0.275051809345 -26.3802769012 -7.78364059622 -18.596636305 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
19 0.00301472485293 -30.8937278121 -14.3145182239 -16.5792095882 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
19 0.00264196748911 -31.0257124782 -14.3145182239 -16.7111942542 8 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_(recurse_()) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.428571428571 1.0
19 0.000984060956005 -32.0133038155 -13.6213710434 -18.3919327721 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else cdr_([]) )))), sep='')" 0.272727272727 1.0
19 0.000758657166131 -32.2734416739 -15.5672811924 -16.7061604815 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.6 1.0
19 0.00287788965412 -30.9401791122 -11.6754608943 -19.2647182179 9 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.3 1.0
19 0.000122422976543 -34.0975095884 -17.5131913415 -16.5843182469 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.5 1.0
19 0.000470752751751 -32.7506586448 -15.5672811924 -17.1833774523 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.428571428571 1.0
19 0.00256505182365 -31.0552576962 -13.6213710434 -17.4338866528 5 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
19 0.0611806793611 -27.8834049358 -9.72955074528 -18.1538541905 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
19 0.00432059530343 -30.5338431843 -13.6213710434 -16.9124721409 5 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.5 1.0
19 0.000290929111478 -33.2319120234 -16.260428373 -16.9714836504 4 "lambda recurse_: flatten2str(( cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )) if flip_() else recurse_() ), sep='')" 0.5 1.0
19 0.000469188571184 -32.7539868994 -15.5672811924 -17.1867057069 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.5 1.0
19 0.00745376385441 -29.9885172586 -13.6213710434 -16.3671462152 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else car_([]) ) )), sep='')" 0.5 1.0
19 0.146659145805 -27.0091252204 -7.78364059622 -19.2254846242 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.3 1.0
19 7.59808081111e-05 -34.5745108742 -17.5131913415 -17.0613195327 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
19 0.00442783890142 -30.5093247464 -11.6754608943 -18.833863852 10 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.25 1.0
19 0.00781814999631 -29.9407884256 -11.6754608943 -18.2653275312 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
19 7.43348363154e-61 -163.541177163 -1.2527629685 -162.288414195 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
19 0.00540587661738 -30.3097497544 -13.6213710434 -16.6883787111 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
19 9.66899811701e-17 -61.9645029839 -7.09049341566 -54.8740095683 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.333333333333
19 0.000509226347083 -32.6720990503 -15.5672811924 -17.1048178579 5 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
19 0.000111972468557 -34.1867386331 -17.5131913415 -16.6735472916 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
19 9.66899811701e-17 -61.9645029839 -7.09049341566 -54.8740095683 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.333333333333
19 8.83394512142e-05 -34.4238048638 -17.5131913415 -16.9106135223 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
19 0.00436462770645 -30.5237034837 -13.6213710434 -16.9023324403 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )), sep='')" 0.428571428571 1.0
19 0.00301898096099 -30.8923170345 -13.6213710434 -17.2709459911 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )), sep='')" 0.6 1.0
19 0.0027702143822 -30.9783116673 -14.3145182239 -16.6637934433 6 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.5 1.0
19 0.000116272410223 -34.1490558557 -17.5131913415 -16.6358645143 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )))), sep='')" 0.6 1.0
19 0.00395794979556 -30.621510216 -11.6754608943 -18.9460493216 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.3 1.0
19 0.00190933893352 -31.3504793047 -13.6213710434 -17.7291082613 5 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
19 0.000718858051752 -32.3273277441 -15.5672811924 -16.7600465516 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )))), sep='')" 0.428571428571 1.0
19 0.00359121212351 -30.7187465944 -13.6213710434 -17.097375551 5 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( recurse_() if flip_() else [] )) ), sep='')" 0.428571428571 1.0
19 9.66899811701e-17 -61.9645029839 -7.09049341566 -54.8740095683 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.333333333333
19 9.66899811701e-17 -61.9645029839 -7.09049341566 -54.8740095683 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.333333333333
19 0.0229415925357 -28.8642848477 -11.6754608943 -17.1888239534 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 0.6 1.0
19 0.00364995173708 -30.702522434 -11.6754608943 -19.0270615396 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
19 0.0047798247963 -30.4328324864 -13.6213710434 -16.811461443 4 "lambda recurse_: flatten2str(cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.5 1.0
19 0.0018207984183 -31.3979612825 -11.6754608943 -19.7225003882 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 0.272727272727 1.0
19 7.65436246739e-05 -34.5671308223 -17.5131913415 -17.0539394808 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
19 0.00453285255337 -30.4858849347 -11.6754608943 -18.8104240404 12 "lambda recurse_: flatten2str(cons_('a', cdr_(( [] if flip_() else cons_('a', recurse_()) ))), sep='')" 0.25 1.0
19 0.00414087217736 -30.5763299423 -13.6213710434 -16.9549588989 4 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
19 0.00204856909941 -31.2800948296 -13.6213710434 -17.6587237862 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
19 0.00324611845049 -30.8197764191 -13.6213710434 -17.1984053757 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
19 0.000333917120156 -33.0940988388 -15.5672811924 -17.5268176464 6 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
19 0.00186855612418 -31.3720703723 -14.3145182239 -17.0575521483 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.5 1.0
19 0.000789725315593 -32.2333064745 -15.5672811924 -16.6660252821 6 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
19 0.000321066040346 -33.1333448226 -16.260428373 -16.8729164496 7 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
19 0.000401920026274 -32.9087385285 -13.6213710434 -19.2873674852 9 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( car_([]) if flip_() else recurse_() )))), sep='')" 0.272727272727 1.0
19 0.0275251803125 -28.6821351453 -9.72955074528 -18.9525844 8 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.272727272727 1.0
19 0.00368403927293 -30.6932266 -11.6754608943 -19.0177657057 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.272727272727 1.0
19 6.7682986819e-16 -60.0185928349 -5.14458326661 -54.8740095683 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.333333333333
19 9.66899811701e-17 -61.9645029839 -7.09049341566 -54.8740095683 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.333333333333
19 0.000768790479153 -32.2601731842 -15.5672811924 -16.6928919918 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.6 1.0
19 0.0133978592145 -29.4021414447 -9.72955074528 -19.6725906994 10 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.25 1.0
19 0.042662717871 -28.2439109577 -11.6754608943 -16.5684500634 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
19 0.00508215641456 -30.3715007162 -11.6754608943 -18.6960398219 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.333333333333 1.0
19 0.00199931639421 -31.3044310595 -13.6213710434 -17.6830600161 3 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', car_(cdr_(recurse_()))) )), sep='')" 1.0 1.0
19 0.000569314837214 -32.5605580599 -15.5672811924 -16.9932768675 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.5 1.0
19 9.66899811701e-17 -61.9645029839 -7.09049341566 -54.8740095683 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.333333333333
19 0.005255368461 -30.3379862606 -11.6754608943 -18.6625253663 12 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
19 6.7682986819e-16 -60.0185928349 -5.14458326661 -54.8740095683 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.333333333333
19 0.000891269035176 -32.1123453284 -15.5672811924 -16.545064136 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', car_([])) ), sep='')" 0.5 1.0
19 0.000365704389756 -33.003166329 -16.260428373 -16.742737956 6 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
19 0.000533769600817 -32.625027371 -15.5672811924 -17.0577461786 7 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
19 0.00469845187172 -30.4500033133 -13.6213710434 -16.8286322699 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
19 9.14164875767e-05 -34.3895658063 -17.5131913415 -16.8763744648 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
19 0.00011125654188 -34.193152935 -17.5131913415 -16.6799615935 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.428571428571 1.0
19 0.0067803241346 -30.0832114705 -13.6213710434 -16.4618404271 5 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
19 0.00846751089457 -29.8609997864 -11.6754608943 -18.1855388921 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.333333333333 1.0
19 0.00675154577351 -30.0874648966 -11.6754608943 -18.4120040023 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.3 1.0
19 0.0245752107288 -28.7954981378 -11.6754608943 -17.1200372435 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
19 9.66899811701e-17 -61.9645029839 -7.09049341566 -54.8740095683 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
19 0.0049510225541 -30.3976422469 -11.6754608943 -18.7221813526 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 0.3 1.0
19 0.000645085589863 -32.4356086523 -15.5672811924 -16.8683274599 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.6 1.0
19 9.66899811701e-17 -61.9645029839 -7.09049341566 -54.8740095683 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.333333333333
19 6.7682986819e-16 -60.0185928349 -5.14458326661 -54.8740095683 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.333333333333
19 0.000379943405667 -32.9649693486 -16.260428373 -16.7045409756 8 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_(recurse_()) )) if flip_() else cons_('a', []) ), sep='')" 0.428571428571 1.0
19 0.0044451627541 -30.5054198954 -13.6213710434 -16.884048852 4 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
19 0.000599064897043 -32.5096217232 -13.6213710434 -18.8882506798 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else car_([]) )))), sep='')" 0.3 1.0
19 2.78457819957e-07 -40.1834803432 -7.78364059622 -32.399839747 10 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.3 1.0
19 0.00448007240905 -30.4975971697 -11.6754608943 -18.8221362754 13 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.3 1.0
19 0.00177378721137 -31.4241194506 -14.3145182239 -17.1096012266 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
19 1.6839203891e-07 -40.6864521109 -7.78364059622 -32.9028115147 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.333333333333 1.0
19 0.037154807728 -28.382143202 -9.72955074528 -18.6525924568 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.375 1.0
19 0.000100864713372 -34.2912115104 -17.5131913415 -16.7780201689 8 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )))), sep='')" 0.5 1.0
19 0.000539521997938 -32.6143080992 -15.5672811924 -17.0470269068 7 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
19 0.00514228700902 -30.3597384549 -11.6754608943 -18.6842775605 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.3 1.0
19 0.00361362856614 -30.7125239683 -13.6213710434 -17.0911529249 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
19 0.00321582312383 -30.8291530278 -11.6754608943 -19.1536921334 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 0.3 1.0
19 0.0501905350644 -28.0814099144 -11.6754608943 -16.40594902 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
19 0.0469293092694 -28.1485939674 -9.72955074528 -18.4190432221 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.3 1.0
19 0.00513126474784 -30.3618842104 -13.6213710434 -16.740513167 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
19 0.00464728416428 -30.4609533805 -13.6213710434 -16.8395823371 5 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.375 1.0
19 0.000418715132768 -32.8678008431 -13.6213710434 -19.2464297997 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else recurse_() )))), sep='')" 0.3 1.0
19 0.00047965039607 -32.7319341607 -15.5672811924 -17.1646529683 7 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.5 1.0
19 0.00311756624108 -30.8601837323 -13.6213710434 -17.2388126889 4 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )), sep='')" 0.6 1.0
19 9.66899811701e-17 -61.9645029839 -7.09049341566 -54.8740095683 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
19 9.66899811701e-17 -61.9645029839 -7.09049341566 -54.8740095683 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.333333333333
19 0.0232685842803 -28.8501322421 -9.72955074528 -19.1205814969 9 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
19 0.00443620127368 -30.5074379375 -11.6754608943 -18.8319770432 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.3 1.0
19 4.73780907733e-15 -58.0726826858 -3.19867311755 -54.8740095683 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.333333333333
25 0.00607047236159 -35.9306038405 -11.6754608943 -24.2551429461 10 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
25 0.00554646156441 -36.0208800931 -11.6754608943 -24.3454191988 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.3 1.0
25 0.00109616385831 -37.6422235785 -15.5672811924 -22.074942386 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else car_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
25 0.00598812061423 -35.9442626526 -11.6754608943 -24.2688017582 11 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 0.3 1.0
25 0.00552686818087 -36.024418939 -13.6213710434 -22.4030478956 6 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
25 0.00585900530465 -35.9660604156 -11.6754608943 -24.2905995213 11 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.25 1.0
25 0.00309247801202 -36.6050675464 -14.3145182239 -22.2905493225 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_(recurse_()) ) )), sep='')" 0.375 1.0
25 0.0127867839355 -35.1856281291 -13.6213710434 -21.5642570857 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
25 0.00631650856416 -35.8908736484 -11.6754608943 -24.2154127541 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.333333333333 1.0
25 0.000540184244453 -38.3498852657 -15.5672811924 -22.7826040733 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', car_([])) ), sep='')" 0.428571428571 1.0
25 1.88131587499e-21 -78.5486004699 -7.09049341566 -71.4581070543 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.333333333333
25 0.000182720631195 -39.4338371596 -17.5131913415 -21.9206458181 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
25 0.107997535608 -33.0519318531 -7.78364059622 -25.2682912569 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
25 0.00423628903653 -36.2903526028 -14.3145182239 -21.9758343788 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
25 0.00419045902662 -36.3012299807 -14.3145182239 -21.9867117568 8 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_(recurse_()) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.428571428571 1.0
25 0.000444677547818 -38.5444461327 -13.6213710434 -24.9230750893 9 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else cdr_([]) )))), sep='')" 0.272727272727 1.0
25 0.00169783060673 -37.2046889391 -15.5672811924 -21.6374077467 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.6 1.0
25 0.00675925224353 -35.8231279925 -11.6754608943 -24.1476670982 11 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.3 1.0
25 0.000323795198606 -38.8616843277 -17.5131913415 -21.3484929862 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.5 1.0
25 0.00202736178966 -37.0273049247 -15.5672811924 -21.4600237323 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.428571428571 1.0
25 0.0139479212971 -35.0987097754 -13.6213710434 -21.477338732 5 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
25 0.0298590350816 -34.3375527847 -9.72955074528 -24.6080020394 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
25 0.0095537183835 -35.4771098233 -13.6213710434 -21.8557387799 6 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.5 1.0
25 0.000721460882278 -38.060517381 -16.260428373 -21.800089008 6 "lambda recurse_: flatten2str(( cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )) if flip_() else recurse_() ), sep='')" 0.5 1.0
25 0.00138396622978 -37.4090868051 -15.5672811924 -21.8418056127 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.5 1.0
25 0.00800842816963 -35.6535457532 -13.6213710434 -22.0321747099 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else car_([]) ) )), sep='')" 0.5 1.0
25 0.212859343161 -32.3734086747 -7.78364059622 -24.5897680785 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.3 1.0
25 0.000148342019409 -39.642274991 -17.5131913415 -22.1290836495 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
25 0.00402730813074 -36.3409420664 -11.6754608943 -24.6654811721 10 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.25 1.0
25 0.00652190463895 -35.8588738057 -11.6754608943 -24.1834129114 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
25 1.27499512507e-80 -214.790150067 -1.2527629685 -213.537387098 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
25 0.00910848293743 -35.5248340913 -13.6213710434 -21.9034630479 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
25 1.88131587499e-21 -78.5486004699 -7.09049341566 -71.4581070543 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.333333333333
25 0.00141952838017 -37.3837155718 -15.5672811924 -21.8164343793 6 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
25 0.000208512409919 -39.3017969811 -17.5131913415 -21.7886056396 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
25 1.88131587499e-21 -78.5486004699 -7.09049341566 -71.4581070543 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.333333333333
25 0.000113623406203 -39.908906015 -17.5131913415 -22.3957146735 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
25 0.00890116154673 -35.5478584825 -13.6213710434 -21.9264874391 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )), sep='')" 0.428571428571 1.0
25 0.00895331092855 -35.5420168615 -13.6213710434 -21.9206458181 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )), sep='')" 0.6 1.0
25 0.00416344224277 -36.3076980672 -14.3145182239 -21.9931798433 6 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.5 1.0
25 0.00015546012525 -39.5954062711 -17.5131913415 -22.0822149296 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )))), sep='')" 0.6 1.0
25 0.00470010724532 -36.186454935 -11.6754608943 -24.5109940406 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.3 1.0
25 0.008206085227 -35.6291642817 -13.6213710434 -22.0077932383 5 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
25 0.000924772660089 -37.8122476061 -15.5672811924 -22.2449664137 7 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )))), sep='')" 0.428571428571 1.0
25 0.00811617732522 -35.640180991 -13.6213710434 -22.0188099476 6 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( recurse_() if flip_() else [] )) ), sep='')" 0.428571428571 1.0
25 1.88131587499e-21 -78.5486004699 -7.09049341566 -71.4581070543 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.333333333333
25 1.88131587499e-21 -78.5486004699 -7.09049341566 -71.4581070543 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.333333333333
25 0.0256817410156 -34.4882599885 -11.6754608943 -22.8127990942 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 0.6 1.0
25 0.00693975218855 -35.7967741954 -11.6754608943 -24.1213133011 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
25 0.00546762324645 -36.0351962466 -13.6213710434 -22.4138252032 6 "lambda recurse_: flatten2str(cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.5 1.0
25 0.0031850093474 -36.5755850377 -11.6754608943 -24.9001241434 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 0.272727272727 1.0
25 0.000134116759887 -39.7430847775 -17.5131913415 -22.2298934361 7 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
25 0.00442361570531 -36.247082867 -11.6754608943 -24.5716219727 10 "lambda recurse_: flatten2str(cons_('a', cdr_(( [] if flip_() else cons_('a', recurse_()) ))), sep='')" 0.25 1.0
25 0.0075133162441 -35.7173633161 -13.6213710434 -22.0959922728 7 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
25 0.00397640910837 -36.3536610836 -13.6213710434 -22.7322900402 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
25 0.00767595235993 -35.6959478898 -13.6213710434 -22.0745768464 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
25 0.000501569218834 -38.4240539191 -15.5672811924 -22.8567727266 6 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
25 0.00199443575623 -37.0436790802 -14.3145182239 -22.7291608562 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.5 1.0
25 0.00194028115603 -37.0712073732 -15.5672811924 -21.5039261808 5 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
25 0.000338033955103 -38.8186491912 -16.260428373 -22.5582208182 6 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
25 0.000694677317811 -38.0983480937 -13.6213710434 -24.4769770503 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( car_([]) if flip_() else recurse_() )))), sep='')" 0.272727272727 1.0
25 0.0315529581764 -34.2823729154 -9.72955074528 -24.5528221702 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.272727272727 1.0
25 0.00418893331862 -36.3015941379 -11.6754608943 -24.6261332436 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.272727272727 1.0
25 1.31692111249e-20 -76.6026903209 -5.14458326661 -71.4581070543 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.333333333333
25 1.88131587499e-21 -78.5486004699 -7.09049341566 -71.4581070543 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.333333333333
25 0.00118169226405 -37.5670927284 -15.5672811924 -21.9998115359 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.6 1.0
25 0.0172240405841 -34.8877341453 -9.72955074528 -25.1581834 10 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.25 1.0
25 0.0544007194744 -33.7376628822 -11.6754608943 -22.0622019878 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
25 0.00204582448245 -37.0182393834 -11.6754608943 -25.3427784891 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.333333333333 1.0
25 0.00215990759032 -36.963974823 -13.6213710434 -23.3426037797 3 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', car_(cdr_(recurse_()))) )), sep='')" 1.0 1.0
25 0.000420003595977 -38.6015322675 -15.5672811924 -23.034251075 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.5 1.0
25 1.88131587499e-21 -78.5486004699 -7.09049341566 -71.4581070543 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.333333333333
25 0.00565870233304 -36.0008456654 -11.6754608943 -24.3253847711 9 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
25 1.31692111249e-20 -76.6026903209 -5.14458326661 -71.4581070543 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.333333333333
25 0.00147385178996 -37.3461610224 -15.5672811924 -21.77887983 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', car_([])) ), sep='')" 0.5 1.0
25 0.000464967174123 -38.4998287307 -16.260428373 -22.2394003577 6 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
25 0.0013238378294 -37.4535052969 -15.5672811924 -21.8862241045 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
25 0.00359505779229 -36.4544801948 -13.6213710434 -22.8331091514 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
25 0.000179921835154 -39.4492730331 -17.5131913415 -21.9360816916 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
25 0.000166448862577 -39.52710741 -17.5131913415 -22.0139160685 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.428571428571 1.0
25 0.00697846437133 -35.7912113731 -13.6213710434 -22.1698403297 6 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
25 0.00847504121107 -35.5969147456 -11.6754608943 -23.9214538513 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.333333333333 1.0
25 0.00291843803955 -36.6629917064 -11.6754608943 -24.987530812 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.3 1.0
25 0.0631108256655 -33.5891479431 -11.6754608943 -21.9136870488 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
25 1.88131587499e-21 -78.5486004699 -7.09049341566 -71.4581070543 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
25 0.00234040447926 -36.8837164927 -11.6754608943 -25.2082555984 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 0.3 1.0
25 0.00107631048127 -37.6605012901 -15.5672811924 -22.0932200976 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.6 1.0
25 1.88131587499e-21 -78.5486004699 -7.09049341566 -71.4581070543 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.333333333333
25 1.31692111249e-20 -76.6026903209 -5.14458326661 -71.4581070543 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.333333333333
25 0.00052720482763 -38.3742064003 -16.260428373 -22.1137780273 7 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_(recurse_()) )) if flip_() else cons_('a', []) ), sep='')" 0.428571428571 1.0
25 0.00443293830934 -36.2449776221 -13.6213710434 -22.6236065787 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
25 0.000337231798417 -38.8210250175 -13.6213710434 -25.1996539741 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else car_([]) )))), sep='')" 0.3 1.0
25 2.05112092149e-09 -50.8311643848 -7.78364059622 -43.0475237886 11 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.3 1.0
25 0.00291109356908 -36.665511454 -11.6754608943 -24.9900505597 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.3 1.0
25 0.00380136055402 -36.3986812184 -14.3145182239 -22.0841629944 7 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
25 1.3135954674e-09 -51.2767828103 -7.78364059622 -43.4931422141 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.333333333333 1.0
25 0.0437381611079 -33.9558192886 -9.72955074528 -24.2262685434 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.375 1.0
25 9.52609178908e-05 -40.0851759096 -17.5131913415 -22.5719845681 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )))), sep='')" 0.5 1.0
25 0.00064664756653 -38.1699941139 -15.5672811924 -22.6027129214 6 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
25 0.00176712516195 -37.1646862377 -11.6754608943 -25.4892253434 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.3 1.0
25 0.0105795792775 -35.3751146018 -13.6213710434 -21.7537435584 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
25 0.00258112709938 -36.7858140978 -11.6754608943 -25.1103532035 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 0.3 1.0
25 0.0382104258586 -34.090931855 -11.6754608943 -22.4154709606 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
25 0.0231215967321 -34.5932731573 -9.72955074528 -24.8637224121 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.3 1.0
25 0.0130521269324 -35.1650891577 -13.6213710434 -21.5437181144 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
25 0.00781973833331 -35.6773891688 -13.6213710434 -22.0560181254 5 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.375 1.0
25 0.000456725313871 -38.5177133941 -13.6213710434 -24.8963423507 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else recurse_() )))), sep='')" 0.3 1.0
25 0.00157575824784 -37.2793036779 -15.5672811924 -21.7120224855 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.5 1.0
25 0.00699624931342 -35.7886660685 -13.6213710434 -22.1672950251 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )), sep='')" 0.6 1.0
25 1.88131587499e-21 -78.5486004699 -7.09049341566 -71.4581070543 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
25 1.88131587499e-21 -78.5486004699 -7.09049341566 -71.4581070543 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.333333333333
25 0.0297674072016 -34.3406261847 -9.72955074528 -24.6110754394 10 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
25 0.00349429302459 -36.4829091883 -11.6754608943 -24.807448294 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.3 1.0
25 9.21844778745e-20 -74.6567801718 -3.19867311755 -71.4581070543 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.333333333333
31 0.00127239554672 -43.0013971197 -11.6754608943 -31.3259362254 12 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
31 0.00125893796805 -43.0120300177 -11.6754608943 -31.3365691234 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.3 1.0
31 0.00144666533076 -42.8730373647 -15.5672811924 -27.3057561723 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else car_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
31 0.00507875649285 -41.617232054 -11.6754608943 -29.9417711596 10 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 0.3 1.0
31 0.0152027853816 -40.5208198409 -13.6213710434 -26.8994487975 5 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
31 0.00382920942178 -41.8996401361 -11.6754608943 -30.2241792418 9 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.25 1.0
31 0.0069478798842 -41.3038619403 -14.3145182239 -26.9893437164 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_(recurse_()) ) )), sep='')" 0.375 1.0
31 0.0101446498978 -40.9253520379 -13.6213710434 -27.3039809945 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
31 0.00269875225191 -42.2495089634 -11.6754608943 -30.5740480691 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.333333333333 1.0
31 0.0019510136912 -42.5739494216 -15.5672811924 -27.0066682291 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', car_([])) ), sep='')" 0.428571428571 1.0
31 9.84853589907e-27 -96.2170179281 -7.09049341566 -89.1265245125 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.333333333333
31 0.00015896348327 -45.0813792688 -17.5131913415 -27.5681879273 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
31 0.0906649373375 -38.7351277968 -7.78364059622 -30.9514872005 9 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
31 0.00835771945143 -41.1191129037 -14.3145182239 -26.8045946798 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
31 0.004883950742 -41.6563440301 -14.3145182239 -27.3418258062 7 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_(recurse_()) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.428571428571 1.0
31 0.000291512618515 -44.4749704866 -13.6213710434 -30.8535994432 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else cdr_([]) )))), sep='')" 0.272727272727 1.0
31 0.000896792162645 -43.3512296472 -15.5672811924 -27.7839484548 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.6 1.0
31 0.00415901769617 -41.8170195851 -11.6754608943 -30.1415586907 10 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.3 1.0
31 0.000343664097531 -44.31038906 -17.5131913415 -26.7971977185 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.5 1.0
31 0.00134600788366 -42.9451554124 -15.5672811924 -27.37787422 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.428571428571 1.0
31 0.0128511517055 -40.6888650665 -13.6213710434 -27.0674940231 6 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
31 0.0388350375602 -39.5829756317 -9.72955074528 -29.8534248864 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
31 0.0096932945229 -40.9708641406 -13.6213710434 -27.3494930972 6 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.5 1.0
31 0.000770193216625 -43.5034123656 -16.260428373 -27.2429839926 5 "lambda recurse_: flatten2str(( cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )) if flip_() else recurse_() ), sep='')" 0.5 1.0
31 0.00116983803369 -43.0854331942 -15.5672811924 -27.5181520018 7 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.5 1.0
31 0.015979686614 -40.4709801717 -13.6213710434 -26.8496091283 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else car_([]) ) )), sep='')" 0.5 1.0
31 0.125350055618 -38.4111882324 -7.78364059622 -30.6275476362 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.3 1.0
31 0.000250054584496 -44.6283745477 -17.5131913415 -27.1151832062 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
31 0.00306798089435 -42.1212788446 -11.6754608943 -30.4458179503 11 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.25 1.0
31 0.00159236243718 -42.7770797777 -11.6754608943 -31.1016188833 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
31 1.74007732263e-100 -266.039122971 -1.2527629685 -264.786360002 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
31 0.0102959988164 -40.9105431454 -13.6213710434 -27.289172102 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
31 9.84853589907e-27 -96.2170179281 -7.09049341566 -89.1265245125 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.333333333333
31 0.00182380980599 -42.6413708875 -15.5672811924 -27.0740896951 5 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
31 6.76915534832e-05 -45.9350923715 -17.5131913415 -28.42190103 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
31 9.84853589907e-27 -96.2170179281 -7.09049341566 -89.1265245125 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.333333333333
31 6.61193120645e-05 -45.9585929111 -17.5131913415 -28.4454015697 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
31 0.014486522591 -40.56907976 -13.6213710434 -26.9477087166 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )), sep='')" 0.428571428571 1.0
31 0.0132439089714 -40.6587607543 -13.6213710434 -27.0373897109 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )), sep='')" 0.6 1.0
31 0.00803201432409 -41.1588631544 -14.3145182239 -26.8443449304 7 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.5 1.0
31 0.000177688468215 -44.9700219413 -17.5131913415 -27.4568305998 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )))), sep='')" 0.6 1.0
31 0.0024752774267 -42.3359460194 -11.6754608943 -30.6604851251 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.3 1.0
31 0.0175401348708 -40.3778068245 -13.6213710434 -26.7564357811 5 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
31 0.00228546727556 -42.4157280003 -15.5672811924 -26.8484468079 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )))), sep='')" 0.428571428571 1.0
31 0.0165241314589 -40.4374766756 -13.6213710434 -26.8161056322 6 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( recurse_() if flip_() else [] )) ), sep='')" 0.428571428571 1.0
31 9.84853589907e-27 -96.2170179281 -7.09049341566 -89.1265245125 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.333333333333
31 9.84853589907e-27 -96.2170179281 -7.09049341566 -89.1265245125 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.333333333333
31 0.0809116858011 -38.8489402396 -11.6754608943 -27.1734793453 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 0.6 1.0
31 0.00142282792318 -42.8896521143 -11.6754608943 -31.21419122 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
31 0.00692822969291 -41.3066941757 -13.6213710434 -27.6853231323 5 "lambda recurse_: flatten2str(cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.5 1.0
31 0.0032832607327 -42.0534614463 -11.6754608943 -30.378000552 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 0.272727272727 1.0
31 0.000189835485561 -44.9038959481 -17.5131913415 -27.3907046066 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
31 0.0010084236131 -43.2339101683 -11.6754608943 -31.5584492739 11 "lambda recurse_: flatten2str(cons_('a', cdr_(( [] if flip_() else cons_('a', recurse_()) ))), sep='')" 0.25 1.0
31 0.0131005333481 -40.6696455577 -13.6213710434 -27.0482745144 7 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
31 0.00347429898472 -41.9969057731 -13.6213710434 -28.3755347297 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
31 0.0166911616626 -40.4274191632 -13.6213710434 -26.8060481198 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
31 0.000494827920465 -43.945843713 -15.5672811924 -28.3785625206 5 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
31 0.00654006082609 -41.3643520347 -14.3145182239 -27.0498338107 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.5 1.0
31 0.00158562720009 -42.7813184618 -15.5672811924 -27.2140372694 5 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
31 0.000718068886735 -43.5734882727 -16.260428373 -27.3130598997 6 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
31 0.000830833172632 -43.42762476 -13.6213710434 -29.8062537166 9 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( car_([]) if flip_() else recurse_() )))), sep='')" 0.272727272727 1.0
31 0.0157746200747 -40.4838961766 -9.72955074528 -30.7543454313 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.272727272727 1.0
31 0.00247803907245 -42.3348309499 -11.6754608943 -30.6593700556 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.272727272727 1.0
31 6.89397512935e-26 -94.2711077791 -5.14458326661 -89.1265245125 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.333333333333
31 9.84853589907e-27 -96.2170179281 -7.09049341566 -89.1265245125 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.333333333333
31 0.000906030815839 -43.3409804612 -15.5672811924 -27.7736992687 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.6 1.0
31 0.0126421412301 -40.7052627252 -9.72955074528 -30.97571198 11 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.25 1.0
31 0.0681937457979 -39.0199456439 -11.6754608943 -27.3444847496 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
31 0.0021134705017 -42.4939671169 -11.6754608943 -30.8185062225 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.333333333333 1.0
31 0.00135884276684 -42.9356650699 -13.6213710434 -29.3142940265 3 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', car_(cdr_(recurse_()))) )), sep='')" 1.0 1.0
31 0.00101775472359 -43.2246995511 -15.5672811924 -27.6574183587 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.5 1.0
31 9.84853589907e-27 -96.2170179281 -7.09049341566 -89.1265245125 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.333333333333
31 0.0020248241744 -42.5368156314 -11.6754608943 -30.8613547371 11 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
31 6.89397512935e-26 -94.2711077791 -5.14458326661 -89.1265245125 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.333333333333
31 0.00148218993154 -42.8487778231 -15.5672811924 -27.2814966307 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', car_([])) ), sep='')" 0.5 1.0
31 0.000883837741424 -43.3657802843 -16.260428373 -27.1053519113 6 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
31 0.00234123744549 -42.3916188883 -15.5672811924 -26.8243376958 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
31 0.0100863495325 -40.9311155225 -13.6213710434 -27.3097444791 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
31 6.86690004195e-05 -45.9207559135 -17.5131913415 -28.407564572 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
31 0.000205486570432 -44.8246730986 -17.5131913415 -27.3114817571 7 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.428571428571 1.0
31 0.0144027577225 -40.574878804 -13.6213710434 -26.9535077606 6 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
31 0.0042205552724 -41.8023318002 -11.6754608943 -30.1268709059 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.333333333333 1.0
31 0.00494339670727 -41.6442458132 -11.6754608943 -29.9687849189 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.3 1.0
31 0.0630727336936 -39.0980099372 -11.6754608943 -27.4225490428 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
31 9.84853589907e-27 -96.2170179281 -7.09049341566 -89.1265245125 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
31 0.00396390964742 -41.8650676778 -11.6754608943 -30.1896067835 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 0.3 1.0
31 0.00382096613558 -41.901795195 -15.5672811924 -26.3345140026 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.6 1.0
31 9.84853589907e-27 -96.2170179281 -7.09049341566 -89.1265245125 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.333333333333
31 6.89397512935e-26 -94.2711077791 -5.14458326661 -89.1265245125 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.333333333333
31 0.000811738807108 -43.4508751574 -16.260428373 -27.1904467844 7 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_(recurse_()) )) if flip_() else cons_('a', []) ), sep='')" 0.428571428571 1.0
31 0.00733654605394 -41.2494303337 -13.6213710434 -27.6280592903 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
31 0.000389267808887 -44.1857862182 -13.6213710434 -30.5644151748 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else car_([]) )))), sep='')" 0.3 1.0
31 6.20334964976e-11 -59.8378898324 -7.78364059622 -52.0542492362 10 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.3 1.0
31 0.00295515161026 -42.1587485448 -11.6754608943 -30.4832876505 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.3 1.0
31 0.0047742788652 -41.6790555612 -14.3145182239 -27.3645373372 7 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
31 4.01942158934e-10 -57.9692561426 -7.78364059622 -50.1856155464 12 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.333333333333 1.0
31 0.0168694366 -40.4167950013 -9.72955074528 -30.687244256 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.375 1.0
31 0.000113882703319 -45.4148847793 -17.5131913415 -27.9016934378 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )))), sep='')" 0.5 1.0
31 0.00200751920053 -42.5453987695 -15.5672811924 -26.9781175771 6 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
31 0.00103625281878 -43.2066873531 -11.6754608943 -31.5312264587 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.3 1.0
31 0.0115675902627 -40.7940912558 -13.6213710434 -27.1727202124 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
31 0.00206072890391 -42.5192387437 -11.6754608943 -30.8437778493 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 0.3 1.0
31 0.0448709914399 -39.4385069851 -11.6754608943 -27.7630460908 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
31 0.0262777473323 -39.9735760287 -9.72955074528 -30.2440252834 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.3 1.0
31 0.00546567053785 -41.5438116898 -13.6213710434 -27.9224406465 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
31 0.0104619901086 -40.8945498012 -13.6213710434 -27.2731787578 6 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.375 1.0
31 0.000419084050953 -44.111982281 -13.6213710434 -30.4906112376 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else recurse_() )))), sep='')" 0.3 1.0
31 0.000660810566481 -43.6565865672 -15.5672811924 -28.0893053747 7 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.5 1.0
31 0.0088187675258 -41.0654163768 -13.6213710434 -27.4440453334 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )), sep='')" 0.6 1.0
31 9.84853589907e-27 -96.2170179281 -7.09049341566 -89.1265245125 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
31 9.84853589907e-27 -96.2170179281 -7.09049341566 -89.1265245125 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.333333333333
31 0.033979222359 -39.71654927 -9.72955074528 -29.9869985247 12 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
31 0.00843005677125 -41.1104949943 -11.6754608943 -29.4350341 9 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.3 1.0
31 4.82578259054e-25 -92.32519763 -3.19867311755 -89.1265245125 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.333333333333
37 0.00108511348893 -48.6483118539 -11.6754608943 -36.9728509595 10 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
37 0.00130275717075 -48.4655135144 -11.6754608943 -36.79005262 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.3 1.0
37 0.000868185500819 -48.87134631 -15.5672811924 -33.3040651176 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else car_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
37 0.0012486270999 -48.5079518058 -11.6754608943 -36.8324909115 11 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 0.3 1.0
37 0.00725765956459 -46.7479390306 -13.6213710434 -33.1265679873 5 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
37 0.00130556348039 -48.4633617002 -11.6754608943 -36.7879008058 11 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.25 1.0
37 0.00956943578943 -46.4714221859 -14.3145182239 -32.156903962 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_(recurse_()) ) )), sep='')" 0.375 1.0
37 0.0286941189085 -45.3733042478 -13.6213710434 -31.7519332044 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
37 0.000662159533851 -49.1422451979 -11.6754608943 -37.4667843035 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.333333333333 1.0
37 0.00116708107373 -48.5754906107 -15.5672811924 -33.0082094182 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', car_([])) ), sep='')" 0.428571428571 1.0
37 8.1931813859e-32 -113.40166186 -7.09049341566 -106.311168445 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.333333333333
37 0.000161039549692 -50.5561017274 -17.5131913415 -33.0429103859 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
37 0.220638735025 -43.3334697527 -7.78364059622 -35.5498291564 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
37 0.00547971206984 -47.0289438759 -14.3145182239 -32.714425652 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
37 0.00547292320809 -47.0301835525 -14.3145182239 -32.7156653285 7 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_(recurse_()) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.428571428571 1.0
37 0.000459006267382 -49.5086878481 -13.6213710434 -35.8873168047 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else cdr_([]) )))), sep='')" 0.272727272727 1.0
37 0.00119930260939 -48.5482562045 -15.5672811924 -32.980975012 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.6 1.0
37 0.0031114968611 -47.5948925173 -11.6754608943 -35.9194316229 9 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.3 1.0
37 0.00041216804901 -49.6163205603 -17.5131913415 -32.1031292188 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.5 1.0
37 0.00142252283297 -48.3775644953 -15.5672811924 -32.8102833029 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.428571428571 1.0
37 0.012070164115 -46.2392598015 -13.6213710434 -32.6178887581 5 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
37 0.0164300709543 -45.9308831829 -9.72955074528 -36.2013324376 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
37 0.0108794552328 -46.3431202638 -13.6213710434 -32.7217492204 5 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.5 1.0
37 0.00112410364612 -48.6130104744 -16.260428373 -32.3525821014 5 "lambda recurse_: flatten2str(( cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )) if flip_() else recurse_() ), sep='')" 0.5 1.0
37 0.00212033883519 -47.9784205297 -15.5672811924 -32.4111393372 7 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.5 1.0
37 0.0068481734658 -46.8060144641 -13.6213710434 -33.1846434207 4 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else car_([]) ) )), sep='')" 0.5 1.0
37 0.0643360105097 -44.56587692 -7.78364059622 -36.7822363238 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.3 1.0
37 0.000768911092822 -48.9927763637 -17.5131913415 -31.4795850222 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
37 0.00066396399547 -49.1395237881 -11.6754608943 -37.4640628938 10 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.25 1.0
37 0.00121105720194 -48.5385027347 -11.6754608943 -36.8630418404 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
37 2.32648010209e-120 -317.288095874 -1.2527629685 -316.035332906 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
37 0.0064604241117 -46.8643014659 -13.6213710434 -33.2429304225 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
37 8.1931813859e-32 -113.40166186 -7.09049341566 -106.311168445 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.333333333333
37 0.000739241485259 -49.0321270719 -15.5672811924 -33.4648458794 6 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
37 0.000215016256393 -50.2670380761 -17.5131913415 -32.7538467346 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
37 8.1931813859e-32 -113.40166186 -7.09049341566 -106.311168445 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.333333333333
37 0.000364494479704 -49.739240306 -17.5131913415 -32.2260489645 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
37 0.00921765953847 -46.5088752743 -13.6213710434 -32.8875042309 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )), sep='')" 0.428571428571 1.0
37 0.00991938301628 -46.4355057101 -13.6213710434 -32.8141346667 7 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )), sep='')" 0.6 1.0
37 0.00251447243318 -47.8079334201 -14.3145182239 -33.4934151961 6 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.5 1.0
37 0.000229527244529 -50.2017299775 -17.5131913415 -32.688538636 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )))), sep='')" 0.6 1.0
37 0.000988187792451 -48.7418789594 -11.6754608943 -37.0664180651 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.3 1.0
37 0.0151125051669 -46.0144738756 -13.6213710434 -32.3931028323 5 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
37 0.000481625657918 -49.4605845435 -15.5672811924 -33.893303351 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )))), sep='')" 0.428571428571 1.0
37 0.00871006069407 -46.5655176743 -13.6213710434 -32.9441466309 6 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( recurse_() if flip_() else [] )) ), sep='')" 0.428571428571 1.0
37 8.1931813859e-32 -113.40166186 -7.09049341566 -106.311168445 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.333333333333
37 8.1931813859e-32 -113.40166186 -7.09049341566 -106.311168445 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.333333333333
37 0.0458723870853 -44.904133086 -11.6754608943 -33.2286721917 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 0.6 1.0
37 0.000803631833933 -48.9486104662 -11.6754608943 -37.2731495718 12 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
37 0.0132072196336 -46.1492328115 -13.6213710434 -32.5278617681 6 "lambda recurse_: flatten2str(cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.5 1.0
37 0.00128024557471 -48.4829445187 -11.6754608943 -36.8074836244 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 0.272727272727 1.0
37 0.000131965322414 -50.7552125334 -17.5131913415 -33.2420211919 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
37 0.000881365847154 -48.8562789092 -11.6754608943 -37.1808180149 12 "lambda recurse_: flatten2str(cons_('a', cdr_(( [] if flip_() else cons_('a', recurse_()) ))), sep='')" 0.25 1.0
37 0.00587570274766 -46.959170764 -13.6213710434 -33.3377997206 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
37 0.00682907457912 -46.8088072626 -13.6213710434 -33.1874362192 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
37 0.0123453975244 -46.21671311 -13.6213710434 -32.5953420666 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
37 0.000359126289462 -49.7540776046 -15.5672811924 -34.1867964122 6 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
37 0.0015188647821 -48.3120332315 -14.3145182239 -33.9975150076 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.5 1.0
37 0.0023871692148 -47.8598881985 -15.5672811924 -32.292607006 6 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
37 0.00127810722323 -48.4846161818 -16.260428373 -32.2241878088 6 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
37 0.00011013630389 -50.9360329875 -13.6213710434 -37.3146619441 9 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( car_([]) if flip_() else recurse_() )))), sep='')" 0.272727272727 1.0
37 0.00447486208269 -47.2315209017 -9.72955074528 -37.5019701565 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.272727272727 1.0
37 0.00490412980901 -47.1399187652 -11.6754608943 -35.4644578708 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.272727272727 1.0
37 5.73522697013e-31 -111.455751711 -5.14458326661 -106.311168445 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.333333333333
37 8.1931813859e-32 -113.40166186 -7.09049341566 -106.311168445 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.333333333333
37 0.00262601677546 -47.7645282694 -15.5672811924 -32.197247077 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.6 1.0
37 0.00757719969771 -46.7048527351 -9.72955074528 -36.9753019898 10 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.25 1.0
37 0.0591289875287 -44.6502751466 -11.6754608943 -32.9748142523 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
37 0.000878662557837 -48.8593507817 -11.6754608943 -37.1838898874 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.333333333333 1.0
37 0.00164322175628 -48.2333376332 -13.6213710434 -34.6119665898 3 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', car_(cdr_(recurse_()))) )), sep='')" 1.0 1.0
37 0.00347890565745 -47.4832786554 -15.5672811924 -31.915997463 7 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.5 1.0
37 8.1931813859e-32 -113.40166186 -7.09049341566 -106.311168445 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.333333333333
37 0.000647529986314 -49.1645866091 -11.6754608943 -37.4891257147 11 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
37 5.73522697013e-31 -111.455751711 -5.14458326661 -106.311168445 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.333333333333
37 0.000573224448799 -49.2864743642 -15.5672811924 -33.7191931718 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', car_([])) ), sep='')" 0.5 1.0
37 0.00134780014334 -48.4315226936 -16.260428373 -32.1710943206 6 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
37 0.0007969594427 -48.9569479224 -15.5672811924 -33.38966673 7 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
37 0.0068975840455 -46.7988252215 -13.6213710434 -33.1774541781 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
37 0.000245624801338 -50.1339465386 -17.5131913415 -32.6207551971 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
37 0.000315127259711 -49.8847751561 -17.5131913415 -32.3715838146 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.428571428571 1.0
37 0.0140796563392 -46.0852654908 -13.6213710434 -32.4638944474 5 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
37 0.000294951762411 -49.9509398867 -11.6754608943 -38.2754789924 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.333333333333 1.0
37 0.000295129688044 -49.9503368322 -11.6754608943 -38.2748759379 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.3 1.0
37 0.0723609328045 -44.4483298819 -11.6754608943 -32.7728689875 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
37 8.1931813859e-32 -113.40166186 -7.09049341566 -106.311168445 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
37 0.00574350603113 -46.9819266028 -11.6754608943 -35.3064657085 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 0.3 1.0
37 0.00266834247678 -47.7485389491 -15.5672811924 -32.1812577566 7 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.6 1.0
37 8.1931813859e-32 -113.40166186 -7.09049341566 -106.311168445 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.333333333333
37 5.73522697013e-31 -111.455751711 -5.14458326661 -106.311168445 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.333333333333
37 0.00125564244059 -48.502349087 -16.260428373 -32.241920714 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_(recurse_()) )) if flip_() else cons_('a', []) ), sep='')" 0.428571428571 1.0
37 0.0228098710051 -45.6028030524 -13.6213710434 -31.981432009 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
37 0.000519793184753 -49.3843207016 -13.6213710434 -35.7629496582 9 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else car_([]) )))), sep='')" 0.3 1.0
37 2.04105290046e-13 -71.042381561 -7.78364059622 -63.2587409648 10 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.3 1.0
37 0.00134530918086 -48.4333725726 -11.6754608943 -36.7579116783 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.3 1.0
37 0.00678547033416 -46.8152128229 -14.3145182239 -32.500694599 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
37 9.58522936285e-13 -69.4956240579 -7.78364059622 -61.7119834616 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.333333333333 1.0
37 0.00353122817286 -47.4683506987 -9.72955074528 -37.7387999535 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.375 1.0
37 0.000336712213719 -49.8185231122 -17.5131913415 -32.3053317707 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )))), sep='')" 0.5 1.0
37 0.00284366890907 -47.6849013457 -15.5672811924 -32.1176201532 6 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
37 0.00369996901322 -47.4216719887 -11.6754608943 -35.7462110943 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.3 1.0
37 0.00803530341099 -46.6461516738 -13.6213710434 -33.0247806305 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
37 0.00211882655142 -47.9791340115 -11.6754608943 -36.3036731172 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 0.3 1.0
37 0.0959932597919 -44.165718455 -11.6754608943 -32.4902575607 7 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
37 0.0211013063737 -45.6806614815 -9.72955074528 -35.9511107362 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.3 1.0
37 0.0204692159851 -45.7110743352 -13.6213710434 -32.0897032918 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
37 0.00778717288101 -46.6775185559 -13.6213710434 -33.0561475125 7 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.375 1.0
37 0.00047376394505 -49.477042521 -13.6213710434 -35.8556714777 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else recurse_() )))), sep='')" 0.3 1.0
37 0.001681902758 -48.2100706869 -15.5672811924 -32.6427894945 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.5 1.0
37 0.0175394084748 -45.8655461715 -13.6213710434 -32.2441751281 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )), sep='')" 0.6 1.0
37 8.1931813859e-32 -113.40166186 -7.09049341566 -106.311168445 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
37 8.1931813859e-32 -113.40166186 -7.09049341566 -106.311168445 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.333333333333
37 0.0314640970802 -45.2811493129 -9.72955074528 -35.5515985676 12 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
37 0.0034268742262 -47.4983478921 -11.6754608943 -35.8228869978 12 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.3 1.0
37 4.01465887909e-30 -109.509841562 -3.19867311755 -106.311168445 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.333333333333
43 0.00275521527592 -52.8614182005 -11.6754608943 -41.1859573062 10 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
43 0.00162249949935 -53.3909459192 -11.6754608943 -41.7154850248 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.3 1.0
43 0.0033977625425 -52.6517966409 -15.5672811924 -37.0845154485 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else car_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
43 0.000409153629991 -54.7685783502 -11.6754608943 -43.0931174559 11 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 0.3 1.0
43 0.0042183463141 -52.4354705976 -13.6213710434 -38.8140995542 6 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
43 0.000158847011158 -55.7147275141 -11.6754608943 -44.0392666198 11 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.25 1.0
43 0.00591178847289 -52.0979653765 -14.3145182239 -37.7834471525 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_(recurse_()) ) )), sep='')" 0.375 1.0
43 0.0034791607723 -52.6281226729 -13.6213710434 -39.0067516295 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
43 0.0017030866844 -53.3424714788 -11.6754608943 -41.6670105845 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.333333333333 1.0
43 0.00118813757901 -53.7025267587 -15.5672811924 -38.1352455663 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', car_([])) ), sep='')" 0.428571428571 1.0
43 2.17120469366e-36 -129.084939677 -7.09049341566 -121.994446261 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.333333333333
43 0.000340310307139 -54.9528111897 -17.5131913415 -37.4396198482 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
43 0.0223400693828 -50.7685318808 -7.78364059622 -42.9848912846 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
43 0.00645692875455 -52.0097600004 -14.3145182239 -37.6952417765 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
43 0.0105789582519 -51.5160468225 -14.3145182239 -37.2015285986 8 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_(recurse_()) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.428571428571 1.0
43 0.00017006579618 -55.6464836606 -13.6213710434 -42.0251126173 9 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else cdr_([]) )))), sep='')" 0.272727272727 1.0
43 0.00299481891417 -52.7780300132 -15.5672811924 -37.2107488207 7 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.6 1.0
43 0.00208977846572 -53.1378557171 -11.6754608943 -41.4623948228 11 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.3 1.0
43 0.00029448384993 -55.0974448965 -17.5131913415 -37.584253555 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.5 1.0
43 0.00453620533961 -52.3628229459 -15.5672811924 -36.7955417535 7 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.428571428571 1.0
43 0.0121137331469 -51.3805740004 -13.6213710434 -37.759202957 5 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
43 0.0117383886902 -51.4120492248 -9.72955074528 -41.6824984795 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
43 0.014651400719 -51.1903778371 -13.6213710434 -37.5690067937 5 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.5 1.0
43 0.00153785709521 -53.4445238294 -16.260428373 -37.1840954564 5 "lambda recurse_: flatten2str(( cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )) if flip_() else recurse_() ), sep='')" 0.5 1.0
43 0.00157109693845 -53.4231397179 -15.5672811924 -37.8558585254 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.5 1.0
43 0.0156814956044 -51.1224323869 -13.6213710434 -37.5010613435 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else car_([]) ) )), sep='')" 0.5 1.0
43 0.0206371881447 -50.8478190821 -7.78364059622 -43.0641784859 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.3 1.0
43 8.94235232077e-05 -56.2892852885 -17.5131913415 -38.776093947 7 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
43 0.000298120832345 -55.0851701772 -11.6754608943 -43.4097092828 9 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.25 1.0
43 0.000283973047537 -55.1337897285 -11.6754608943 -43.4583288342 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
43 2.20781368373e-140 -368.537068778 -1.2527629685 -367.284305809 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
43 0.0171968720447 -51.0301862708 -13.6213710434 -37.4088152274 7 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
43 2.17120469366e-36 -129.084939677 -7.09049341566 -121.994446261 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.333333333333
43 0.00170271475838 -53.3426898861 -15.5672811924 -37.7754086937 6 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
43 0.000205574238224 -55.4568618339 -17.5131913415 -37.9436704924 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
43 2.17120469366e-36 -129.084939677 -7.09049341566 -121.994446261 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.333333333333
43 0.000483960465786 -54.600665838 -17.5131913415 -37.0874744965 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
43 0.0135563314334 -51.2680600775 -13.6213710434 -37.6466890341 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )), sep='')" 0.428571428571 1.0
43 0.0166477696655 -51.0626375267 -13.6213710434 -37.4412664834 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )), sep='')" 0.6 1.0
43 0.00225924489843 -53.0598831385 -14.3145182239 -38.7453649145 6 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.5 1.0
43 0.000146375156847 -55.7964961657 -17.5131913415 -38.2833048242 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )))), sep='')" 0.6 1.0
43 0.00246389422905 -52.973170662 -11.6754608943 -41.2977097676 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.3 1.0
43 0.00933543146932 -51.6410967837 -13.6213710434 -38.0197257403 6 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
43 0.001629500005 -53.3866405578 -15.5672811924 -37.8193593654 7 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )))), sep='')" 0.428571428571 1.0
43 0.028112385937 -50.5387035203 -13.6213710434 -36.9173324769 6 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( recurse_() if flip_() else [] )) ), sep='')" 0.428571428571 1.0
43 2.17120469366e-36 -129.084939677 -7.09049341566 -121.994446261 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.333333333333
43 2.17120469366e-36 -129.084939677 -7.09049341566 -121.994446261 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.333333333333
43 0.102559805033 -49.244467688 -11.6754608943 -37.5690067937 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 0.6 1.0
43 0.000995644934921 -53.8792783562 -11.6754608943 -42.2038174618 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
43 0.0134549344096 -51.2755678708 -13.6213710434 -37.6541968274 6 "lambda recurse_: flatten2str(cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.5 1.0
43 0.000178832876023 -55.596217343 -11.6754608943 -43.9207564486 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 0.272727272727 1.0
43 0.000409430269133 -54.7679024533 -17.5131913415 -37.2547111118 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
43 0.000965051559582 -53.9104875296 -11.6754608943 -42.2350266353 10 "lambda recurse_: flatten2str(cons_('a', cdr_(( [] if flip_() else cons_('a', recurse_()) ))), sep='')" 0.25 1.0
43 0.0140839188902 -51.2298801379 -13.6213710434 -37.6085090945 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
43 0.00110789534877 -53.7724516469 -13.6213710434 -40.1510806035 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
43 0.0271859885423 -50.5722120667 -13.6213710434 -36.9508410233 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
43 0.000463721662519 -54.6433845522 -15.5672811924 -39.0761033597 6 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
43 0.00844661096727 -51.7411484882 -14.3145182239 -37.4266302643 8 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.5 1.0
43 0.00129844603856 -53.6137455857 -15.5672811924 -38.0464643932 6 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
43 0.00127192391881 -53.6343831293 -16.260428373 -37.3739547563 5 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
43 8.35179099075e-05 -56.3576079604 -13.6213710434 -42.736236917 9 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( car_([]) if flip_() else recurse_() )))), sep='')" 0.272727272727 1.0
43 0.000357764425181 -54.9027943196 -9.72955074528 -45.1732435743 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.272727272727 1.0
43 0.00276577344956 -52.8575934557 -11.6754608943 -41.1821325614 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.272727272727 1.0
43 1.51984328556e-35 -127.139029528 -5.14458326661 -121.994446261 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.333333333333
43 2.17120469366e-36 -129.084939677 -7.09049341566 -121.994446261 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.333333333333
43 0.000265720123104 -55.2002254731 -15.5672811924 -39.6329442806 4 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.6 1.0
43 0.0264745581982 -50.5987295763 -9.72955074528 -40.8691788311 11 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.25 1.0
43 0.201757470926 -48.5678474431 -11.6754608943 -36.8923865488 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
43 0.00092031517558 -53.9579528656 -11.6754608943 -42.2824919713 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.333333333333 1.0
43 0.00219038433994 -53.0908367541 -13.6213710434 -39.4694657107 3 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', car_(cdr_(recurse_()))) )), sep='')" 1.0 1.0
43 0.00215335175564 -53.1078881958 -15.5672811924 -37.5406070034 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.5 1.0
43 2.17120469366e-36 -129.084939677 -7.09049341566 -121.994446261 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.333333333333
43 0.000279599636647 -55.1493103484 -11.6754608943 -43.473849454 11 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
43 1.51984328556e-35 -127.139029528 -5.14458326661 -121.994446261 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.333333333333
43 0.00150473369819 -53.4662978424 -15.5672811924 -37.8990166499 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', car_([])) ), sep='')" 0.5 1.0
43 0.000433052150723 -54.7118108979 -16.260428373 -38.4513825249 7 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
43 0.00133367841564 -53.5869729295 -15.5672811924 -38.019691737 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
43 0.00972589954597 -51.6001213967 -13.6213710434 -37.9787503533 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
43 9.38066415194e-05 -56.2414334005 -17.5131913415 -38.728242059 4 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
43 0.000136488069439 -55.8664318517 -17.5131913415 -38.3532405102 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.428571428571 1.0
43 0.0129367322596 -51.3148430532 -13.6213710434 -37.6934720098 6 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
43 0.00155303678916 -53.4347015472 -11.6754608943 -41.7592406529 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.333333333333 1.0
43 0.000777571867549 -54.1264929852 -11.6754608943 -42.4510320909 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.3 1.0
43 0.160401711556 -48.7972324143 -11.6754608943 -37.1217715199 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
43 2.17120469366e-36 -129.084939677 -7.09049341566 -121.994446261 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
43 0.00106083149137 -53.8158607537 -11.6754608943 -42.1403998594 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 0.3 1.0
43 0.00104963323973 -53.8264729725 -15.5672811924 -38.2591917801 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.6 1.0
43 2.17120469366e-36 -129.084939677 -7.09049341566 -121.994446261 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.333333333333
43 1.51984328556e-35 -127.139029528 -5.14458326661 -121.994446261 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.333333333333
43 0.000880407442982 -54.0022842555 -16.260428373 -37.7418558825 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_(recurse_()) )) if flip_() else cons_('a', []) ), sep='')" 0.428571428571 1.0
43 0.0113035497321 -51.4497969682 -13.6213710434 -37.8284259248 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
43 0.00015683054197 -55.7275031872 -13.6213710434 -42.1061321439 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else car_([]) )))), sep='')" 0.3 1.0
43 1.57804731566e-15 -81.0497466896 -7.78364059622 -73.2661060933 11 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.3 1.0
43 0.00129563253647 -53.6159147591 -11.6754608943 -41.9404538648 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.3 1.0
43 0.007746576178 -51.8276628179 -14.3145182239 -37.513144594 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
43 1.85748697213e-14 -78.5841253192 -7.78364059622 -70.800484723 8 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.333333333333 1.0
43 0.00247333933559 -52.9693445849 -9.72955074528 -43.2397938396 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.375 1.0
43 0.000313053002753 -55.0362965451 -17.5131913415 -37.5231052036 7 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )))), sep='')" 0.5 1.0
43 0.00184394878604 -53.2630044287 -15.5672811924 -37.6957232363 7 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
43 0.000477489344581 -54.6141272145 -11.6754608943 -42.9386663202 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.3 1.0
43 0.00715455788077 -51.9071641607 -13.6213710434 -38.2857931173 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
43 0.00185072983497 -53.2593337135 -11.6754608943 -41.5838728192 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 0.3 1.0
43 0.0668194496782 -49.6729195792 -11.6754608943 -37.9974586848 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
43 0.00352817071911 -52.6141342534 -9.72955074528 -42.8845835082 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.3 1.0
43 0.0286116274953 -50.5211005892 -13.6213710434 -36.8997295458 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
43 0.0106660325216 -51.5078496189 -13.6213710434 -37.8864785755 6 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.375 1.0
43 4.59822304452e-05 -56.954414032 -13.6213710434 -43.3330429886 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else recurse_() )))), sep='')" 0.3 1.0
43 0.00256337425181 -52.9335893225 -15.5672811924 -37.36630813 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.5 1.0
43 0.00330462849488 -52.6795897202 -13.6213710434 -39.0582186768 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )), sep='')" 0.6 1.0
43 2.17120469366e-36 -129.084939677 -7.09049341566 -121.994446261 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
43 2.17120469366e-36 -129.084939677 -7.09049341566 -121.994446261 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.333333333333
43 0.00113180235267 -53.7511024158 -9.72955074528 -44.0215516705 11 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
43 0.000166632637522 -55.6668774451 -11.6754608943 -43.9914165508 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.3 1.0
43 1.06389029989e-34 -125.193119379 -3.19867311755 -121.994446261 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.333333333333
49 3.54414429823e-05 -63.1970908825 -11.6754608943 -51.5216299882 11 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
49 0.000260203733916 -61.2035078075 -11.6754608943 -49.5280469132 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.3 1.0
49 0.00260561688656 -58.8995479888 -15.5672811924 -43.3322667964 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else car_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
49 0.00104250561265 -59.8155903861 -11.6754608943 -48.1401294918 11 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 0.3 1.0
49 0.0210192431055 -56.8117790882 -13.6213710434 -43.1904080448 5 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
49 0.000470409589816 -60.6113689407 -11.6754608943 -48.9359080464 12 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.25 1.0
49 0.0135919137519 -57.2477424058 -14.3145182239 -42.9332241819 8 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_(recurse_()) ) )), sep='')" 0.375 1.0
49 0.0339296983947 -56.3329267549 -13.6213710434 -42.7115557116 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
49 0.000129241655564 -61.9032887728 -11.6754608943 -50.2278278784 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.333333333333 1.0
49 0.0025769398824 -58.9106148418 -15.5672811924 -43.3433336493 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', car_([])) ), sep='')" 0.428571428571 1.0
49 1.39888388604e-42 -149.322361377 -7.09049341566 -142.231867961 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.333333333333
49 0.000545989383538 -60.4623731922 -17.5131913415 -42.9491818507 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
49 0.0340044331632 -56.3307265414 -7.78364059622 -48.5470859452 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
49 0.0145134484918 -57.1821417429 -14.3145182239 -42.8676235189 8 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
49 0.00892959393315 -57.667846523 -14.3145182239 -43.3533282991 8 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_(recurse_()) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.428571428571 1.0
49 3.42757567674e-05 -63.2305344192 -13.6213710434 -49.6091633758 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else cdr_([]) )))), sep='')" 0.272727272727 1.0
49 0.00304832866217 -58.7426239839 -15.5672811924 -43.1753427914 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.6 1.0
49 0.000578111886605 -60.4052052983 -11.6754608943 -48.7297444039 10 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.3 1.0
49 0.000608898861202 -60.3533205433 -17.5131913415 -42.8401292018 7 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.5 1.0
49 0.00613952489246 -58.0424700846 -15.5672811924 -42.4751888921 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.428571428571 1.0
49 0.0262219023012 -56.5906224174 -13.6213710434 -42.969251374 6 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
49 0.00760331292291 -57.8286333814 -9.72955074528 -48.0990826362 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
49 0.0379752308314 -56.2202833177 -13.6213710434 -42.5989122743 7 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.5 1.0
49 0.00175366528893 -59.2955093962 -16.260428373 -43.0350810232 7 "lambda recurse_: flatten2str(( cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )) if flip_() else recurse_() ), sep='')" 0.5 1.0
49 0.00303127098417 -58.7482354464 -15.5672811924 -43.1809542539 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.5 1.0
49 0.0217690183408 -56.7767296627 -13.6213710434 -43.1553586193 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else car_([]) ) )), sep='')" 0.5 1.0
49 0.0327136918802 -56.3694237425 -7.78364059622 -48.5857831462 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.3 1.0
49 0.000344999992919 -60.9214283271 -17.5131913415 -43.4082369856 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
49 0.000316307288624 -61.0082585502 -11.6754608943 -49.3327976559 11 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.25 1.0
49 0.00122107319243 -59.6574873067 -11.6754608943 -47.9820264123 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
49 4.84058394482e-160 -419.786041682 -1.2527629685 -418.533278713 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
49 0.036003310147 -56.2736065619 -13.6213710434 -42.6522355185 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
49 1.39888388604e-42 -149.322361377 -7.09049341566 -142.231867961 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.333333333333
49 0.000370080286561 -60.8512527508 -15.5672811924 -45.2839715584 6 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
49 0.000216558515772 -61.387111932 -17.5131913415 -43.8739205905 7 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
49 1.39888388604e-42 -149.322361377 -7.09049341566 -142.231867961 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.333333333333
49 0.000183012930396 -61.5554159154 -17.5131913415 -44.0422245739 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
49 0.0143057435728 -57.1965563396 -13.6213710434 -43.5751852962 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )), sep='')" 0.428571428571 1.0
49 0.018796405222 -56.9235518047 -13.6213710434 -43.3021807613 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )), sep='')" 0.6 1.0
49 0.00360355973812 -58.5752952716 -14.3145182239 -44.2607770477 7 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.5 1.0
49 0.000598890513944 -60.3698939236 -17.5131913415 -42.8567025821 7 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )))), sep='')" 0.6 1.0
49 0.00185002298613 -59.2420193807 -11.6754608943 -47.5665584864 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.3 1.0
49 0.0495706826241 -55.9538178618 -13.6213710434 -42.3324468184 5 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
49 0.00250256317642 -58.9399019674 -15.5672811924 -43.372620775 7 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )))), sep='')" 0.428571428571 1.0
49 0.0138256797343 -57.2306897314 -13.6213710434 -43.609318688 7 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( recurse_() if flip_() else [] )) ), sep='')" 0.428571428571 1.0
49 1.39888388604e-42 -149.322361377 -7.09049341566 -142.231867961 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.333333333333
49 1.39888388604e-42 -149.322361377 -7.09049341566 -142.231867961 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.333333333333
49 0.029638782014 -56.4681337377 -11.6754608943 -44.7926728434 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 0.6 1.0
49 0.003805685848 -58.5207212204 -11.6754608943 -46.8452603261 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
49 0.00973595106829 -57.5813921148 -13.6213710434 -43.9600210715 6 "lambda recurse_: flatten2str(cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.5 1.0
49 0.000370236132782 -60.8508317249 -11.6754608943 -49.1753708305 9 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 0.272727272727 1.0
49 0.000417887015966 -60.7297616244 -17.5131913415 -43.2165702829 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
49 0.000115338667245 -62.0170999905 -11.6754608943 -50.3416390962 10 "lambda recurse_: flatten2str(cons_('a', cdr_(( [] if flip_() else cons_('a', recurse_()) ))), sep='')" 0.25 1.0
49 0.0157527760741 -57.1002008362 -13.6213710434 -43.4788297929 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
49 0.0047991976058 -58.2887687062 -13.6213710434 -44.6673976628 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
49 0.0166794596146 -57.0430394455 -13.6213710434 -43.4216684021 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
49 0.000304438076939 -61.046505017 -15.5672811924 -45.4792238245 6 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
49 0.0167834147023 -57.036826266 -14.3145182239 -42.722308042 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.5 1.0
49 0.00490635846694 -58.2666854344 -15.5672811924 -42.699404242 6 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
49 0.00190563348521 -59.2124029532 -16.260428373 -42.9519745802 7 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
49 0.000276033860884 -61.1444491811 -13.6213710434 -47.5230781377 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( car_([]) if flip_() else recurse_() )))), sep='')" 0.272727272727 1.0
49 0.000733653828065 -60.1669354302 -9.72955074528 -50.4373846849 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.272727272727 1.0
49 0.000258673592035 -61.2094057192 -11.6754608943 -49.5339448248 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.272727272727 1.0
49 9.79218720229e-42 -147.376451228 -5.14458326661 -142.231867961 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.333333333333
49 1.39888388604e-42 -149.322361377 -7.09049341566 -142.231867961 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.333333333333
49 0.000651807200015 -60.2852239109 -15.5672811924 -44.7179427185 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.6 1.0
49 0.0013721852213 -59.5408129235 -9.72955074528 -49.8112621782 11 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.25 1.0
49 0.0679394434324 -55.638600674 -11.6754608943 -43.9631397797 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
49 0.000189880759807 -61.5185764285 -11.6754608943 -49.8431155341 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.333333333333 1.0
49 0.00656548198255 -57.9753915226 -13.6213710434 -44.3540204792 3 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', car_(cdr_(recurse_()))) )), sep='')" 1.0 1.0
49 0.00193606379338 -59.1965605052 -15.5672811924 -43.6292793128 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.5 1.0
49 1.39888388604e-42 -149.322361377 -7.09049341566 -142.231867961 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.333333333333
49 0.000151747530289 -61.7427545687 -11.6754608943 -50.0672936744 10 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
49 9.79218720229e-42 -147.376451228 -5.14458326661 -142.231867961 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.333333333333
49 0.00211763792711 -59.1069161625 -15.5672811924 -43.53963497 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', car_([])) ), sep='')" 0.5 1.0
49 0.00126600223794 -59.6213533532 -16.260428373 -43.3609249802 7 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
49 0.00156932548548 -59.4065715447 -15.5672811924 -43.8392903523 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
49 0.0156117123902 -57.1091960179 -13.6213710434 -43.4878249745 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
49 0.000544668415162 -60.4647955267 -17.5131913415 -42.9516041852 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
49 0.000254644511368 -61.2251042242 -17.5131913415 -43.7119128827 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.428571428571 1.0
49 0.0282037274611 -56.517763296 -13.6213710434 -42.8963922526 6 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
49 0.000492630720128 -60.5652128767 -11.6754608943 -48.8897519823 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.333333333333 1.0
49 0.000719339484688 -60.1866393151 -11.6754608943 -48.5111784207 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.3 1.0
49 0.124271010934 -55.0347526919 -11.6754608943 -43.3592917976 8 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
49 1.39888388604e-42 -149.322361377 -7.09049341566 -142.231867961 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
49 0.00107231516537 -59.7873974277 -11.6754608943 -48.1119365333 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 0.3 1.0
49 0.00218124242903 -59.0773228086 -15.5672811924 -43.5100416162 7 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.6 1.0
49 1.39888388604e-42 -149.322361377 -7.09049341566 -142.231867961 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.333333333333
49 9.79218720229e-42 -147.376451228 -5.14458326661 -142.231867961 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.333333333333
49 0.000707709182196 -60.2029394739 -16.260428373 -43.9425111009 7 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_(recurse_()) )) if flip_() else cons_('a', []) ), sep='')" 0.428571428571 1.0
49 0.00875845828817 -57.6871975497 -13.6213710434 -44.0658265063 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
49 6.82955488393e-05 -62.5411281299 -13.6213710434 -48.9197570865 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else car_([]) )))), sep='')" 0.3 1.0
49 9.77378729687e-16 -87.5111196171 -7.78364059622 -79.7274790209 11 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.3 1.0
49 0.000667932861855 -60.2607850614 -11.6754608943 -48.585324167 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.3 1.0
49 0.0169081219311 -57.0294233505 -14.3145182239 -42.7149051266 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
49 2.92826772792e-20 -97.9267529965 -7.78364059622 -90.1431124003 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.333333333333 1.0
49 0.00173261064624 -59.3075881295 -9.72955074528 -49.5780373843 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.375 1.0
49 0.000118253147795 -61.9921450768 -17.5131913415 -44.4789537353 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )))), sep='')" 0.5 1.0
49 0.000636065245212 -60.3096715788 -15.5672811924 -44.7423903863 6 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
49 0.000312369118799 -61.020787162 -11.6754608943 -49.3453262677 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.3 1.0
49 0.0200361307075 -56.8596802656 -13.6213710434 -43.2383092222 8 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
49 0.00198042995727 -59.1739034734 -11.6754608943 -47.4984425791 12 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 0.3 1.0
49 0.132634990451 -54.969616522 -11.6754608943 -43.2941556277 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
49 0.0102527568011 -57.529670819 -9.72955074528 -47.8001200738 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.3 1.0
49 0.0050680780394 -58.2342557839 -13.6213710434 -44.6128847405 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
49 0.00357307017814 -58.5837922246 -13.6213710434 -44.9624211812 5 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.375 1.0
49 2.20762110408e-05 -63.6704721184 -13.6213710434 -50.049101075 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else recurse_() )))), sep='')" 0.3 1.0
49 0.00231612793021 -59.0173206489 -15.5672811924 -43.4500394565 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.5 1.0
49 0.0106169016906 -57.4947702143 -13.6213710434 -43.8733991709 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )), sep='')" 0.6 1.0
49 1.39888388604e-42 -149.322361377 -7.09049341566 -142.231867961 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
49 1.39888388604e-42 -149.322361377 -7.09049341566 -142.231867961 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.333333333333
49 0.000360682869236 -60.87697363 -9.72955074528 -51.1474228847 11 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
49 0.000793750502245 -60.0882035407 -11.6754608943 -48.4127426464 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.3 1.0
49 6.8545310416e-41 -145.430541079 -3.19867311755 -142.231867961 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.333333333333
55 0.000135518597593 -66.2482683807 -11.6754608943 -54.5728074863 10 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
55 0.000263760763146 -65.5823347711 -11.6754608943 -53.9068738768 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.3 1.0
55 0.000829450470149 -64.4366138658 -15.5672811924 -48.8693326734 7 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else car_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
55 5.56199240742e-05 -67.1388357795 -11.6754608943 -55.4633748851 11 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 0.3 1.0
55 0.00850450137408 -62.1090263875 -13.6213710434 -48.4876553441 7 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
55 0.000344410555524 -65.3155428421 -11.6754608943 -53.6400819477 9 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.25 1.0
55 0.00655833651693 -62.3688849931 -14.3145182239 -48.0543667692 8 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_(recurse_()) ) )), sep='')" 0.375 1.0
55 0.0396697320323 -60.5690335046 -13.6213710434 -46.9476624612 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
55 0.000888022879274 -64.3683797556 -11.6754608943 -52.6929188612 13 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.333333333333 1.0
55 0.00226159094816 -63.4335534592 -15.5672811924 -47.8662722668 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', car_([])) ), sep='')" 0.428571428571 1.0
55 9.25738000462e-46 -161.035359911 -7.09049341566 -153.944866496 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.333333333333
55 0.00112036695909 -64.1359657105 -17.5131913415 -46.622774369 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
55 0.0167845629956 -61.4291623895 -7.78364059622 -53.6455217933 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
55 0.0176728589475 -61.3775919143 -14.3145182239 -47.0630736903 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
55 0.00843453206453 -62.1172877452 -14.3145182239 -47.8027695212 6 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_(recurse_()) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.428571428571 1.0
55 6.08246562554e-05 -67.0493820259 -13.6213710434 -53.4280109825 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else cdr_([]) )))), sep='')" 0.272727272727 1.0
55 0.00517300837316 -62.6061675746 -15.5672811924 -47.0388863821 7 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.6 1.0
55 0.00029986109838 -65.4540579011 -11.6754608943 -53.7785970068 10 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.3 1.0
55 0.000301977716886 -65.4470240337 -17.5131913415 -47.9338326922 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.5 1.0
55 0.00242735223446 -63.3628209364 -15.5672811924 -47.7955397439 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.428571428571 1.0
55 0.0130346598306 -61.6820100338 -13.6213710434 -48.0606389904 6 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
55 0.000379038459731 -65.2197395864 -9.72955074528 -55.4901888411 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
55 0.021158585775 -61.1975762143 -13.6213710434 -47.5762051709 6 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.5 1.0
55 0.00137461681802 -63.9314469697 -16.260428373 -47.6710185967 5 "lambda recurse_: flatten2str(( cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )) if flip_() else recurse_() ), sep='')" 0.5 1.0
55 0.00187010777941 -63.6236259189 -15.5672811924 -48.0563447265 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.5 1.0
55 0.00956333849428 -61.9916851032 -13.6213710434 -48.3703140598 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else car_([]) ) )), sep='')" 0.5 1.0
55 0.0269810601 -60.9544868421 -7.78364059622 -53.1708462459 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.3 1.0
55 6.92459144234e-05 -66.9197131173 -17.5131913415 -49.4065217758 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
55 0.000235288859654 -65.6965633139 -11.6754608943 -54.0211024195 11 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.25 1.0
55 0.0008112285782 -64.4588274014 -11.6754608943 -52.7833665071 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
55 2.16445556563e-180 -471.035014585 -1.2527629685 -469.782251617 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
55 0.00829099606283 -62.1344518699 -13.6213710434 -48.5130808265 7 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
55 9.25738000462e-46 -161.035359911 -7.09049341566 -153.944866496 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.333333333333
55 0.00411585444256 -62.8347755307 -15.5672811924 -47.2674943382 6 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
55 0.000231151211958 -65.7143051696 -17.5131913415 -48.2011138281 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
55 9.25738000462e-46 -161.035359911 -7.09049341566 -153.944866496 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.333333333333
55 0.000370517500057 -65.2424765859 -17.5131913415 -47.7292852444 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
55 0.00280843867859 -63.2169932857 -13.6213710434 -49.5956222423 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )), sep='')" 0.428571428571 1.0
55 0.00738153869352 -62.2506398723 -13.6213710434 -48.6292688289 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )), sep='')" 0.6 1.0
55 0.00547244127559 -62.5498971647 -14.3145182239 -48.2353789407 6 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.5 1.0
55 0.000145106468443 -66.1799095251 -17.5131913415 -48.6667181836 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )))), sep='')" 0.6 1.0
55 0.000152593135208 -66.1296021309 -11.6754608943 -54.4541412365 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.3 1.0
55 0.0164222075165 -61.4509874485 -13.6213710434 -47.8296164051 7 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
55 0.00450573618985 -62.7442706903 -15.5672811924 -47.1769894979 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )))), sep='')" 0.428571428571 1.0
55 0.0220246186755 -61.1574611258 -13.6213710434 -47.5360900824 6 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( recurse_() if flip_() else [] )) ), sep='')" 0.428571428571 1.0
55 9.25738000462e-46 -161.035359911 -7.09049341566 -153.944866496 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.333333333333
55 9.25738000462e-46 -161.035359911 -7.09049341566 -153.944866496 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.333333333333
55 0.0734573636047 -59.9529168333 -11.6754608943 -48.277455939 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 0.6 1.0
55 6.958613394e-05 -66.9148119407 -11.6754608943 -55.2393510464 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
55 0.00157035371261 -63.7983210956 -13.6213710434 -50.1769500522 6 "lambda recurse_: flatten2str(cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.5 1.0
55 0.000266317050685 -65.5726897443 -11.6754608943 -53.89722885 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 0.272727272727 1.0
55 0.0003052929353 -65.4361055039 -17.5131913415 -47.9229141624 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
55 0.00016761833981 -66.035687655 -11.6754608943 -54.3602267607 9 "lambda recurse_: flatten2str(cons_('a', cdr_(( [] if flip_() else cons_('a', recurse_()) ))), sep='')" 0.25 1.0
55 0.0344281233586 -60.7107482143 -13.6213710434 -47.0893771709 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
55 0.0122082442478 -61.7475105027 -13.6213710434 -48.1261394593 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
55 0.0306625697375 -60.8265793003 -13.6213710434 -47.2052082569 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
55 0.000266522957748 -65.5719168779 -15.5672811924 -50.0046356854 7 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
55 0.00599896707038 -62.4580346847 -14.3145182239 -48.1435164608 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.5 1.0
55 0.00215615639264 -63.4812947954 -15.5672811924 -47.914013603 6 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
55 0.00158167466923 -63.7911377812 -16.260428373 -47.5307094082 7 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
55 0.00023448754127 -65.6999748056 -13.6213710434 -52.0786037622 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( car_([]) if flip_() else recurse_() )))), sep='')" 0.272727272727 1.0
55 0.00149014303277 -63.8507498737 -9.72955074528 -54.1211991284 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.272727272727 1.0
55 0.000577970500466 -64.7978544331 -11.6754608943 -53.1223935387 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.272727272727 1.0
55 6.48016600323e-45 -159.089449762 -5.14458326661 -153.944866496 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.333333333333
55 9.25738000462e-46 -161.035359911 -7.09049341566 -153.944866496 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.333333333333
55 0.00416315910236 -62.8233477985 -15.5672811924 -47.2560666061 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.6 1.0
55 0.000553263654332 -64.8415426043 -9.72955074528 -55.1119918591 10 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.25 1.0
55 0.123891106442 -59.4302189783 -11.6754608943 -47.7547580839 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
55 8.37602678277e-05 -66.7294184991 -11.6754608943 -55.0539576047 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.333333333333 1.0
55 0.00102529911755 -64.2246375922 -13.6213710434 -50.6032665488 3 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', car_(cdr_(recurse_()))) )), sep='')" 1.0 1.0
55 0.00661451239458 -62.3603559014 -15.5672811924 -46.793074709 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.5 1.0
55 9.25738000462e-46 -161.035359911 -7.09049341566 -153.944866496 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.333333333333
55 9.83746037712e-05 -66.5685945842 -11.6754608943 -54.8931336899 12 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
55 6.48016600323e-45 -159.089449762 -5.14458326661 -153.944866496 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.333333333333
55 0.00551238541664 -62.5426245297 -15.5672811924 -46.9753433373 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', car_([])) ), sep='')" 0.5 1.0
55 0.00262627483523 -63.2840555545 -16.260428373 -47.0236271815 5 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
55 0.00343676489187 -63.0150913937 -15.5672811924 -47.4478102013 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
55 0.0136891403811 -61.6330191386 -13.6213710434 -48.0116480952 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
55 0.000122885635735 -66.3461231311 -17.5131913415 -48.8329317896 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
55 0.00040102887297 -65.163343836 -17.5131913415 -47.6501524945 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.428571428571 1.0
55 0.0200278663725 -61.2524973618 -13.6213710434 -47.6311263184 6 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
55 0.000197674951112 -65.8707532425 -11.6754608943 -54.1952923482 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.333333333333 1.0
55 0.00052559595441 -64.8928444931 -11.6754608943 -53.2173835988 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.3 1.0
55 0.150316919068 -59.2368761251 -11.6754608943 -47.5614152308 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
55 9.25738000462e-46 -161.035359911 -7.09049341566 -153.944866496 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
55 6.62933186574e-05 -66.9632881455 -11.6754608943 -55.2878272511 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 0.3 1.0
55 0.00802644532217 -62.1668802289 -15.5672811924 -46.5995990365 7 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.6 1.0
55 9.25738000462e-46 -161.035359911 -7.09049341566 -153.944866496 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.333333333333
55 6.48016600323e-45 -159.089449762 -5.14458326661 -153.944866496 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.333333333333
55 0.0012084562538 -64.0602782624 -16.260428373 -47.7998498894 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_(recurse_()) )) if flip_() else cons_('a', []) ), sep='')" 0.428571428571 1.0
55 0.0111150138804 -61.841325188 -13.6213710434 -48.2199541446 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
55 4.66898816638e-06 -69.6164348817 -13.6213710434 -55.9950638383 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else car_([]) )))), sep='')" 0.3 1.0
55 8.54073395986e-20 -101.248721617 -7.78364059622 -93.465081021 11 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.3 1.0
55 0.000176732336307 -65.9827408994 -11.6754608943 -54.3072800051 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.3 1.0
55 0.0234367333634 -61.0953173908 -14.3145182239 -46.7807991669 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
55 1.29595431407e-17 -96.2265659403 -7.78364059622 -88.4429253441 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.333333333333 1.0
55 0.00238372054447 -63.3809594631 -9.72955074528 -53.6514087179 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.375 1.0
55 0.000404936650744 -65.1536466262 -17.5131913415 -47.6404552847 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )))), sep='')" 0.5 1.0
55 0.00122662173478 -64.0453581506 -15.5672811924 -48.4780769582 5 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
55 0.000488891311617 -64.965237065 -11.6754608943 -53.2897761707 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.3 1.0
55 0.0172675690539 -61.4007918632 -13.6213710434 -47.7794208198 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
55 4.60914008804e-05 -67.3267508625 -11.6754608943 -55.6512899681 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 0.3 1.0
55 0.121897835207 -59.4464387066 -11.6754608943 -47.7709778123 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
55 0.000348317113712 -65.304263952 -9.72955074528 -55.5747132068 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.3 1.0
55 0.0253983462532 -61.0149379204 -13.6213710434 -47.393566877 8 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
55 0.0129792214358 -61.6862722566 -13.6213710434 -48.0649012132 6 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.375 1.0
55 4.12091012898e-05 -67.4387181261 -13.6213710434 -53.8173470827 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else recurse_() )))), sep='')" 0.3 1.0
55 0.00497190568417 -62.6458187801 -15.5672811924 -47.0785375877 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.5 1.0
55 0.00885667123377 -62.0684509974 -13.6213710434 -48.447079954 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )), sep='')" 0.6 1.0
55 9.25738000462e-46 -161.035359911 -7.09049341566 -153.944866496 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
55 9.25738000462e-46 -161.035359911 -7.09049341566 -153.944866496 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.333333333333
55 0.00158430644892 -63.7894752443 -9.72955074528 -54.059924499 10 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
55 0.000157950547764 -66.095095268 -11.6754608943 -54.4196343736 12 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.3 1.0
55 4.53611620226e-44 -157.143539613 -3.19867311755 -153.944866496 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.333333333333
61 7.12348635584e-05 -72.193633116 -11.6754608943 -60.5181722217 10 "lambda recurse_: flatten2str(cons_('a', ( car_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
61 0.000126564930958 -71.6188600066 -11.6754608943 -59.9433991123 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cons_('a', [])) )), sep='')" 0.3 1.0
61 0.000694108240407 -69.916987557 -15.5672811924 -54.3497063645 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else car_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
61 5.96954304572e-05 -72.3703599956 -11.6754608943 -60.6948991013 9 "lambda recurse_: flatten2str(cons_('a', ( car_(car_([])) if flip_() else recurse_() )), sep='')" 0.3 1.0
61 0.03748146192 -65.9280137304 -13.6213710434 -52.306642687 5 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
61 0.000167418561976 -71.3391184355 -11.6754608943 -59.6636575411 9 "lambda recurse_: flatten2str(( cons_('a', cdr_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.25 1.0
61 0.0108417195938 -67.1684585748 -14.3145182239 -52.8539403509 8 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_(recurse_()) ) )), sep='')" 0.375 1.0
61 0.00869739899956 -67.388836177 -13.6213710434 -53.7674651336 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
61 0.00065967535566 -69.9678676427 -11.6754608943 -58.2924067484 12 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep='')" 0.333333333333 1.0
61 0.00365834433783 -68.254849514 -15.5672811924 -52.6875683216 7 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', car_([])) ), sep='')" 0.428571428571 1.0
61 2.19965974339e-51 -179.28764197 -7.09049341566 -172.197148554 1 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else [] )), sep='')" 1.0 0.333333333333
61 0.00052179133988 -70.2023476954 -17.5131913415 -52.6891563539 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
61 0.0126469672104 -67.0144427521 -7.78364059622 -59.2308021559 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
61 0.0082517568152 -67.4414340674 -14.3145182239 -53.1269158434 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cdr_(recurse_()) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
61 0.0103405406658 -67.2157880359 -14.3145182239 -52.9012698119 7 "lambda recurse_: flatten2str(cons_('a', ( ( cdr_(recurse_()) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.428571428571 1.0
61 1.65088579389e-05 -73.6557183897 -13.6213710434 -60.0343473463 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else cdr_([]) )))), sep='')" 0.272727272727 1.0
61 0.000940371857906 -69.6133400808 -15.5672811924 -54.0460588883 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.6 1.0
61 0.000221312943671 -71.0600377367 -11.6754608943 -59.3845768424 11 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep='')" 0.3 1.0
61 0.00013152981879 -71.5803818866 -17.5131913415 -54.0671905451 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.5 1.0
61 0.00598197734397 -67.7631090195 -15.5672811924 -52.1958278271 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )))), sep='')" 0.428571428571 1.0
61 0.0239190959753 -66.3771830577 -13.6213710434 -52.7558120143 4 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
61 9.20394937578e-05 -71.9373977064 -9.72955074528 -62.2078469611 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
61 0.0141108407418 -66.9049168434 -13.6213710434 -53.2835458001 6 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.5 1.0
61 0.00141503558264 -69.2047055148 -16.260428373 -52.9442771418 5 "lambda recurse_: flatten2str(( cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )) if flip_() else recurse_() ), sep='')" 0.5 1.0
61 0.00109715624818 -69.4591385889 -15.5672811924 -53.8918573965 4 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.5 1.0
61 0.00906651390592 -67.3472723565 -13.6213710434 -53.7259013131 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else car_([]) ) )), sep='')" 0.5 1.0
61 0.00647608439761 -67.6837441242 -7.78364059622 -59.900103528 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep='')" 0.3 1.0
61 0.000308461107961 -70.7280197041 -17.5131913415 -53.2148283626 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( cdr_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
61 0.000122770984988 -71.6492947621 -11.6754608943 -59.9738338678 11 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.25 1.0
61 5.63402601124e-05 -72.4282060921 -11.6754608943 -60.7527451977 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cdr_([])) if flip_() else recurse_() )), sep='')" 0.333333333333 1.0
61 2.40400482415e-200 -522.283987489 -1.2527629685 -521.03122452 1 "lambda recurse_: flatten2str([], sep='')" 0.0 0.0
61 0.0173384809964 -66.698931826 -13.6213710434 -53.0775607826 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
61 2.19965974339e-51 -179.28764197 -7.09049341566 -172.197148554 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep='')" 1.0 0.333333333333
61 0.00411934440422 -68.1361661668 -15.5672811924 -52.5688849744 5 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
61 0.000215920801326 -71.0847037914 -17.5131913415 -53.5715124499 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )))), sep='')" 0.6 1.0
61 2.19965974339e-51 -179.28764197 -7.09049341566 -172.197148554 1 "lambda recurse_: flatten2str(cons_('a', car_(cdr_([]))), sep='')" 1.0 0.333333333333
61 0.000472611909789 -70.3013409063 -17.5131913415 -52.7881495648 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )))), sep='')" 0.5 1.0
61 0.00744079975948 -67.5448818547 -13.6213710434 -53.9235108113 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else car_([]) )), sep='')" 0.428571428571 1.0
61 0.0551114876626 -65.5425020104 -13.6213710434 -51.921130967 7 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else car_([]) )), sep='')" 0.6 1.0
61 0.0028678108399 -68.4983112272 -14.3145182239 -54.1837930032 5 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.5 1.0
61 0.000215956539839 -71.0845382883 -17.5131913415 -53.5713469468 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )))), sep='')" 0.6 1.0
61 0.00181258907378 -68.9571039417 -11.6754608943 -57.2816430473 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep='')" 0.3 1.0
61 0.00347722100447 -68.3056267795 -13.6213710434 -54.6842557361 5 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
61 0.00570152976852 -67.8111256731 -15.5672811924 -52.2438444806 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )))), sep='')" 0.428571428571 1.0
61 0.0251271617835 -66.3279107885 -13.6213710434 -52.7065397451 5 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( recurse_() if flip_() else [] )) ), sep='')" 0.428571428571 1.0
61 2.19965974339e-51 -179.28764197 -7.09049341566 -172.197148554 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep='')" 1.0 0.333333333333
61 2.19965974339e-51 -179.28764197 -7.09049341566 -172.197148554 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep='')" 1.0 0.333333333333
61 0.188313683284 -64.3137510919 -11.6754608943 -52.6382901975 4 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep='')" 0.6 1.0
61 0.000111935481013 -71.7416928284 -11.6754608943 -60.0662319341 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep='')" 0.272727272727 1.0
61 0.00870286576745 -67.3882078224 -13.6213710434 -53.766836779 5 "lambda recurse_: flatten2str(cons_('a', ( ( car_([]) if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.5 1.0
61 6.17180189538e-05 -72.3370395417 -11.6754608943 -60.6615786473 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cdr_(cons_('a', recurse_())) )), sep='')" 0.272727272727 1.0
61 0.000568753002917 -70.1161692212 -17.5131913415 -52.6029778797 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
61 3.91341552015e-05 -72.7926198511 -11.6754608943 -61.1171589568 11 "lambda recurse_: flatten2str(cons_('a', cdr_(( [] if flip_() else cons_('a', recurse_()) ))), sep='')" 0.25 1.0
61 0.0243632099622 -66.3587859863 -13.6213710434 -52.737414943 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
61 0.000350974665854 -70.5989014275 -13.6213710434 -56.9775303841 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
61 0.00618491793229 -67.7297464554 -13.6213710434 -54.108375412 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
61 0.000174717338437 -71.2964460122 -15.5672811924 -55.7291648197 5 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
61 0.0175639549729 -66.6860114033 -14.3145182239 -52.3714931793 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.5 1.0
61 0.00560422786293 -67.8283389039 -15.5672811924 -52.2610577115 7 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( cdr_([]) if flip_() else recurse_() ) )), sep='')" 0.5 1.0
61 0.00309247826739 -68.4228873946 -16.260428373 -52.1624590216 5 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
61 9.41853651138e-05 -71.9143506615 -13.6213710434 -58.2929796182 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( car_([]) if flip_() else recurse_() )))), sep='')" 0.272727272727 1.0
61 0.000648628144452 -69.9847558858 -9.72955074528 -60.2552051405 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep='')" 0.272727272727 1.0
61 0.000414724808246 -70.4320002837 -11.6754608943 -58.7565393894 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep='')" 0.272727272727 1.0
61 1.53976182037e-50 -177.341731821 -5.14458326661 -172.197148554 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep='')" 1.0 0.333333333333
61 2.19965974339e-51 -179.28764197 -7.09049341566 -172.197148554 1 "lambda recurse_: flatten2str(car_(cons_('a', cdr_([]))), sep='')" 1.0 0.333333333333
61 0.00368410276518 -68.2478331793 -15.5672811924 -52.6805519869 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.6 1.0
61 0.00278341785007 -68.5281805773 -9.72955074528 -58.798629832 10 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep='')" 0.25 1.0
61 0.170198358601 -64.4148956202 -11.6754608943 -52.7394347259 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep='')" 0.6 1.0
61 5.4795436612e-05 -72.4560085543 -11.6754608943 -60.78054766 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep='')" 0.333333333333 1.0
61 0.000300991662526 -70.7525329062 -13.6213710434 -57.1311618628 3 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', car_(cdr_(recurse_()))) )), sep='')" 1.0 1.0
61 0.00327417110807 -68.3657954521 -15.5672811924 -52.7985142596 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.5 1.0
61 2.19965974339e-51 -179.28764197 -7.09049341566 -172.197148554 1 "lambda recurse_: flatten2str(car_(cons_('a', car_([]))), sep='')" 1.0 0.333333333333
61 0.000234469109769 -71.0022916202 -11.6754608943 -59.3268307259 11 "lambda recurse_: flatten2str(( cons_('a', car_([])) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
61 1.53976182037e-50 -177.341731821 -5.14458326661 -172.197148554 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep='')" 1.0 0.333333333333
61 0.00241264614256 -68.6711360627 -15.5672811924 -53.1038548703 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', car_([])) ), sep='')" 0.5 1.0
61 0.00295171177594 -68.4694749273 -16.260428373 -52.2090465543 5 "lambda recurse_: flatten2str(( cons_('a', ( car_([]) if flip_() else recurse_() )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
61 0.00137273637789 -69.2350540884 -15.5672811924 -53.667772896 6 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_([]) )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
61 0.00344418525638 -68.3151728162 -13.6213710434 -54.6938017728 6 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
61 0.000442648167443 -70.3668402212 -17.5131913415 -52.8536488798 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else cdr_([]) ) if flip_() else [] )))), sep='')" 0.6 1.0
61 0.000511154192331 -70.2229441804 -17.5131913415 -52.7097528389 5 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else ( recurse_() if flip_() else [] ) )))), sep='')" 0.428571428571 1.0
61 0.00657908546587 -67.6679644436 -13.6213710434 -54.0465934002 7 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
61 0.000296389854752 -70.7679398067 -11.6754608943 -59.0924789124 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', car_([])) ), sep='')" 0.333333333333 1.0
61 0.000152859090996 -71.4300989482 -11.6754608943 -59.7546380538 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else ( [] if flip_() else [] ) )), sep='')" 0.3 1.0
61 0.0892291716573 -65.0606521697 -11.6754608943 -53.3851912754 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep='')" 0.5 1.0
61 2.19965974339e-51 -179.28764197 -7.09049341566 -172.197148554 1 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
61 0.000301425474466 -70.7510926682 -11.6754608943 -59.0756317739 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep='')" 0.3 1.0
61 0.00183199538752 -68.9464544438 -15.5672811924 -53.3791732514 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else cons_('a', cdr_([])) ), sep='')" 0.6 1.0
61 2.19965974339e-51 -179.28764197 -7.09049341566 -172.197148554 1 "lambda recurse_: flatten2str(cons_('a', car_(car_([]))), sep='')" 1.0 0.333333333333
61 1.53976182037e-50 -177.341731821 -5.14458326661 -172.197148554 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep='')" 1.0 0.333333333333
61 0.00200145165174 -68.8579874492 -16.260428373 -52.5975590762 7 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else cdr_(recurse_()) )) if flip_() else cons_('a', []) ), sep='')" 0.428571428571 1.0
61 0.0124274250603 -67.0319544635 -13.6213710434 -53.4105834201 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_([]) if flip_() else recurse_() ) )), sep='')" 0.6 1.0
61 8.52972896273e-06 -74.3160578849 -13.6213710434 -60.6946868415 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else car_([]) )))), sep='')" 0.3 1.0
61 2.0585758435e-23 -114.881547647 -7.78364059622 -107.09790705 10 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep='')" 0.3 1.0
61 0.00104157770331 -69.5111236063 -11.6754608943 -57.835662712 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep='')" 0.3 1.0
61 0.00345774935776 -68.3112422896 -14.3145182239 -53.9967240656 5 "lambda recurse_: flatten2str(( cons_('a', ( recurse_() if flip_() else [] )) if flip_() else car_(recurse_()) ), sep='')" 0.6 1.0
61 5.25369795274e-20 -107.036874573 -7.78364059622 -99.2532339764 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep='')" 0.333333333333 1.0
61 0.000540487573087 -70.167143826 -9.72955074528 -60.4375930808 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep='')" 0.375 1.0
61 0.000280633307204 -70.8225666108 -17.5131913415 -53.3093752693 6 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )))), sep='')" 0.5 1.0
61 0.000980163289516 -69.5718962916 -15.5672811924 -54.0046150991 6 "lambda recurse_: flatten2str(( cons_('a', ( cdr_([]) if flip_() else recurse_() )) if flip_() else cons_('a', []) ), sep='')" 0.6 1.0
61 3.85562927629e-05 -72.8074961482 -11.6754608943 -61.1320352539 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep='')" 0.3 1.0
61 0.0127775967265 -67.0041668106 -13.6213710434 -53.3827957673 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else cdr_([]) )), sep='')" 0.5 1.0
61 1.89208244925e-05 -73.5193523308 -11.6754608943 -61.8438914365 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep='')" 0.3 1.0
61 0.0158601712189 -66.7880491806 -11.6754608943 -55.1125882862 7 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep='')" 0.6 1.0
61 0.00277638365019 -68.5307109567 -9.72955074528 -58.8011602115 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep='')" 0.3 1.0
61 0.0209820494991 -66.5081929059 -13.6213710434 -52.8868218625 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else car_([]) ) if flip_() else [] )), sep='')" 0.5 1.0
61 0.0136351737299 -66.9392074347 -13.6213710434 -53.3178363913 5 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else recurse_() )) ), sep='')" 0.375 1.0
61 2.34605926455e-05 -73.3042933665 -13.6213710434 -59.6829223231 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( cdr_([]) if flip_() else recurse_() )))), sep='')" 0.3 1.0
61 0.00327417110807 -68.3657954521 -15.5672811924 -52.7985142596 5 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else recurse_() )) if flip_() else car_(cons_('a', [])) ), sep='')" 0.5 1.0
61 0.0801071604027 -65.168494949 -13.6213710434 -51.5471239056 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else cdr_([]) ) )), sep='')" 0.6 1.0
61 2.19965974339e-51 -179.28764197 -7.09049341566 -172.197148554 1 "lambda recurse_: flatten2str(car_(cons_('a', cons_('a', []))), sep='')" 1.0 0.333333333333
61 2.19965974339e-51 -179.28764197 -7.09049341566 -172.197148554 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', []))), sep='')" 1.0 0.333333333333
61 0.00130994403255 -69.2818757793 -9.72955074528 -59.552325034 10 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep='')" 0.272727272727 1.0
61 3.63375142742e-05 -72.8667648126 -11.6754608943 -61.1913039183 9 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep='')" 0.3 1.0
61 1.07783327426e-49 -175.395821672 -3.19867311755 -172.197148554 1 "lambda recurse_: flatten2str(cons_('a', []), sep='')" 1.0 0.333333333333
