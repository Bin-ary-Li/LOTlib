1 0.00420195518141 -10.4357803876 -9.72955074528 -0.706229642295 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(recurse_()) )), sep="")" 1.0 1.0
1 0.00125565820383 -11.6436704236 -10.9823137138 -0.66135670985 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_([])) if flip_() else [] )), sep="")" 1.0 1.0
1 9.656999181e-05 -14.2088175537 -13.6213710434 -0.587446510349 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( recurse_() if flip_() else [] ) if flip_() else [] ))), sep="")" 1.0 1.0
1 0.00888136087594 -9.68737552687 -9.03640356472 -0.650971962149 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', []) )), sep="")" 1.0 1.0
1 0.0121245071499 -9.37610153535 -7.09049341566 -2.28560811969 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep="")" 1.0 0.5
1 0.0120695405396 -9.38064535585 -7.78364059622 -1.59700475963 11 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.2 1.0
1 0.000193244981218 -13.5151268862 -12.9282238628 -0.586903023359 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else cons_('a', []) ) )), sep="")" 1.0 1.0
1 1.38806599187e-05 -16.1485891044 -15.5672811924 -0.581307911937 2 "lambda recurse_: flatten2str(( cons_('a', ( car_(recurse_()) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
1 9.69233005706e-05 -14.205165653 -13.6213710434 -0.583794609563 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else recurse_() ) if flip_() else [] ))), sep="")" 1.0 1.0
1 0.0137142582974 -9.25289428066 -7.78364059622 -1.46925368444 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.166666666667 1.0
1 9.6720202495e-05 -14.207263303 -13.6213710434 -0.585892259593 2 "lambda recurse_: flatten2str(cons_('a', ( car_(( recurse_() if flip_() else [] )) if flip_() else [] )), sep="")" 1.0 1.0
1 0.000194373726571 -13.5093028714 -12.9282238628 -0.581079008568 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', []) ) if flip_() else [] )), sep="")" 1.0 1.0
1 9.71956126316e-05 -14.20236003 -13.6213710434 -0.580988986606 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_(recurse_()) if flip_() else [] ) )), sep="")" 1.0 1.0
1 2.76711384853e-05 -15.4586956648 -14.8741340119 -0.584561652956 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
1 1.38671698878e-05 -16.149561435 -15.5672811924 -0.58228024254 2 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
1 0.0848715500496 -7.4301913863 -5.14458326661 -2.28560811969 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.5
1 2.77194231066e-05 -15.4569522403 -14.8741340119 -0.582818228368 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', car_([])) ) if flip_() else [] )), sep="")" 1.0 1.0
1 0.00418569184729 -10.4396583177 -9.72955074528 -0.710107572409 2 "lambda recurse_: flatten2str(cons_('a', ( car_(recurse_()) if flip_() else [] )), sep="")" 1.0 1.0
1 0.0248988588727 -8.65650834991 -7.78364059622 -0.872867753686 9 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.222222222222 1.0
1 1.38410398532e-05 -16.1514475216 -15.5672811924 -0.584166329191 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
1 0.00123146499714 -11.6631258087 -10.9823137138 -0.680812094922 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else car_([]) )), sep="")" 1.0 1.0
1 0.00121192340366 -11.6791216366 -10.9823137138 -0.696807922801 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_([])) )), sep="")" 1.0 1.0
1 0.000637980122247 -12.3207784764 -11.6754608943 -0.645317582068 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 0.4 1.0
1 2.77020214092e-05 -15.4575802173 -14.8741340119 -0.583446205431 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( cons_('a', []) if flip_() else [] ) ))), sep="")" 1.0 1.0
1 1.37957131157e-05 -16.1547277028 -15.5672811924 -0.587446510349 2 "lambda recurse_: flatten2str(( cons_('a', car_(( recurse_() if flip_() else [] ))) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
1 9.7176430477e-05 -14.2025574056 -13.6213710434 -0.581186362261 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( [] if flip_() else recurse_() )) )), sep="")" 1.0 1.0
1 0.0121245071499 -9.37610153535 -7.09049341566 -2.28560811969 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep="")" 1.0 0.5
1 0.00124383062764 -11.6531344903 -10.9823137138 -0.670820776517 2 "lambda recurse_: flatten2str(( cons_('a', cons_('a', [])) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
1 0.000618048995467 -12.3525178679 -11.6754608943 -0.677056973568 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 0.4 1.0
1 0.00864952330671 -9.71382611355 -9.03640356472 -0.677422548832 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else [] )), sep="")" 1.0 1.0
1 0.00063707603169 -12.3221965954 -11.6754608943 -0.646735701114 2 "lambda recurse_: flatten2str(( cons_('a', car_(recurse_())) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
1 0.00122722484302 -11.6665749288 -10.9823137138 -0.684261215067 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', car_([])) if flip_() else [] )), sep="")" 1.0 1.0
1 9.7176430477e-05 -14.2025574056 -13.6213710434 -0.581186362261 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else recurse_() ) ))), sep="")" 1.0 1.0
1 2.76711384853e-05 -15.4586956648 -14.8741340119 -0.584561652956 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else cons_('a', []) ) ))), sep="")" 1.0 1.0
1 2.77271887283e-05 -15.4566721286 -14.8741340119 -0.582538116688 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else cons_('a', []) ) if flip_() else [] ))), sep="")" 1.0 1.0
1 0.000194413276558 -13.5090994182 -12.9282238628 -0.580875555331 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else [] ) )), sep="")" 1.0 1.0
1 9.72022498815e-05 -14.2022917448 -13.6213710434 -0.580920701391 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else car_(recurse_()) ) )), sep="")" 1.0 1.0
1 1.38597115533e-05 -16.1500994208 -15.5672811924 -0.582818228368 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else car_(recurse_()) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
1 0.00120967932547 -11.6809750197 -10.9823137138 -0.698661305936 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', cons_('a', [])) ), sep="")" 1.0 1.0
1 0.00124583946704 -11.6515207505 -10.9823137138 -0.669207036735 2 "lambda recurse_: flatten2str(cons_('a', ( car_(cons_('a', [])) if flip_() else [] )), sep="")" 1.0 1.0
1 2.77701750376e-05 -15.4551229985 -14.8741340119 -0.580988986606 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
1 0.000194090321098 -13.5107619795 -12.9282238628 -0.582538116688 2 "lambda recurse_: flatten2str(cons_('a', ( ( cons_('a', []) if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 1.0
1 2.77700808721e-05 -15.4551263894 -14.8741340119 -0.580992377499 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
1 0.00120055862326 -11.6885433561 -10.9823137138 -0.706229642295 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(cons_('a', [])) )), sep="")" 1.0 1.0
1 0.0848715500496 -7.4301913863 -5.14458326661 -2.28560811969 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.5
1 9.72105706955e-05 -14.2022061453 -13.6213710434 -0.580835101953 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( recurse_() if flip_() else [] ) ))), sep="")" 1.0 1.0
1 0.00121856861337 -11.6736534217 -10.9823137138 -0.691339707951 2 "lambda recurse_: flatten2str(cons_('a', car_(( cons_('a', []) if flip_() else [] ))), sep="")" 1.0 1.0
1 0.000630904468494 -12.3319311488 -11.6754608943 -0.656470254492 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 0.4 1.0
1 1.38867061569e-05 -16.148153612 -15.5672811924 -0.580872419548 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
1 0.00425728825651 -10.4226979258 -9.72955074528 -0.69314718056 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else recurse_() ))), sep="")" 1.0 1.0
1 0.0848715500496 -7.4301913863 -5.14458326661 -2.28560811969 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.5
1 0.00123356297833 -11.6614236116 -10.9823137138 -0.679109897859 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else cons_('a', []) ))), sep="")" 1.0 1.0
1 0.0251651453219 -8.64587040895 -7.78364059622 -0.862229812729 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.2 1.0
1 9.71952830522e-05 -14.2023634209 -13.6213710434 -0.580992377499 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else car_(recurse_()) ) if flip_() else [] )), sep="")" 1.0 1.0
1 0.594100850347 -5.48428123724 -3.19867311755 -2.28560811969 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.5
1 0.00418569184729 -10.4396583177 -9.72955074528 -0.710107572409 2 "lambda recurse_: flatten2str(cons_('a', car_(( recurse_() if flip_() else [] ))), sep="")" 1.0 1.0
1 9.71956126316e-05 -14.20236003 -13.6213710434 -0.580988986606 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( recurse_() if flip_() else [] )) )), sep="")" 1.0 1.0
7 0.0596309615616 -14.5939587237 -9.72955074528 -4.86440797841 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(recurse_()) )), sep="")" 1.0 1.0
7 0.0147626002958 -15.9900366767 -10.9823137138 -5.00772296293 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_([])) if flip_() else [] )), sep="")" 1.0 1.0
7 0.00240424225069 -17.8048988707 -13.6213710434 -4.18352782734 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( recurse_() if flip_() else [] ) if flip_() else [] ))), sep="")" 1.0 1.0
7 0.143559331438 -13.7153852429 -9.03640356472 -4.6789816782 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', []) )), sep="")" 1.0 1.0
7 8.0292613265e-06 -23.5067963966 -7.09049341566 -16.416302981 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep="")" 1.0 0.5
7 0.000884611375971 -18.8047405058 -7.78364059622 -11.0210999096 10 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.2 1.0
7 0.00500068281804 -17.0725591854 -12.9282238628 -4.14433532262 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else cons_('a', []) ) )), sep="")" 1.0 1.0
7 0.00035925949542 -19.7058439753 -15.5672811924 -4.13856278286 2 "lambda recurse_: flatten2str(( cons_('a', ( car_(recurse_()) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
7 0.0025758596021 -17.7359503477 -13.6213710434 -4.11457930431 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else recurse_() ) if flip_() else [] ))), sep="")" 1.0 1.0
7 0.00119854163791 -18.5010281362 -7.78364059622 -10.71738754 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.181818181818 1.0
7 0.00250034140902 -17.765706366 -13.6213710434 -4.14433532262 2 "lambda recurse_: flatten2str(cons_('a', ( car_(( recurse_() if flip_() else [] )) if flip_() else [] )), sep="")" 1.0 1.0
7 0.00483129307195 -17.1070195036 -12.9282238628 -4.17879564074 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', []) ) if flip_() else [] )), sep="")" 1.0 1.0
7 0.00250777444096 -17.7627379693 -13.6213710434 -4.14136692587 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_(recurse_()) if flip_() else [] ) )), sep="")" 1.0 1.0
7 0.000736263277914 -18.9883011618 -14.8741340119 -4.11416714994 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
7 0.00036808516452 -19.6815745944 -15.5672811924 -4.11429340198 2 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
7 5.62048292855e-05 -21.5608862476 -5.14458326661 -16.416302981 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.5
7 0.000735977415451 -18.9886894984 -14.8741340119 -4.11455548653 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', car_([])) ) if flip_() else [] )), sep="")" 1.0 1.0
7 0.0618670826842 -14.5571453961 -9.72955074528 -4.8275946508 2 "lambda recurse_: flatten2str(cons_('a', ( car_(recurse_()) if flip_() else [] )), sep="")" 1.0 1.0
7 0.116646661323 -13.9229842754 -7.78364059622 -6.13934367921 12 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.181818181818 1.0
7 0.000354899522724 -19.7180542163 -15.5672811924 -4.15077302387 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
7 0.0168260307361 -15.8592065163 -10.9823137138 -4.87689280256 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else car_([]) )), sep="")" 1.0 1.0
7 0.0141637513031 -16.0314476764 -10.9823137138 -5.04913396267 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_([])) )), sep="")" 1.0 1.0
7 0.0109988645854 -16.2843416042 -11.6754608943 -4.60888070986 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 0.5 1.0
7 0.000723889281004 -19.0052504772 -14.8741340119 -4.13111646536 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( cons_('a', []) if flip_() else [] ) ))), sep="")" 1.0 1.0
7 0.000366302757449 -19.6864287335 -15.5672811924 -4.1191475411 2 "lambda recurse_: flatten2str(( cons_('a', car_(( recurse_() if flip_() else [] ))) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
7 0.00249251592804 -17.7688410389 -13.6213710434 -4.14746999555 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( [] if flip_() else recurse_() )) )), sep="")" 1.0 1.0
7 8.0292613265e-06 -23.5067963966 -7.09049341566 -16.416302981 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep="")" 1.0 0.5
7 0.0209503386914 -15.6399788393 -10.9823137138 -4.6576651255 2 "lambda recurse_: flatten2str(( cons_('a', cons_('a', [])) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
7 0.0103383510629 -16.3462732675 -11.6754608943 -4.67081237314 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 0.4 1.0
7 0.14665237084 -13.6940686902 -9.03640356472 -4.6576651255 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else [] )), sep="")" 1.0 1.0
7 0.00948633093769 -16.4322817384 -11.6754608943 -4.75682084402 2 "lambda recurse_: flatten2str(( cons_('a', car_(recurse_())) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
7 0.0194093471662 -15.7163788894 -10.9823137138 -4.73406517566 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', car_([])) if flip_() else [] )), sep="")" 1.0 1.0
7 0.00255330473096 -17.7447451591 -13.6213710434 -4.12337411572 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else recurse_() ) ))), sep="")" 1.0 1.0
7 0.000731979565999 -18.9941363329 -14.8741340119 -4.12000232099 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else cons_('a', []) ) ))), sep="")" 1.0 1.0
7 0.000728271715106 -18.9992147175 -14.8741340119 -4.12508070566 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else cons_('a', []) ) if flip_() else [] ))), sep="")" 1.0 1.0
7 0.00496859331813 -17.0789968867 -12.9282238628 -4.15077302387 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else [] ) )), sep="")" 1.0 1.0
7 0.00250777444096 -17.7627379693 -13.6213710434 -4.14136692587 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else car_(recurse_()) ) )), sep="")" 1.0 1.0
7 0.000363459872999 -19.6942200309 -15.5672811924 -4.12693883847 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else car_(recurse_()) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
7 0.0164057943505 -15.8844990657 -10.9823137138 -4.90218535191 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', cons_('a', [])) ), sep="")" 1.0 1.0
7 0.0168260307361 -15.8592065163 -10.9823137138 -4.87689280256 2 "lambda recurse_: flatten2str(cons_('a', ( car_(cons_('a', [])) if flip_() else [] )), sep="")" 1.0 1.0
7 0.000729515637419 -18.9975081276 -14.8741340119 -4.12337411572 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
7 0.00504293807327 -17.0641447889 -12.9282238628 -4.13592092606 2 "lambda recurse_: flatten2str(cons_('a', ( ( cons_('a', []) if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 1.0
7 0.000722209655355 -19.007573453 -14.8741340119 -4.13343944114 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
7 0.0157821941618 -15.9232512994 -10.9823137138 -4.94093758563 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(cons_('a', [])) )), sep="")" 1.0 1.0
7 5.62048292855e-05 -21.5608862476 -5.14458326661 -16.416302981 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.5
7 0.002561928481 -17.7413733644 -13.6213710434 -4.12000232099 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( recurse_() if flip_() else [] ) ))), sep="")" 1.0 1.0
7 0.017037417589 -15.8467216922 -10.9823137138 -4.86440797841 2 "lambda recurse_: flatten2str(cons_('a', car_(( cons_('a', []) if flip_() else [] ))), sep="")" 1.0 1.0
7 0.00935230631758 -16.4465106743 -11.6754608943 -4.77104977996 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 0.333333333333 1.0
7 0.000360209862376 -19.7032021185 -15.5672811924 -4.13592092606 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
7 0.0481959465128 -14.8068587319 -9.72955074528 -5.07730798661 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else recurse_() ))), sep="")" 1.0 1.0
7 5.62048292855e-05 -21.5608862476 -5.14458326661 -16.416302981 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.5
7 0.015576234446 -15.9363873325 -10.9823137138 -4.95407361869 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else cons_('a', []) ))), sep="")" 1.0 1.0
7 0.0971498207846 -14.1058793211 -7.78364059622 -6.32223872485 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.222222222222 1.0
7 0.00254695132504 -17.747236567 -13.6213710434 -4.12586552366 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else car_(recurse_()) ) if flip_() else [] )), sep="")" 1.0 1.0
7 0.000393433804999 -19.6149760985 -3.19867311755 -16.416302981 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.5
7 0.0633705899318 -14.5331337795 -9.72955074528 -4.80358303427 2 "lambda recurse_: flatten2str(cons_('a', car_(( recurse_() if flip_() else [] ))), sep="")" 1.0 1.0
7 0.0025758596021 -17.7359503477 -13.6213710434 -4.11457930431 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( recurse_() if flip_() else [] )) )), sep="")" 1.0 1.0
13 0.0788842386642 -18.6016063488 -9.72955074528 -8.87205560352 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(recurse_()) )), sep="")" 1.0 1.0
13 0.0161204056718 -20.1895018907 -10.9823137138 -9.20718817697 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_([])) if flip_() else [] )), sep="")" 1.0 1.0
13 0.00611074577298 -21.1595389697 -13.6213710434 -7.53816792636 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( recurse_() if flip_() else [] ) if flip_() else [] ))), sep="")" 1.0 1.0
13 0.168667122301 -17.8416607112 -9.03640356472 -8.80525714653 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', []) )), sep="")" 1.0 1.0
13 1.14092118268e-09 -36.6532623601 -7.09049341566 -29.5627689445 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep="")" 1.0 0.5
13 1.73243713749e-06 -29.3278139051 -7.78364059622 -21.5441733089 10 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.2 1.0
13 0.0121749187635 -20.4702097967 -12.9282238628 -7.54198593388 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else cons_('a', []) ) )), sep="")" 1.0 1.0
13 0.000877068606018 -23.1007578549 -15.5672811924 -7.53347666241 2 "lambda recurse_: flatten2str(( cons_('a', ( car_(recurse_()) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
13 0.00592798955247 -21.1899026677 -13.6213710434 -7.56853162428 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else recurse_() ) if flip_() else [] ))), sep="")" 1.0 1.0
13 5.34855876211e-06 -28.2005159379 -7.78364059622 -20.4168753417 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.2 1.0
13 0.00564529848455 -21.2387647211 -13.6213710434 -7.61739367775 2 "lambda recurse_: flatten2str(cons_('a', ( car_(( recurse_() if flip_() else [] )) if flip_() else [] )), sep="")" 1.0 1.0
13 0.011955735921 -20.4883766366 -12.9282238628 -7.56015277382 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', []) ) if flip_() else [] )), sep="")" 1.0 1.0
13 0.00611993626695 -21.1580361107 -13.6213710434 -7.53666506729 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_(recurse_()) if flip_() else [] ) )), sep="")" 1.0 1.0
13 0.0017254245479 -22.4241146583 -14.8741340119 -7.54998064644 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
13 0.000877342649143 -23.1004454502 -15.5672811924 -7.53316425775 2 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
13 7.98644827875e-09 -34.7073522111 -5.14458326661 -29.5627689445 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.5
13 0.00165948930193 -22.4630778877 -14.8741340119 -7.58894387578 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', car_([])) ) if flip_() else [] )), sep="")" 1.0 1.0
13 0.0861991613713 -18.5129273445 -9.72955074528 -8.78337659922 2 "lambda recurse_: flatten2str(cons_('a', ( car_(recurse_()) if flip_() else [] )), sep="")" 1.0 1.0
13 0.0492487388802 -19.0727040325 -7.78364059622 -11.2890634362 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.2 1.0
13 0.000829744650965 -23.1562250682 -15.5672811924 -7.58894387578 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
13 0.0157153768443 -20.2149481434 -10.9823137138 -9.23263442961 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else car_([]) )), sep="")" 1.0 1.0
13 0.0157153768443 -20.2149481434 -10.9823137138 -9.23263442961 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_([])) )), sep="")" 1.0 1.0
13 0.0118927615936 -20.4936578477 -11.6754608943 -8.81819695332 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 0.4 1.0
13 0.00165856977348 -22.4636321445 -14.8741340119 -7.58949813262 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( cons_('a', []) if flip_() else [] ) ))), sep="")" 1.0 1.0
13 0.000803054080458 -23.1889210125 -15.5672811924 -7.6216398201 2 "lambda recurse_: flatten2str(( cons_('a', car_(( recurse_() if flip_() else [] ))) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
13 0.00609992299793 -21.1613116454 -13.6213710434 -7.53994060206 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( [] if flip_() else recurse_() )) )), sep="")" 1.0 1.0
13 1.14092118268e-09 -36.6532623601 -7.09049341566 -29.5627689445 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep="")" 1.0 0.5
13 0.0161204056718 -20.1895018907 -10.9823137138 -9.20718817697 2 "lambda recurse_: flatten2str(( cons_('a', cons_('a', [])) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
13 0.0130639455879 -20.3997316026 -11.6754608943 -8.7242707083 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 0.4 1.0
13 0.11000763791 -18.2690379943 -9.03640356472 -9.23263442961 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else [] )), sep="")" 1.0 1.0
13 0.00847582769235 -20.8323694819 -11.6754608943 -9.15690858761 2 "lambda recurse_: flatten2str(( cons_('a', car_(recurse_())) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
13 0.0191543166205 -20.017059692 -10.9823137138 -9.03474597826 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', car_([])) if flip_() else [] )), sep="")" 1.0 1.0
13 0.006141398544 -21.1545353011 -13.6213710434 -7.53316425775 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else recurse_() ) ))), sep="")" 1.0 1.0
13 0.00175315159302 -22.4081727147 -14.8741340119 -7.53403870283 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else cons_('a', []) ) ))), sep="")" 1.0 1.0
13 0.00175468529829 -22.4072982696 -14.8741340119 -7.53316425775 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else cons_('a', []) ) if flip_() else [] ))), sep="")" 1.0 1.0
13 0.0121108072404 -20.4754895789 -12.9282238628 -7.54726571609 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else [] ) )), sep="")" 1.0 1.0
13 0.00595376465668 -21.1855640584 -13.6213710434 -7.56419301498 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else car_(recurse_()) ) )), sep="")" 1.0 1.0
13 0.000838775688131 -23.1453997577 -15.5672811924 -7.57811856529 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else car_(recurse_()) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
13 0.0200854395547 -19.969592641 -10.9823137138 -8.98727892718 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', cons_('a', [])) ), sep="")" 1.0 1.0
13 0.0134316630648 -20.3719729583 -10.9823137138 -9.38965924454 2 "lambda recurse_: flatten2str(cons_('a', ( car_(cons_('a', [])) if flip_() else [] )), sep="")" 1.0 1.0
13 0.00175173309252 -22.4089821568 -14.8741340119 -7.53484814492 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
13 0.0122550080014 -20.4636531234 -12.9282238628 -7.53542926054 2 "lambda recurse_: flatten2str(cons_('a', ( ( cons_('a', []) if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 1.0
13 0.00175315159302 -22.4081727147 -14.8741340119 -7.53403870283 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
13 0.0173779217766 -20.1143872561 -10.9823137138 -9.13207354236 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(cons_('a', [])) )), sep="")" 1.0 1.0
13 7.98644827875e-09 -34.7073522111 -5.14458326661 -29.5627689445 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.5
13 0.00595376465668 -21.1855640584 -13.6213710434 -7.56419301498 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( recurse_() if flip_() else [] ) ))), sep="")" 1.0 1.0
13 0.0205617401817 -19.9461557171 -10.9823137138 -8.96384200329 2 "lambda recurse_: flatten2str(cons_('a', car_(( cons_('a', []) if flip_() else [] ))), sep="")" 1.0 1.0
13 0.0154681360451 -20.2308056243 -11.6754608943 -8.55534472996 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 0.285714285714 1.0
13 0.000875357714387 -23.102710453 -15.5672811924 -7.53542926054 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
13 0.0623395771745 -18.8369913015 -9.72955074528 -9.10744055623 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else recurse_() ))), sep="")" 1.0 1.0
13 7.98644827875e-09 -34.7073522111 -5.14458326661 -29.5627689445 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.5
13 0.0169516553847 -20.1392223014 -10.9823137138 -9.15690858761 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else cons_('a', []) ))), sep="")" 1.0 1.0
13 0.0452159389096 -19.1581381378 -7.78364059622 -11.3744975416 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.2 1.0
13 0.00609992299793 -21.1613116454 -13.6213710434 -7.53994060206 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else car_(recurse_()) ) if flip_() else [] )), sep="")" 1.0 1.0
13 5.59051379512e-08 -32.761442062 -3.19867311755 -29.5627689445 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.5
13 0.0536108187065 -18.987836904 -9.72955074528 -9.25828615873 2 "lambda recurse_: flatten2str(cons_('a', car_(( recurse_() if flip_() else [] ))), sep="")" 1.0 1.0
13 0.00597786796048 -21.1815238172 -13.6213710434 -7.56015277382 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( recurse_() if flip_() else [] )) )), sep="")" 1.0 1.0
19 0.063714135147 -22.8993471759 -9.72955074528 -13.1697964306 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(recurse_()) )), sep="")" 1.0 1.0
19 0.036694387898 -23.4511297907 -10.9823137138 -12.4688160769 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_([])) if flip_() else [] )), sep="")" 1.0 1.0
19 0.0116431421139 -24.5990362688 -13.6213710434 -10.9776652254 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( recurse_() if flip_() else [] ) if flip_() else [] ))), sep="")" 1.0 1.0
19 0.088511519539 -22.5706209079 -9.03640356472 -13.5342173432 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', []) )), sep="")" 1.0 1.0
19 1.10117293809e-13 -49.9832286266 -7.09049341566 -42.8927352109 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep="")" 1.0 0.5
19 7.781559268e-09 -38.8175074355 -7.78364059622 -31.0338668393 10 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.181818181818 1.0
19 0.0232687730616 -23.906641366 -12.9282238628 -10.9784175031 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else cons_('a', []) ) )), sep="")" 1.0 1.0
19 0.00145167144472 -26.6810380027 -15.5672811924 -11.1137568102 2 "lambda recurse_: flatten2str(( cons_('a', ( car_(recurse_()) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
19 0.0116884176097 -24.5951552121 -13.6213710434 -10.9737841687 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else recurse_() ) if flip_() else [] ))), sep="")" 1.0 1.0
19 1.56694133221e-07 -35.8149684646 -7.78364059622 -28.0313278684 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.2 1.0
19 0.0115523823928 -24.6068619322 -13.6213710434 -10.9854908889 2 "lambda recurse_: flatten2str(cons_('a', ( car_(( recurse_() if flip_() else [] )) if flip_() else [] )), sep="")" 1.0 1.0
19 0.0233491373225 -23.9031935778 -12.9282238628 -10.974969715 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', []) ) if flip_() else [] )), sep="")" 1.0 1.0
19 0.0115523823928 -24.6068619322 -13.6213710434 -10.9854908889 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_(recurse_()) if flip_() else [] ) )), sep="")" 1.0 1.0
19 0.00333043988752 -25.8506492221 -14.8741340119 -10.9765152102 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
19 0.00160683464463 -26.5794874312 -15.5672811924 -11.0122062387 2 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
19 7.70821056663e-13 -48.0373184775 -5.14458326661 -42.8927352109 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.5
19 0.00324787431041 -25.8757528917 -14.8741340119 -11.0016188798 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', car_([])) ) if flip_() else [] )), sep="")" 1.0 1.0
19 0.0336834774472 -23.5367461821 -9.72955074528 -13.8071954368 2 "lambda recurse_: flatten2str(cons_('a', ( car_(recurse_()) if flip_() else [] )), sep="")" 1.0 1.0
19 0.00656737830328 -25.1716389035 -7.78364059622 -17.3879983072 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.2 1.0
19 0.00167190963659 -26.5397871476 -15.5672811924 -10.9725059552 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
19 0.0092443468577 -24.8297414015 -10.9823137138 -13.8474276878 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else car_([]) )), sep="")" 1.0 1.0
19 0.019511713491 -24.0827386386 -10.9823137138 -13.1004249249 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_([])) )), sep="")" 1.0 1.0
19 0.0227489865187 -23.9292330199 -11.6754608943 -12.2537721256 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 0.4 1.0
19 0.00334381927318 -25.8466399671 -14.8741340119 -10.9725059552 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( cons_('a', []) if flip_() else [] ) ))), sep="")" 1.0 1.0
19 0.00159731541246 -26.5854292629 -15.5672811924 -11.0181480704 2 "lambda recurse_: flatten2str(( cons_('a', car_(( recurse_() if flip_() else [] ))) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
19 0.0117010087196 -24.5940785623 -13.6213710434 -10.9727075189 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( [] if flip_() else recurse_() )) )), sep="")" 1.0 1.0
19 1.10117293809e-13 -49.9832286266 -7.09049341566 -42.8927352109 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep="")" 1.0 0.5
19 0.0246507197575 -23.8489475166 -10.9823137138 -12.8666338028 2 "lambda recurse_: flatten2str(( cons_('a', cons_('a', [])) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
19 0.014526924467 -24.3777498283 -11.6754608943 -12.702288934 7 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 0.333333333333 1.0
19 0.146224945066 -22.0686074601 -9.03640356472 -13.0322038954 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else [] )), sep="")" 1.0 1.0
19 0.0148956963535 -24.3526812798 -11.6754608943 -12.6772203855 2 "lambda recurse_: flatten2str(( cons_('a', car_(recurse_())) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
19 0.0208892778665 -24.0145176091 -10.9823137138 -13.0322038954 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', car_([])) if flip_() else [] )), sep="")" 1.0 1.0
19 0.0105913100185 -24.6937197604 -13.6213710434 -11.072348717 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else recurse_() ) ))), sep="")" 1.0 1.0
19 0.00330068068365 -25.8596249007 -14.8741340119 -10.9854908889 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else cons_('a', []) ) ))), sep="")" 1.0 1.0
19 0.00334092449766 -25.8475060513 -14.8741340119 -10.9733720394 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else cons_('a', []) ) if flip_() else [] ))), sep="")" 1.0 1.0
19 0.0228412130681 -23.9251871208 -12.9282238628 -10.9969632579 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else [] ) )), sep="")" 1.0 1.0
19 0.0111812078872 -24.6395191138 -13.6213710434 -11.0181480704 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else car_(recurse_()) ) )), sep="")" 1.0 1.0
19 0.0015402098408 -26.6218349483 -15.5672811924 -11.0545537559 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else car_(recurse_()) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
19 0.0246507197575 -23.8489475166 -10.9823137138 -12.8666338028 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', cons_('a', [])) ), sep="")" 1.0 1.0
19 0.0131313355574 -24.4787522146 -10.9823137138 -13.4964385008 2 "lambda recurse_: flatten2str(cons_('a', ( car_(cons_('a', [])) if flip_() else [] )), sep="")" 1.0 1.0
19 0.0032894345894 -25.863037923 -14.8741340119 -10.9889039111 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
19 0.0215629377711 -23.9827776187 -12.9282238628 -11.0545537559 2 "lambda recurse_: flatten2str(cons_('a', ( ( cons_('a', []) if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 1.0
19 0.00323141909696 -25.8808322261 -14.8741340119 -11.0066982142 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
19 0.0346206393209 -23.5093035993 -10.9823137138 -12.5269898856 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(cons_('a', [])) )), sep="")" 1.0 1.0
19 7.70821056663e-13 -48.0373184775 -5.14458326661 -42.8927352109 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.5
19 0.0115130210629 -24.6102749545 -13.6213710434 -10.9889039111 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( recurse_() if flip_() else [] ) ))), sep="")" 1.0 1.0
19 0.0169643344668 -24.222640448 -10.9823137138 -13.2403267343 2 "lambda recurse_: flatten2str(cons_('a', car_(( cons_('a', []) if flip_() else [] ))), sep="")" 1.0 1.0
19 0.0243495985425 -23.8612382533 -11.6754608943 -12.1857773589 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 0.333333333333 1.0
19 0.00163151521915 -26.5642444504 -15.5672811924 -10.9969632579 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
19 0.0593751706339 -22.9698774795 -9.72955074528 -13.2403267343 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else recurse_() ))), sep="")" 1.0 1.0
19 7.70821056663e-13 -48.0373184775 -5.14458326661 -42.8927352109 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.5
19 0.0104204995485 -24.7099786392 -10.9823137138 -13.7276649255 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else cons_('a', []) ))), sep="")" 1.0 1.0
19 0.0123892113953 -24.5369275706 -7.78364059622 -16.7532869744 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.181818181818 1.0
19 0.0113099668394 -24.6280692576 -13.6213710434 -11.0066982142 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else car_(recurse_()) ) if flip_() else [] )), sep="")" 1.0 1.0
19 5.39574739664e-12 -46.0914083285 -3.19867311755 -42.8927352109 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.5
19 0.0659724026191 -22.8645171033 -9.72955074528 -13.134966358 2 "lambda recurse_: flatten2str(cons_('a', car_(( recurse_() if flip_() else [] ))), sep="")" 1.0 1.0
19 0.00992346616543 -24.7588513436 -13.6213710434 -11.1374803002 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( recurse_() if flip_() else [] )) )), sep="")" 1.0 1.0
25 0.0381901945916 -27.4333251123 -9.72955074528 -17.7037743671 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(recurse_()) )), sep="")" 1.0 1.0
25 0.0114508358875 -28.6378411783 -10.9823137138 -17.6555274645 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_([])) if flip_() else [] )), sep="")" 1.0 1.0
25 0.0179327049581 -28.1892777705 -13.6213710434 -14.5679067272 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( recurse_() if flip_() else [] ) if flip_() else [] ))), sep="")" 1.0 1.0
25 0.0801558512122 -26.6919310293 -9.03640356472 -17.6555274645 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', []) )), sep="")" 1.0 1.0
25 3.85981866507e-18 -64.2640600994 -7.09049341566 -57.1735666838 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep="")" 1.0 0.5
25 5.13895705676e-11 -47.8597345012 -7.78364059622 -40.076093905 10 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.2 1.0
25 0.0374351745642 -27.4532931501 -12.9282238628 -14.5250692873 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else cons_('a', []) ) )), sep="")" 1.0 1.0
25 0.00259384849949 -30.1227612289 -15.5672811924 -14.5554800365 2 "lambda recurse_: flatten2str(( cons_('a', ( car_(recurse_()) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
25 0.0186056934061 -28.1524362779 -13.6213710434 -14.5310652345 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else recurse_() ) if flip_() else [] ))), sep="")" 1.0 1.0
25 7.25222274431e-11 -47.5152766456 -7.78364059622 -39.7316360493 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.181818181818 1.0
25 0.0168653376962 -28.2506434171 -13.6213710434 -14.6292723737 2 "lambda recurse_: flatten2str(cons_('a', ( car_(( recurse_() if flip_() else [] )) if flip_() else [] )), sep="")" 1.0 1.0
25 0.0368470812679 -27.4691274992 -12.9282238628 -14.5409036363 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', []) ) if flip_() else [] )), sep="")" 1.0 1.0
25 0.018442542918 -28.161243798 -13.6213710434 -14.5398727546 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_(recurse_()) if flip_() else [] ) )), sep="")" 1.0 1.0
25 0.00524115233208 -29.4193625241 -14.8741340119 -14.5452285122 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
25 0.00258623154697 -30.1257020939 -15.5672811924 -14.5584209015 2 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
25 2.70187306555e-17 -62.3181499504 -5.14458326661 -57.1735666838 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.5
25 0.00524115233208 -29.4193625241 -14.8741340119 -14.5452285122 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', car_([])) ) if flip_() else [] )), sep="")" 1.0 1.0
25 0.0823118249803 -26.6653891301 -9.72955074528 -16.9358383849 2 "lambda recurse_: flatten2str(cons_('a', ( car_(recurse_()) if flip_() else [] )), sep="")" 1.0 1.0
25 0.00300620438246 -29.9752256284 -7.78364059622 -22.1915850322 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.181818181818 1.0
25 0.00256181499401 -30.1351879196 -15.5672811924 -14.5679067272 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
25 0.00504244403143 -29.4580130175 -10.9823137138 -18.4756993037 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else car_([]) )), sep="")" 1.0 1.0
25 0.00989609469248 -28.7837637051 -10.9823137138 -17.8014499913 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_([])) )), sep="")" 1.0 1.0
25 0.0162912252836 -28.2852772722 -11.6754608943 -16.6098163779 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 0.333333333333 1.0
25 0.005156981626 -29.4355524568 -14.8741340119 -14.5614184449 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( cons_('a', []) if flip_() else [] ) ))), sep="")" 1.0 1.0
25 0.00265062455946 -30.1011086139 -15.5672811924 -14.5338274214 2 "lambda recurse_: flatten2str(( cons_('a', car_(( recurse_() if flip_() else [] ))) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
25 0.0164839787966 -28.2735149817 -13.6213710434 -14.6521439384 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( [] if flip_() else recurse_() )) )), sep="")" 1.0 1.0
25 3.85981866507e-18 -64.2640600994 -7.09049341566 -57.1735666838 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep="")" 1.0 0.5
25 0.0300521600886 -27.6729693674 -10.9823137138 -16.6906556536 2 "lambda recurse_: flatten2str(( cons_('a', cons_('a', [])) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
25 0.0164866415175 -28.2733534609 -11.6754608943 -16.5978925666 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 0.4 1.0
25 0.0763803891832 -26.7401779318 -9.03640356472 -17.7037743671 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else [] )), sep="")" 1.0 1.0
25 0.00908018286321 -28.8698095774 -11.6754608943 -17.1943486831 2 "lambda recurse_: flatten2str(( cons_('a', car_(recurse_())) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
25 0.0207009066444 -28.0457264104 -10.9823137138 -17.0634126966 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', car_([])) if flip_() else [] )), sep="")" 1.0 1.0
25 0.018718225879 -28.1464062138 -13.6213710434 -14.5250351704 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else recurse_() ) ))), sep="")" 1.0 1.0
25 0.00496435218925 -29.4736210954 -14.8741340119 -14.5994870835 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else cons_('a', []) ) ))), sep="")" 1.0 1.0
25 0.00531591240176 -29.4051992464 -14.8741340119 -14.5310652345 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else cons_('a', []) ) if flip_() else [] ))), sep="")" 1.0 1.0
25 0.0366880663245 -27.473452375 -12.9282238628 -14.5452285122 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else [] ) )), sep="")" 1.0 1.0
25 0.017671878832 -28.2039292993 -13.6213710434 -14.5825582559 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else car_(recurse_()) ) )), sep="")" 1.0 1.0
25 0.00265888875683 -30.097995634 -15.5672811924 -14.5307144416 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else car_(recurse_()) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
25 0.0189776572196 -28.1326415575 -10.9823137138 -17.1503278437 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', cons_('a', [])) ), sep="")" 1.0 1.0
25 0.00694263254998 -29.1382228764 -10.9823137138 -18.1559091626 2 "lambda recurse_: flatten2str(cons_('a', ( car_(cons_('a', [])) if flip_() else [] )), sep="")" 1.0 1.0
25 0.00496435218925 -29.4736210954 -14.8741340119 -14.5994870835 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
25 0.0293267020699 -27.6974054745 -12.9282238628 -14.7691816116 2 "lambda recurse_: flatten2str(cons_('a', ( ( cons_('a', []) if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 1.0
25 0.00526386875255 -29.4150376482 -14.8741340119 -14.5409036363 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
25 0.0144899185859 -28.4024507712 -10.9823137138 -17.4201370575 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(cons_('a', [])) )), sep="")" 1.0 1.0
25 2.70187306555e-17 -62.3181499504 -5.14458326661 -57.1735666838 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.5
25 0.0184235406339 -28.1622746797 -13.6213710434 -14.5409036363 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( recurse_() if flip_() else [] ) ))), sep="")" 1.0 1.0
25 0.00381823645579 -29.7361152537 -10.9823137138 -18.7538015399 2 "lambda recurse_: flatten2str(cons_('a', car_(( cons_('a', []) if flip_() else [] ))), sep="")" 1.0 1.0
25 0.0299608313566 -27.6760130018 -11.6754608943 -16.0005521074 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 0.4 1.0
25 0.0026739410403 -30.0923504797 -15.5672811924 -14.5250692873 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
25 0.0724531732553 -26.7929634419 -9.72955074528 -17.0634126966 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else recurse_() ))), sep="")" 1.0 1.0
25 2.70187306555e-17 -62.3181499504 -5.14458326661 -57.1735666838 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.5
25 0.0173717181579 -28.2210604183 -10.9823137138 -17.2387467045 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else cons_('a', []) ))), sep="")" 1.0 1.0
25 0.00220928978479 -30.2832328094 -7.78364059622 -22.4995922132 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.2 1.0
25 0.018049435691 -28.1827894883 -13.6213710434 -14.5614184449 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else car_(recurse_()) ) if flip_() else [] )), sep="")" 1.0 1.0
25 1.89131114588e-16 -60.3722398013 -3.19867311755 -57.1735666838 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.5
25 0.0635612800425 -26.9238994283 -9.72955074528 -17.1943486831 2 "lambda recurse_: flatten2str(cons_('a', car_(( recurse_() if flip_() else [] ))), sep="")" 1.0 1.0
25 0.0178068228518 -28.1963222188 -13.6213710434 -14.5749511754 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( recurse_() if flip_() else [] )) )), sep="")" 1.0 1.0
31 0.0378981911433 -31.1069242923 -9.72955074528 -21.377373547 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(recurse_()) )), sep="")" 1.0 1.0
31 0.00511269392463 -33.110101224 -10.9823137138 -22.1277875103 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_([])) if flip_() else [] )), sep="")" 1.0 1.0
31 0.0191001431692 -31.7921318454 -13.6213710434 -18.170760802 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( recurse_() if flip_() else [] ) if flip_() else [] ))), sep="")" 1.0 1.0
31 0.0757963822866 -30.4137771117 -9.03640356472 -21.377373547 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', []) )), sep="")" 1.0 1.0
31 8.01904635568e-23 -78.7117100295 -7.09049341566 -71.6212166138 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep="")" 1.0 0.5
31 3.77764245739e-13 -56.4385784796 -7.78364059622 -48.6549378833 11 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.25 1.0
31 0.0408091303136 -31.0329218376 -12.9282238628 -18.1046979748 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else cons_('a', []) ) )), sep="")" 1.0 1.0
31 0.00280284350628 -33.7111932363 -15.5672811924 -18.1439120439 2 "lambda recurse_: flatten2str(( cons_('a', ( car_(recurse_()) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
31 0.0199062844009 -31.7507921952 -13.6213710434 -18.1294211518 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else recurse_() ) if flip_() else [] ))), sep="")" 1.0 1.0
31 3.05425154447e-13 -56.6511440371 -7.78364059622 -48.8675034409 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.2 1.0
31 0.0180072979479 -31.8510505589 -13.6213710434 -18.2296795155 2 "lambda recurse_: flatten2str(cons_('a', ( car_(( recurse_() if flip_() else [] )) if flip_() else [] )), sep="")" 1.0 1.0
31 0.0378071691032 -31.1093289327 -12.9282238628 -18.1811050699 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', []) ) if flip_() else [] )), sep="")" 1.0 1.0
31 0.0205156385685 -31.7206402238 -13.6213710434 -18.0992691804 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_(recurse_()) if flip_() else [] ) )), sep="")" 1.0 1.0
31 0.00572314174725 -32.997309765 -14.8741340119 -18.1231757532 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
31 0.00291493787955 -33.6719791672 -15.5672811924 -18.1046979748 2 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
31 5.61333244897e-22 -76.7657998804 -5.14458326661 -71.6212166138 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.5
31 0.00586161101957 -32.9734031923 -14.8741340119 -18.0992691804 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', car_([])) ) if flip_() else [] )), sep="")" 1.0 1.0
31 0.0201914542841 -31.7365682165 -9.72955074528 -22.0070174712 2 "lambda recurse_: flatten2str(cons_('a', ( car_(recurse_()) if flip_() else [] )), sep="")" 1.0 1.0
31 0.000713356617079 -35.0796014956 -7.78364059622 -27.2959608993 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.166666666667 1.0
31 0.00280284350628 -33.7111932363 -15.5672811924 -18.1439120439 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
31 0.00253874884998 -33.8101562952 -10.9823137138 -22.8278425815 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else car_([]) )), sep="")" 1.0 1.0
31 0.0134220472283 -32.1449290057 -10.9823137138 -21.1626152919 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_([])) )), sep="")" 1.0 1.0
31 0.018802435454 -31.8078412693 -11.6754608943 -20.1323803749 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 0.333333333333 1.0
31 0.00514494227081 -33.1038135274 -14.8741340119 -18.2296795155 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( cons_('a', []) if flip_() else [] ) ))), sep="")" 1.0 1.0
31 0.00257247113541 -33.7969607079 -15.5672811924 -18.2296795155 2 "lambda recurse_: flatten2str(( cons_('a', car_(( recurse_() if flip_() else [] ))) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
31 0.0191001431692 -31.7921318454 -13.6213710434 -18.170760802 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( [] if flip_() else recurse_() )) )), sep="")" 1.0 1.0
31 8.01904635568e-23 -78.7117100295 -7.09049341566 -71.6212166138 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep="")" 1.0 0.5
31 0.0211815918253 -31.6886951818 -10.9823137138 -20.706381468 2 "lambda recurse_: flatten2str(( cons_('a', cons_('a', [])) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
31 0.0248123264669 -31.5304871115 -11.6754608943 -19.8550262172 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 0.333333333333 1.0
31 0.127877716636 -29.8907532076 -9.03640356472 -20.8543496429 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else [] )), sep="")" 1.0 1.0
31 0.00960029349583 -32.4800340057 -11.6754608943 -20.8045731113 2 "lambda recurse_: flatten2str(( cons_('a', car_(recurse_())) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
31 0.0127293162365 -32.1979199778 -10.9823137138 -21.215606264 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', car_([])) if flip_() else [] )), sep="")" 1.0 1.0
31 0.0205156385685 -31.7206402238 -13.6213710434 -18.0992691804 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else recurse_() ) ))), sep="")" 1.0 1.0
31 0.00575521339697 -32.9917215544 -14.8741340119 -18.1175875425 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else cons_('a', []) ) ))), sep="")" 1.0 1.0
31 0.00564834646534 -33.0104648348 -14.8741340119 -18.1363308229 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else cons_('a', []) ) if flip_() else [] ))), sep="")" 1.0 1.0
31 0.0411045310043 -31.0257093173 -12.9282238628 -18.0974854545 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else [] ) )), sep="")" 1.0 1.0
31 0.0200309961154 -31.7445467965 -13.6213710434 -18.1231757532 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else car_(recurse_()) ) )), sep="")" 1.0 1.0
31 0.00293080550978 -33.6665503729 -15.5672811924 -18.0992691804 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else car_(recurse_()) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
31 0.025638636276 -31.4977272329 -10.9823137138 -20.5154135191 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', cons_('a', [])) ), sep="")" 1.0 1.0
31 0.00917193878803 -32.525678985 -10.9823137138 -21.5433652712 2 "lambda recurse_: flatten2str(cons_('a', ( car_(cons_('a', [])) if flip_() else [] )), sep="")" 1.0 1.0
31 0.00557895686033 -33.0228258598 -14.8741340119 -18.1486918479 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
31 0.0333254891596 -31.2355051317 -12.9282238628 -18.3072812689 2 "lambda recurse_: flatten2str(cons_('a', ( ( cons_('a', []) if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 1.0
31 0.00575521339697 -32.9917215544 -14.8741340119 -18.1175875425 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
31 0.0182682452337 -31.8366633567 -10.9823137138 -20.8543496429 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(cons_('a', [])) )), sep="")" 1.0 1.0
31 5.61333244897e-22 -76.7657998804 -5.14458326661 -71.6212166138 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.5
31 0.0191001431692 -31.7921318454 -13.6213710434 -18.170760802 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( recurse_() if flip_() else [] ) ))), sep="")" 1.0 1.0
31 0.00917193878803 -32.525678985 -10.9823137138 -21.5433652712 2 "lambda recurse_: flatten2str(cons_('a', car_(( cons_('a', []) if flip_() else [] ))), sep="")" 1.0 1.0
31 0.00908516201213 -32.5351851415 -11.6754608943 -20.8597242472 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 0.4 1.0
31 0.00287899775882 -33.684385443 -15.5672811924 -18.1171042505 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
31 0.0445526068278 -30.9451570093 -9.72955074528 -21.215606264 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else recurse_() ))), sep="")" 1.0 1.0
31 5.61333244897e-22 -76.7657998804 -5.14458326661 -71.6212166138 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.5
31 0.0222323810802 -31.6402778428 -10.9823137138 -20.657964129 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else cons_('a', []) ))), sep="")" 1.0 1.0
31 0.00124826779096 -34.5200708531 -7.78364059622 -26.7364302569 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.222222222222 1.0
31 0.0182473151839 -31.8378097202 -13.6213710434 -18.2164386768 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else car_(recurse_()) ) if flip_() else [] )), sep="")" 1.0 1.0
31 3.92933271428e-21 -74.8198897314 -3.19867311755 -71.6212166138 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.5
31 0.0856094592703 -30.2920318936 -9.72955074528 -20.5624811483 2 "lambda recurse_: flatten2str(cons_('a', car_(( recurse_() if flip_() else [] ))), sep="")" 1.0 1.0
31 0.0204045651568 -31.7260690181 -13.6213710434 -18.1046979748 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( recurse_() if flip_() else [] )) )), sep="")" 1.0 1.0
37 0.0229737226143 -35.4438336268 -9.72955074528 -25.7142828816 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(recurse_()) )), sep="")" 1.0 1.0
37 0.00803180528332 -36.4947753746 -10.9823137138 -25.5124616608 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_([])) if flip_() else [] )), sep="")" 1.0 1.0
37 0.0323947972621 -35.100186863 -13.6213710434 -21.4788158196 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( recurse_() if flip_() else [] ) if flip_() else [] ))), sep="")" 1.0 1.0
37 0.0730088857175 -34.2876035387 -9.03640356472 -25.251199974 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', []) )), sep="")" 1.0 1.0
37 1.36803578577e-26 -91.2242658554 -7.09049341566 -84.1337724397 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep="")" 1.0 0.5
37 2.68912908543e-15 -65.2199884294 -7.78364059622 -57.4363478332 12 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.2 1.0
37 0.0668431259738 -34.3758362239 -12.9282238628 -21.4476123611 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else cons_('a', []) ) )), sep="")" 1.0 1.0
37 0.00472038161396 -37.0262950478 -15.5672811924 -21.4590138554 2 "lambda recurse_: flatten2str(( cons_('a', ( car_(recurse_()) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
37 0.0330426712977 -35.0803848988 -13.6213710434 -21.4590138554 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else recurse_() ) if flip_() else [] ))), sep="")" 1.0 1.0
37 4.06739344476e-16 -67.1087885405 -7.78364059622 -59.3251479443 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.181818181818 1.0
37 0.0304625199933 -35.1616876193 -13.6213710434 -21.5403165759 2 "lambda recurse_: flatten2str(cons_('a', ( car_(( recurse_() if flip_() else [] )) if flip_() else [] )), sep="")" 1.0 1.0
37 0.0671226153066 -34.3716636686 -12.9282238628 -21.4434398057 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', []) ) if flip_() else [] )), sep="")" 1.0 1.0
37 0.0330426712977 -35.0803848988 -13.6213710434 -21.4590138554 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_(recurse_()) if flip_() else [] ) )), sep="")" 1.0 1.0
37 0.00952904042718 -36.3238406717 -14.8741340119 -21.4497066598 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
37 0.0048102578329 -37.0074340084 -15.5672811924 -21.440152816 2 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
37 9.5762505004e-26 -89.2783557064 -5.14458326661 -84.1337724397 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.5
37 0.00932431482845 -36.3455592086 -14.8741340119 -21.4714251967 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', car_([])) ) if flip_() else [] )), sep="")" 1.0 1.0
37 0.0174147644366 -35.7208663173 -9.72955074528 -25.9913155721 2 "lambda recurse_: flatten2str(cons_('a', ( car_(recurse_()) if flip_() else [] )), sep="")" 1.0 1.0
37 7.02155477368e-05 -41.2343702093 -7.78364059622 -33.4507296131 12 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.2 1.0
37 0.00396741275626 -37.200070511 -15.5672811924 -21.6327893186 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
37 0.00204951891035 -37.8605796069 -10.9823137138 -26.8782658931 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else car_([]) )), sep="")" 1.0 1.0
37 0.00751347715738 -36.5614863323 -10.9823137138 -25.5791726186 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_([])) )), sep="")" 1.0 1.0
37 0.0144117664271 -35.9101397087 -11.6754608943 -24.2346788143 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 0.333333333333 1.0
37 0.00952904042718 -36.3238406717 -14.8741340119 -21.4497066598 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( cons_('a', []) if flip_() else [] ) ))), sep="")" 1.0 1.0
37 0.00440582323563 -37.095257566 -15.5672811924 -21.5279763736 2 "lambda recurse_: flatten2str(( cons_('a', car_(( recurse_() if flip_() else [] ))) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
37 0.0323947972621 -35.100186863 -13.6213710434 -21.4788158196 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( [] if flip_() else recurse_() )) )), sep="")" 1.0 1.0
37 1.36803578577e-26 -91.2242658554 -7.09049341566 -84.1337724397 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep="")" 1.0 0.5
37 0.00858108323305 -36.4286245381 -10.9823137138 -25.4463108244 2 "lambda recurse_: flatten2str(( cons_('a', cons_('a', [])) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
37 0.0167456144828 -35.7600482925 -11.6754608943 -24.0845873982 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 0.333333333333 1.0
37 0.0525943401016 -34.6155761833 -9.03640356472 -25.5791726186 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else [] )), sep="")" 1.0 1.0
37 0.00102475945518 -38.5537267874 -11.6754608943 -26.8782658931 2 "lambda recurse_: flatten2str(( cons_('a', car_(recurse_())) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
37 0.00189612928641 -37.9383701041 -10.9823137138 -26.9560563903 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', car_([])) if flip_() else [] )), sep="")" 1.0 1.0
37 0.0336718048303 -35.0615238593 -13.6213710434 -21.440152816 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else recurse_() ) ))), sep="")" 1.0 1.0
37 0.00891348551326 -36.3906193384 -14.8741340119 -21.5164853266 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else cons_('a', []) ) ))), sep="")" 1.0 1.0
37 0.00956254243772 -36.3203310575 -14.8741340119 -21.4461970456 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else cons_('a', []) ) if flip_() else [] ))), sep="")" 1.0 1.0
37 0.0565335381513 -34.543350637 -12.9282238628 -21.6151267741 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else [] ) )), sep="")" 1.0 1.0
37 0.0336289118387 -35.0627985262 -13.6213710434 -21.4414274828 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else car_(recurse_()) ) )), sep="")" 1.0 1.0
37 0.00481287571559 -37.0068899273 -15.5672811924 -21.4396087348 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else car_(recurse_()) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
37 0.00803180528332 -36.4947753746 -10.9823137138 -25.5124616608 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', cons_('a', [])) ), sep="")" 1.0 1.0
37 0.00916280911587 -36.3630318909 -10.9823137138 -25.3807181771 2 "lambda recurse_: flatten2str(cons_('a', ( car_(cons_('a', [])) if flip_() else [] )), sep="")" 1.0 1.0
37 0.00954901799626 -36.321746373 -14.8741340119 -21.4476123611 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
37 0.0616815252989 -34.4562002364 -12.9282238628 -21.5279763736 2 "lambda recurse_: flatten2str(cons_('a', ( ( cons_('a', []) if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 1.0
37 0.00891348551326 -36.3906193384 -14.8741340119 -21.5164853266 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
37 0.00803180528332 -36.4947753746 -10.9823137138 -25.5124616608 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(cons_('a', [])) )), sep="")" 1.0 1.0
37 9.5762505004e-26 -89.2783557064 -5.14458326661 -84.1337724397 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.5
37 0.0335613076533 -35.0648108491 -13.6213710434 -21.4434398057 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( recurse_() if flip_() else [] ) ))), sep="")" 1.0 1.0
37 0.00803180528332 -36.4947753746 -10.9823137138 -25.5124616608 2 "lambda recurse_: flatten2str(cons_('a', car_(( cons_('a', []) if flip_() else [] ))), sep="")" 1.0 1.0
37 0.00482792087038 -37.0037687812 -11.6754608943 -25.3283078869 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 0.333333333333 1.0
37 0.00474422075791 -37.0212574999 -15.5672811924 -21.4539763074 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
37 0.0130799841905 -36.0071015572 -9.72955074528 -26.277550812 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else recurse_() ))), sep="")" 1.0 1.0
37 9.5762505004e-26 -89.2783557064 -5.14458326661 -84.1337724397 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.5
37 0.00497564698189 -36.9736292858 -10.9823137138 -25.9913155721 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else cons_('a', []) ))), sep="")" 1.0 1.0
37 8.02132642557e-05 -41.1012510827 -7.78364059622 -33.3176104864 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.166666666667 1.0
37 0.0328511340518 -35.0861984281 -13.6213710434 -21.4648273847 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else car_(recurse_()) ) if flip_() else [] )), sep="")" 1.0 1.0
37 6.70337535028e-25 -87.3324455573 -3.19867311755 -84.1337724397 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.5
37 0.0469860878073 -34.7283331408 -9.72955074528 -24.9987823955 2 "lambda recurse_: flatten2str(cons_('a', car_(( recurse_() if flip_() else [] ))), sep="")" 1.0 1.0
37 0.0304625199933 -35.1616876193 -13.6213710434 -21.5403165759 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( recurse_() if flip_() else [] )) )), sep="")" 1.0 1.0
43 0.040415423798 -38.5082321103 -9.72955074528 -28.7786813651 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(recurse_()) )), sep="")" 1.0 1.0
43 0.0151341020753 -39.4904929866 -10.9823137138 -28.5081792728 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_([])) if flip_() else [] )), sep="")" 1.0 1.0
43 0.0359280065531 -38.6259264814 -13.6213710434 -25.0045554381 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( recurse_() if flip_() else [] ) if flip_() else [] ))), sep="")" 1.0 1.0
43 0.0179343660787 -39.3207248347 -9.03640356472 -30.28432127 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', []) )), sep="")" 1.0 1.0
43 2.97820165415e-31 -105.588506557 -7.09049341566 -98.4980131412 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep="")" 1.0 0.5
43 3.62592110054e-18 -75.4581116418 -7.78364059622 -67.6744710456 9 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.25 1.0
43 0.0667617929136 -38.0063126451 -12.9282238628 -25.0780887823 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else cons_('a', []) ) )), sep="")" 1.0 1.0
43 0.00508856753068 -40.5804472368 -15.5672811924 -25.0131660444 2 "lambda recurse_: flatten2str(( cons_('a', ( car_(recurse_()) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
43 0.0310811473727 -38.770842158 -13.6213710434 -25.1494711147 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else recurse_() ) if flip_() else [] ))), sep="")" 1.0 1.0
43 1.56574422436e-18 -76.2978587409 -7.78364059622 -68.5142181446 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.181818181818 1.0
43 0.0359947081203 -38.6240716686 -13.6213710434 -25.0027006252 2 "lambda recurse_: flatten2str(cons_('a', ( car_(( recurse_() if flip_() else [] )) if flip_() else [] )), sep="")" 1.0 1.0
43 0.0708887528993 -37.946331812 -12.9282238628 -25.0181079491 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', []) ) if flip_() else [] )), sep="")" 1.0 1.0
43 0.0358322211458 -38.628596079 -13.6213710434 -25.0072250356 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_(recurse_()) if flip_() else [] ) )), sep="")" 1.0 1.0
43 0.0080608857163 -40.1204201588 -14.8741340119 -25.2462861469 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
43 0.00508856753068 -40.5804472368 -15.5672811924 -25.0131660444 2 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
43 2.08474115791e-30 -103.642596408 -5.14458326661 -98.4980131412 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.5
43 0.00631599420863 -40.3643584202 -14.8741340119 -25.4902244083 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', car_([])) ) if flip_() else [] )), sep="")" 1.0 1.0
43 0.0687349914212 -37.9771851935 -9.72955074528 -28.2476344482 2 "lambda recurse_: flatten2str(cons_('a', ( car_(recurse_()) if flip_() else [] )), sep="")" 1.0 1.0
43 0.000357195830938 -43.2369147012 -7.78364059622 -35.453274105 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.2 1.0
43 0.00500030340087 -40.5979450089 -15.5672811924 -25.0306638164 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
43 0.00652202548697 -40.3322586144 -10.9823137138 -29.3499449006 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else car_([]) )), sep="")" 1.0 1.0
43 0.00119341950644 -42.0306208784 -10.9823137138 -31.0483071646 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_([])) )), sep="")" 1.0 1.0
43 0.00917689896706 -39.9907542552 -11.6754608943 -28.3152933609 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 0.4 1.0
43 0.00823587004228 -40.0989445898 -14.8741340119 -25.2248105779 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( cons_('a', []) if flip_() else [] ) ))), sep="")" 1.0 1.0
43 0.00492004286768 -40.6141263562 -15.5672811924 -25.0468451638 2 "lambda recurse_: flatten2str(( cons_('a', car_(( recurse_() if flip_() else [] ))) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
43 0.0282131000071 -38.8676571903 -13.6213710434 -25.2462861469 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( [] if flip_() else recurse_() )) )), sep="")" 1.0 1.0
43 2.97820165415e-31 -105.588506557 -7.09049341566 -98.4980131412 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep="")" 1.0 0.5
43 0.00561803904653 -40.4814609207 -10.9823137138 -29.4991472069 2 "lambda recurse_: flatten2str(( cons_('a', cons_('a', [])) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
43 0.00951232804075 -39.9548549538 -11.6754608943 -28.2793940594 4 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 0.4 1.0
43 0.0423859198056 -38.4606273726 -9.03640356472 -29.4242238079 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else [] )), sep="")" 1.0 1.0
43 0.000499724409421 -42.9011421133 -11.6754608943 -31.225681219 2 "lambda recurse_: flatten2str(( cons_('a', car_(recurse_())) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
43 0.00811873999946 -40.11326863 -10.9823137138 -29.1309549162 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', car_([])) if flip_() else [] )), sep="")" 1.0 1.0
43 0.0320763535456 -38.7393244906 -13.6213710434 -25.1179534472 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else recurse_() ) ))), sep="")" 1.0 1.0
43 0.0102512555792 -39.880043406 -14.8741340119 -25.0059093941 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else cons_('a', []) ) ))), sep="")" 1.0 1.0
43 0.00750846718923 -40.1914122573 -14.8741340119 -25.3172782454 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else cons_('a', []) ) if flip_() else [] ))), sep="")" 1.0 1.0
43 0.0641527070913 -38.0461773101 -12.9282238628 -25.1179534472 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else [] ) )), sep="")" 1.0 1.0
43 0.0337621937339 -38.6881019517 -13.6213710434 -25.0667309083 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else car_(recurse_()) ) )), sep="")" 1.0 1.0
43 0.00510928582304 -40.5763839658 -15.5672811924 -25.0091027734 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else car_(recurse_()) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
43 0.0107753007745 -39.8301870499 -10.9823137138 -28.8478733361 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', cons_('a', [])) ), sep="")" 1.0 1.0
43 0.00142106083204 -41.8560399421 -10.9823137138 -30.8737262283 2 "lambda recurse_: flatten2str(cons_('a', ( car_(cons_('a', [])) if flip_() else [] )), sep="")" 1.0 1.0
43 0.0097472939387 -39.9304538979 -14.8741340119 -25.056319886 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
43 0.0564262000141 -38.1745100097 -12.9282238628 -25.2462861469 2 "lambda recurse_: flatten2str(cons_('a', ( ( cons_('a', []) if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 1.0
43 0.00769679925949 -40.1666390378 -14.8741340119 -25.2925050259 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
43 0.0115472639423 -39.7609950788 -10.9823137138 -28.7786813651 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(cons_('a', [])) )), sep="")" 1.0 1.0
43 2.08474115791e-30 -103.642596408 -5.14458326661 -98.4980131412 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.5
43 0.0304166594654 -38.7924531326 -13.6213710434 -25.1710820892 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( recurse_() if flip_() else [] ) ))), sep="")" 1.0 1.0
43 0.0141577473133 -39.557181612 -10.9823137138 -28.5748678983 2 "lambda recurse_: flatten2str(cons_('a', car_(( cons_('a', []) if flip_() else [] ))), sep="")" 1.0 1.0
43 0.0058763201354 -40.4365128609 -11.6754608943 -28.7610519666 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 0.333333333333 1.0
43 0.00451295525911 -40.7004913926 -15.5672811924 -25.1332102002 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
43 0.0211929599028 -39.1537745531 -9.72955074528 -29.4242238079 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else recurse_() ))), sep="")" 1.0 1.0
43 2.08474115791e-30 -103.642596408 -5.14458326661 -98.4980131412 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.5
43 0.000999448818843 -42.2079949327 -10.9823137138 -31.225681219 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else cons_('a', []) ))), sep="")" 1.0 1.0
43 5.34851388298e-05 -45.1357950422 -7.78364059622 -37.3521544459 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.222222222222 1.0
43 0.0310811473727 -38.770842158 -13.6213710434 -25.1494711147 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else car_(recurse_()) ) if flip_() else [] )), sep="")" 1.0 1.0
43 1.45931881054e-29 -101.696686259 -3.19867311755 -98.4980131412 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.5
43 0.0327775836452 -38.7176987433 -9.72955074528 -28.988147998 2 "lambda recurse_: flatten2str(cons_('a', car_(( recurse_() if flip_() else [] ))), sep="")" 1.0 1.0
43 0.0354443764496 -38.6394789925 -13.6213710434 -25.0181079491 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( recurse_() if flip_() else [] )) )), sep="")" 1.0 1.0
49 0.00300380126454 -44.7224707061 -9.72955074528 -34.9929199608 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(recurse_()) )), sep="")" 1.0 1.0
49 0.00479199230842 -44.2554030251 -10.9823137138 -33.2730893113 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_([])) if flip_() else [] )), sep="")" 1.0 1.0
49 0.0428902616606 -42.0637044816 -13.6213710434 -28.4423334382 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( recurse_() if flip_() else [] ) if flip_() else [] ))), sep="")" 1.0 1.0
49 0.00969953369585 -43.5502714691 -9.03640356472 -34.5138679044 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', []) )), sep="")" 1.0 1.0
49 2.38736634501e-35 -118.634881446 -7.09049341566 -111.54438803 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep="")" 1.0 0.5
49 4.06921621188e-19 -81.2602603648 -7.78364059622 -73.4766197685 11 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.222222222222 1.0
49 0.0832593706228 -41.4003885983 -12.9282238628 -28.4721647354 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else cons_('a', []) ) )), sep="")" 1.0 1.0
49 0.00489443479897 -44.2342504765 -15.5672811924 -28.666969284 2 "lambda recurse_: flatten2str(( cons_('a', ( car_(recurse_()) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
49 0.04436102463 -42.0299880206 -13.6213710434 -28.4086169772 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else recurse_() ) if flip_() else [] ))), sep="")" 1.0 1.0
49 9.99683114113e-19 -80.3614426119 -7.78364059622 -72.5778020156 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.2 1.0
49 0.0442611171815 -42.0322427052 -13.6213710434 -28.4108716618 2 "lambda recurse_: flatten2str(cons_('a', ( car_(( recurse_() if flip_() else [] )) if flip_() else [] )), sep="")" 1.0 1.0
49 0.0822599318676 -41.4124651463 -12.9282238628 -28.4842412835 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', []) ) if flip_() else [] )), sep="")" 1.0 1.0
49 0.0416296853114 -42.0935357788 -13.6213710434 -28.4721647354 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_(recurse_()) if flip_() else [] ) )), sep="")" 1.0 1.0
49 0.00978886959795 -43.5411032959 -14.8741340119 -28.666969284 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
49 0.00634219102076 -43.9751249852 -15.5672811924 -28.4078437928 2 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
49 1.6711564415e-34 -116.688971297 -5.14458326661 -111.54438803 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.5
49 0.0125078499658 -43.2959928364 -14.8741340119 -28.4218588245 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', car_([])) ) if flip_() else [] )), sep="")" 1.0 1.0
49 0.0130144254357 -43.2562908897 -9.72955074528 -33.5267401444 2 "lambda recurse_: flatten2str(cons_('a', ( car_(recurse_()) if flip_() else [] )), sep="")" 1.0 1.0
49 6.15581759235e-07 -53.2152920681 -7.78364059622 -45.4316514719 12 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.181818181818 1.0
49 0.00607295615321 -44.0185037839 -15.5672811924 -28.4512225915 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
49 0.00286633806755 -44.7693140004 -10.9823137138 -33.7870002866 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else car_([]) )), sep="")" 1.0 1.0
49 0.0061352425982 -44.0082996601 -10.9823137138 -33.0259859464 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_([])) )), sep="")" 1.0 1.0
49 0.00664081215062 -43.929115013 -11.6754608943 -32.2536541187 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 0.333333333333 1.0
49 0.0126513499628 -43.2845853549 -14.8741340119 -28.410451343 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( cons_('a', []) if flip_() else [] ) ))), sep="")" 1.0 1.0
49 0.00617455729059 -44.0019120947 -15.5672811924 -28.4346309023 2 "lambda recurse_: flatten2str(( cons_('a', car_(( recurse_() if flip_() else [] ))) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
49 0.0443994641385 -42.0291218804 -13.6213710434 -28.407750837 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( [] if flip_() else recurse_() )) )), sep="")" 1.0 1.0
49 2.38736634501e-35 -118.634881446 -7.09049341566 -111.54438803 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep="")" 1.0 0.5
49 0.00152146096438 -45.4026782468 -10.9823137138 -34.420364533 2 "lambda recurse_: flatten2str(( cons_('a', cons_('a', [])) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
49 0.00401076216957 -44.4333679904 -11.6754608943 -32.757907096 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 0.4 1.0
49 0.00969953369585 -43.5502714691 -9.03640356472 -34.5138679044 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else [] )), sep="")" 1.0 1.0
49 0.00063049655392 -46.2835968701 -11.6754608943 -34.6081359757 2 "lambda recurse_: flatten2str(( cons_('a', car_(recurse_())) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
49 0.00114667177705 -45.6854856414 -10.9823137138 -34.7031719276 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', car_([])) if flip_() else [] )), sep="")" 1.0 1.0
49 0.0420902344587 -42.0825335277 -13.6213710434 -28.4611624843 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else recurse_() ) ))), sep="")" 1.0 1.0
49 0.0112590716174 -43.4011751111 -14.8741340119 -28.5270410992 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else cons_('a', []) ) ))), sep="")" 1.0 1.0
49 0.0126513499628 -43.2845853549 -14.8741340119 -28.410451343 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else cons_('a', []) ) if flip_() else [] ))), sep="")" 1.0 1.0
49 0.0864565263654 -41.3627075786 -12.9282238628 -28.4344837158 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else [] ) )), sep="")" 1.0 1.0
49 0.0400172877857 -42.1330377254 -13.6213710434 -28.5116666821 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else car_(recurse_()) ) )), sep="")" 1.0 1.0
49 0.00612863922778 -44.0093765412 -15.5672811924 -28.4420953488 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else car_(recurse_()) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
49 0.0114890670321 -43.3809533905 -10.9823137138 -32.3986396767 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', cons_('a', [])) ), sep="")" 1.0 1.0
49 0.0084438034701 -43.6889164256 -10.9823137138 -32.7066027119 2 "lambda recurse_: flatten2str(cons_('a', ( car_(cons_('a', [])) if flip_() else [] )), sep="")" 1.0 1.0
49 0.0100221746593 -43.5175491769 -14.8741340119 -28.643415165 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
49 0.0668447079041 -41.6199771442 -12.9282238628 -28.6917532813 2 "lambda recurse_: flatten2str(cons_('a', ( ( cons_('a', []) if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 1.0
49 0.0100221746593 -43.5175491769 -14.8741340119 -28.643415165 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
49 0.000778002820181 -46.0733744107 -10.9823137138 -35.091060697 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(cons_('a', [])) )), sep="")" 1.0 1.0
49 1.6711564415e-34 -116.688971297 -5.14458326661 -111.54438803 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.5
49 0.0416296853114 -42.0935357788 -13.6213710434 -28.4721647354 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( recurse_() if flip_() else [] ) ))), sep="")" 1.0 1.0
49 0.0133448138531 -43.2312214469 -10.9823137138 -32.2489077331 2 "lambda recurse_: flatten2str(cons_('a', car_(( cons_('a', []) if flip_() else [] ))), sep="")" 1.0 1.0
49 0.00290976734466 -44.7542761531 -11.6754608943 -33.0788152588 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 0.4 1.0
49 0.0040060834333 -44.4345352167 -15.5672811924 -28.8672540243 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
49 0.0214733490937 -42.7555366916 -9.72955074528 -33.0259859464 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else recurse_() ))), sep="")" 1.0 1.0
49 1.6711564415e-34 -116.688971297 -5.14458326661 -111.54438803 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.5
49 0.0084438034701 -43.6889164256 -10.9823137138 -32.7066027119 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else cons_('a', []) ))), sep="")" 1.0 1.0
49 9.04842603019e-07 -52.8300988295 -7.78364059622 -45.0464582333 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.2 1.0
49 0.0437774748804 -42.0432298679 -13.6213710434 -28.4218588245 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else car_(recurse_()) ) if flip_() else [] )), sep="")" 1.0 1.0
49 1.16980950905e-33 -114.743061148 -3.19867311755 -111.54438803 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.5
49 0.0100321832364 -43.5165510319 -9.72955074528 -33.7870002866 2 "lambda recurse_: flatten2str(cons_('a', car_(( recurse_() if flip_() else [] ))), sep="")" 1.0 1.0
49 0.0435241441054 -42.0490334598 -13.6213710434 -28.4276624164 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( recurse_() if flip_() else [] )) )), sep="")" 1.0 1.0
55 0.000750562085141 -49.577636106 -9.72955074528 -39.8480853607 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(recurse_()) )), sep="")" 1.0 1.0
55 0.00021444631004 -50.8303990745 -10.9823137138 -39.8480853607 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_([])) if flip_() else [] )), sep="")" 1.0 1.0
55 0.0374963454717 -45.6664597256 -13.6213710434 -32.0450886822 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( recurse_() if flip_() else [] ) if flip_() else [] ))), sep="")" 1.0 1.0
55 0.0221833553847 -46.1913609495 -9.03640356472 -37.1549573848 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', []) )), sep="")" 1.0 1.0
55 1.85759591423e-39 -131.564483415 -7.09049341566 -124.473989999 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep="")" 1.0 0.5
55 6.72688769553e-24 -95.7388775683 -7.78364059622 -87.9552369721 9 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.181818181818 1.0
55 0.0889143802506 -44.8030293127 -12.9282238628 -31.8748054499 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else cons_('a', []) ) )), sep="")" 1.0 1.0
55 0.00643187938685 -47.4294364201 -15.5672811924 -31.8621552276 2 "lambda recurse_: flatten2str(( cons_('a', ( car_(recurse_()) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
55 0.0479284708915 -45.42099349 -13.6213710434 -31.7996224466 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else recurse_() ) if flip_() else [] ))), sep="")" 1.0 1.0
55 1.4215848732e-23 -94.9906327025 -7.78364059622 -87.2069921063 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.222222222222 1.0
55 0.0479284708915 -45.42099349 -13.6213710434 -31.7996224466 2 "lambda recurse_: flatten2str(cons_('a', ( car_(( recurse_() if flip_() else [] )) if flip_() else [] )), sep="")" 1.0 1.0
55 0.095856941783 -44.7278463095 -12.9282238628 -31.7996224466 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', []) ) if flip_() else [] )), sep="")" 1.0 1.0
55 0.0355845321174 -45.7187921474 -13.6213710434 -32.097421104 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_(recurse_()) if flip_() else [] ) )), sep="")" 1.0 1.0
55 0.0123394977743 -46.7778978811 -14.8741340119 -31.9037638692 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
55 0.00548740753497 -47.5882472716 -15.5672811924 -32.0209660791 2 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
55 1.30031713996e-38 -129.618573266 -5.14458326661 -124.473989999 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.5
55 0.0130118856786 -46.724839977 -14.8741340119 -31.8507059651 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', car_([])) ) if flip_() else [] )), sep="")" 1.0 1.0
55 0.00836779298948 -47.1663130311 -9.72955074528 -37.4367622858 2 "lambda recurse_: flatten2str(cons_('a', ( car_(recurse_()) if flip_() else [] )), sep="")" 1.0 1.0
55 4.7048426331e-07 -56.952451246 -7.78364059622 -49.1688106497 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.222222222222 1.0
55 0.005965968384 -47.504631813 -15.5672811924 -31.9373506206 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
55 0.00179042300309 -48.7082512932 -10.9823137138 -37.7259375794 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else car_([]) )), sep="")" 1.0 1.0
55 0.00380851829175 -47.953462986 -10.9823137138 -36.9711492723 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_([])) )), sep="")" 1.0 1.0
55 0.00701690130173 -47.3423814892 -11.6754608943 -35.6669205948 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 0.333333333333 1.0
55 0.0119278250081 -46.8118292931 -14.8741340119 -31.9376952812 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( cons_('a', []) if flip_() else [] ) ))), sep="")" 1.0 1.0
55 0.00657304802841 -47.4077255436 -15.5672811924 -31.8404443511 2 "lambda recurse_: flatten2str(( cons_('a', car_(( recurse_() if flip_() else [] ))) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
55 0.0453110750371 -45.4771517151 -13.6213710434 -31.8557806717 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( [] if flip_() else recurse_() )) )), sep="")" 1.0 1.0
55 1.85759591423e-39 -131.564483415 -7.09049341566 -124.473989999 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep="")" 1.0 0.5
55 0.0002404314454 -50.7160234801 -10.9823137138 -39.7337097663 2 "lambda recurse_: flatten2str(( cons_('a', cons_('a', [])) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
55 0.00581227806268 -47.5307306123 -11.6754608943 -35.855269718 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 0.333333333333 1.0
55 0.00761276475149 -47.2608767888 -9.03640356472 -38.2244732241 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else [] )), sep="")" 1.0 1.0
55 0.000399145660944 -50.2091320634 -11.6754608943 -38.5336711691 2 "lambda recurse_: flatten2str(( cons_('a', car_(recurse_())) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
55 0.00594573468275 -47.5080290973 -10.9823137138 -36.5257153835 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', car_([])) if flip_() else [] )), sep="")" 1.0 1.0
55 0.0464313429204 -45.4527284746 -13.6213710434 -31.8313574312 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else recurse_() ) ))), sep="")" 1.0 1.0
55 0.0129460214392 -46.7299146836 -14.8741340119 -31.8557806717 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else cons_('a', []) ) ))), sep="")" 1.0 1.0
55 0.0136128730272 -46.6796873086 -14.8741340119 -31.8055532967 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else cons_('a', []) ) if flip_() else [] ))), sep="")" 1.0 1.0
55 0.0958680849929 -44.7277300679 -12.9282238628 -31.7995062051 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else [] ) )), sep="")" 1.0 1.0
55 0.0479340424964 -45.4208772484 -13.6213710434 -31.7995062051 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else car_(recurse_()) ) )), sep="")" 1.0 1.0
55 0.00596391250407 -47.5049764736 -15.5672811924 -31.9376952812 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else car_(recurse_()) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
55 0.000191097868276 -50.9456727825 -10.9823137138 -39.9633590688 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', cons_('a', [])) ), sep="")" 1.0 1.0
55 0.00108753782164 -49.2067869378 -10.9823137138 -38.2244732241 2 "lambda recurse_: flatten2str(cons_('a', ( car_(cons_('a', [])) if flip_() else [] )), sep="")" 1.0 1.0
55 0.0123394977743 -46.7778978811 -14.8741340119 -31.9037638692 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
55 0.0731060899509 -44.9987915266 -12.9282238628 -32.0705676638 2 "lambda recurse_: flatten2str(cons_('a', ( ( cons_('a', []) if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 1.0
55 0.0119278250081 -46.8118292931 -14.8741340119 -31.9376952812 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
55 0.000981862762948 -49.3090069327 -10.9823137138 -38.3266932189 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(cons_('a', [])) )), sep="")" 1.0 1.0
55 1.30031713996e-38 -129.618573266 -5.14458326661 -124.473989999 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.5
55 0.0473852848211 -45.432391466 -13.6213710434 -31.8110204227 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( recurse_() if flip_() else [] ) ))), sep="")" 1.0 1.0
55 0.000468748188187 -50.0483927666 -10.9823137138 -39.0660790529 2 "lambda recurse_: flatten2str(cons_('a', car_(( cons_('a', []) if flip_() else [] ))), sep="")" 1.0 1.0
55 0.00293869969316 -48.2127359975 -11.6754608943 -36.5372751031 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 0.4 1.0
55 0.00657304802841 -47.4077255436 -15.5672811924 -31.8404443511 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
55 0.00203525108247 -48.5800840064 -9.72955074528 -38.8505332611 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else recurse_() ))), sep="")" 1.0 1.0
55 1.30031713996e-38 -129.618573266 -5.14458326661 -124.473989999 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.5
55 0.00120357290653 -49.1054086446 -10.9823137138 -38.1230949308 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else cons_('a', []) ))), sep="")" 1.0 1.0
55 1.56696929225e-07 -58.051900205 -7.78364059622 -50.2682596088 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.2 1.0
55 0.0438450507821 -45.5100413543 -13.6213710434 -31.8886703109 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else car_(recurse_()) ) if flip_() else [] )), sep="")" 1.0 1.0
55 9.10221997973e-38 -127.672663117 -3.19867311755 -124.473989999 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.5
55 0.00182810362278 -48.6874240419 -9.72955074528 -38.9578732966 2 "lambda recurse_: flatten2str(cons_('a', car_(( recurse_() if flip_() else [] ))), sep="")" 1.0 1.0
55 0.0464313429204 -45.4527284746 -13.6213710434 -31.8313574312 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( recurse_() if flip_() else [] )) )), sep="")" 1.0 1.0
61 0.0134687567993 -50.3630833092 -9.72955074528 -40.6335325639 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(recurse_()) )), sep="")" 1.0 1.0
61 0.00192501451498 -52.3085224933 -10.9823137138 -41.3262087796 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_([])) if flip_() else [] )), sep="")" 1.0 1.0
61 0.0467471781918 -49.1187021069 -13.6213710434 -35.4973310635 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( recurse_() if flip_() else [] ) if flip_() else [] ))), sep="")" 1.0 1.0
61 0.00128788132304 -52.7104575183 -9.03640356472 -43.6740539536 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', []) )), sep="")" 1.0 1.0
61 1.55241216078e-44 -146.92963486 -7.09049341566 -139.839141444 1 "lambda recurse_: flatten2str(cons_('a', cdr_(car_([]))), sep="")" 1.0 0.5
61 1.16399498402e-26 -105.7710551 -7.78364059622 -97.9874145039 9 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.181818181818 1.0
61 0.0939415024145 -48.4207837275 -12.9282238628 -35.4925598646 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else cons_('a', []) ) )), sep="")" 1.0 1.0
61 0.00651186814971 -51.0898296201 -15.5672811924 -35.5225484276 2 "lambda recurse_: flatten2str(( cons_('a', ( car_(recurse_()) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
61 0.0432862657036 -49.1956206059 -13.6213710434 -35.5742495625 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else recurse_() ) if flip_() else [] ))), sep="")" 1.0 1.0
61 6.74560955316e-24 -99.4088510975 -7.78364059622 -91.6252105012 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.2 1.0
61 0.0473702565812 -49.1054614678 -13.6213710434 -35.4840904244 2 "lambda recurse_: flatten2str(cons_('a', ( car_(( recurse_() if flip_() else [] )) if flip_() else [] )), sep="")" 1.0 1.0
61 0.0901766552644 -48.4616854185 -12.9282238628 -35.5334615557 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', []) ) if flip_() else [] )), sep="")" 1.0 1.0
61 0.0375240730262 -49.3384733269 -13.6213710434 -35.7171022835 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( car_(recurse_()) if flip_() else [] ) )), sep="")" 1.0 1.0
61 0.0117309900144 -50.501221942 -14.8741340119 -35.6270879301 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
61 0.00608408938755 -51.1577789348 -15.5672811924 -35.5904977423 2 "lambda recurse_: flatten2str(( car_(recurse_()) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
61 1.08668851255e-43 -144.983724711 -5.14458326661 -139.839141444 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.5
61 0.0130237362994 -50.3966824395 -14.8741340119 -35.5225484276 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else cons_('a', car_([])) ) if flip_() else [] )), sep="")" 1.0 1.0
61 0.000206764179703 -54.5396323649 -9.72955074528 -44.8100816196 2 "lambda recurse_: flatten2str(cons_('a', ( car_(recurse_()) if flip_() else [] )), sep="")" 1.0 1.0
61 6.73186973699e-08 -62.5695285399 -7.78364059622 -54.7858879437 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.2 1.0
61 0.00620281793547 -51.1384523068 -15.5672811924 -35.5711711143 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
61 0.000112158496809 -55.1512982593 -10.9823137138 -44.1689845455 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else car_([]) )), sep="")" 1.0 1.0
61 0.00235683519348 -52.1061363019 -10.9823137138 -41.1238225882 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else cons_('a', cdr_([])) )), sep="")" 1.0 1.0
61 0.00119046373157 -52.7891130797 -11.6754608943 -41.1136521853 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 0.333333333333 1.0
61 0.0130237362994 -50.3966824395 -14.8741340119 -35.5225484276 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( cons_('a', []) if flip_() else [] ) ))), sep="")" 1.0 1.0
61 0.00463446638984 -51.4299349351 -15.5672811924 -35.8626537427 2 "lambda recurse_: flatten2str(( cons_('a', car_(( recurse_() if flip_() else [] ))) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
61 0.0464145180178 -49.1258437027 -13.6213710434 -35.5044726593 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( [] if flip_() else recurse_() )) )), sep="")" 1.0 1.0
61 1.55241216078e-44 -146.92963486 -7.09049341566 -139.839141444 1 "lambda recurse_: flatten2str(cons_('a', cdr_(cdr_([]))), sep="")" 1.0 0.5
61 0.00213096918895 -52.2068791068 -10.9823137138 -41.224565393 2 "lambda recurse_: flatten2str(( cons_('a', cons_('a', [])) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
61 0.00564263443666 -51.2331049461 -11.6754608943 -39.5576440518 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 0.333333333333 1.0
61 0.0392430859473 -49.2936807268 -9.03640356472 -40.2572771621 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', []) if flip_() else [] )), sep="")" 1.0 1.0
61 0.000571190511591 -53.5234884807 -11.6754608943 -41.8480275864 2 "lambda recurse_: flatten2str(( cons_('a', car_(recurse_())) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
61 0.000662562557228 -53.3750963009 -10.9823137138 -42.3927825871 2 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', car_([])) if flip_() else [] )), sep="")" 1.0 1.0
61 0.0469707512072 -49.113930908 -13.6213710434 -35.4925598646 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else recurse_() ) ))), sep="")" 1.0 1.0
61 0.0132612908622 -50.3786066712 -14.8741340119 -35.5044726593 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( [] if flip_() else cons_('a', []) ) ))), sep="")" 1.0 1.0
61 0.010444839725 -50.6173479511 -14.8741340119 -35.7432139392 2 "lambda recurse_: flatten2str(cons_('a', car_(( ( [] if flip_() else cons_('a', []) ) if flip_() else [] ))), sep="")" 1.0 1.0
61 0.0944863558439 -48.4150005598 -12.9282238628 -35.486776697 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( cons_('a', []) if flip_() else [] ) )), sep="")" 1.0 1.0
61 0.0425886257129 -49.2118687857 -13.6213710434 -35.5904977423 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else car_(recurse_()) ) )), sep="")" 1.0 1.0
61 0.00536058186089 -51.284383476 -15.5672811924 -35.7171022835 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else car_(recurse_()) )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
61 0.000472522969797 -53.7131249212 -10.9823137138 -42.7308112074 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', cons_('a', [])) ), sep="")" 1.0 1.0
61 0.00114238102318 -52.8303413002 -10.9823137138 -41.8480275864 2 "lambda recurse_: flatten2str(cons_('a', ( car_(cons_('a', [])) if flip_() else [] )), sep="")" 1.0 1.0
61 0.0135343590232 -50.3582244363 -14.8741340119 -35.4840904244 2 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', ( [] if flip_() else cons_('a', []) )) ), sep="")" 1.0 1.0
61 0.0890735198285 -48.4739939071 -12.9282238628 -35.5457700442 2 "lambda recurse_: flatten2str(cons_('a', ( ( cons_('a', []) if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 1.0
61 0.010444839725 -50.6173479511 -14.8741340119 -35.7432139392 2 "lambda recurse_: flatten2str(( cons_('a', ( cons_('a', []) if flip_() else [] )) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
61 0.000112158496809 -55.1512982593 -10.9823137138 -44.1689845455 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(cons_('a', [])) )), sep="")" 1.0 1.0
61 1.08668851255e-43 -144.983724711 -5.14458326661 -139.839141444 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.5
61 0.0474890732664 -49.1029563532 -13.6213710434 -35.4815853098 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else ( recurse_() if flip_() else [] ) ))), sep="")" 1.0 1.0
61 0.000921259560357 -53.0454694592 -10.9823137138 -42.0631557455 2 "lambda recurse_: flatten2str(cons_('a', car_(( cons_('a', []) if flip_() else [] ))), sep="")" 1.0 1.0
61 0.00502969512484 -51.3480966304 -11.6754608943 -39.672635736 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 0.285714285714 1.0
61 0.00536058186089 -51.284383476 -15.5672811924 -35.7171022835 2 "lambda recurse_: flatten2str(( cons_('a', ( [] if flip_() else cons_('a', []) )) if flip_() else car_(recurse_()) ), sep="")" 1.0 1.0
61 0.000181329955411 -54.6708929505 -9.72955074528 -44.9413422052 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else recurse_() ))), sep="")" 1.0 1.0
61 1.08668851255e-43 -144.983724711 -5.14458326661 -139.839141444 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.5
61 0.00156664217487 -52.5145214144 -10.9823137138 -41.5322077007 2 "lambda recurse_: flatten2str(cons_('a', car_(( [] if flip_() else cons_('a', []) ))), sep="")" 1.0 1.0
61 5.79627817779e-07 -60.4165803552 -7.78364059622 -52.6329397589 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.181818181818 1.0
61 0.0375240730262 -49.3384733269 -13.6213710434 -35.7171022835 2 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else car_(recurse_()) ) if flip_() else [] )), sep="")" 1.0 1.0
61 7.60681958783e-43 -143.037814562 -3.19867311755 -139.839141444 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.5
61 0.00103992822367 -52.9243043062 -9.72955074528 -43.1947535609 2 "lambda recurse_: flatten2str(cons_('a', car_(( recurse_() if flip_() else [] ))), sep="")" 1.0 1.0
61 0.0375240730262 -49.3384733269 -13.6213710434 -35.7171022835 2 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else car_(( recurse_() if flip_() else [] )) )), sep="")" 1.0 1.0
