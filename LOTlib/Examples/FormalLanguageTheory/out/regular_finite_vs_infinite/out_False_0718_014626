1 0.0214502039499 -9.7946487725 -1.2527629685 -8.54188580401 1 "lambda recurse_: flatten2str([], sep="")" 0.0 0.0
1 0.0274681259791 -9.54735664884 -7.78364059622 -1.76371605262 11 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.8 0.888888888889
1 0.00106475136121 -12.7976416177 -11.6754608943 -1.1221807234 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep="")" 0.75 1.0
1 0.00749704503088 -10.845873979 -9.72955074528 -1.11632323368 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep="")" 0.692307692308 1.0
1 0.00107382456905 -12.7891562868 -11.6754608943 -1.11369539243 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep="")" 0.818181818182 1.0
1 0.0010806522762 -12.7828181077 -11.6754608943 -1.10735721338 10 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.818181818182 1.0
1 0.00109108212454 -12.7732129474 -11.6754608943 -1.09775205308 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep="")" 0.8 0.888888888889
1 0.074583726414 -8.54846058715 -5.14458326661 -3.40387732055 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.111111111111
1 0.00106764214967 -12.7949303074 -11.6754608943 -1.11946941311 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 1.0 0.666666666667
1 0.00735616372164 -10.8648443626 -9.72955074528 -1.13529361733 11 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep="")" 0.9 1.0
1 0.00107490005513 -12.7881552407 -11.6754608943 -1.11269434637 12 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep="")" 0.818181818182 1.0
1 0.0524726821252 -8.90009023228 -7.78364059622 -1.11644963606 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.75 1.0
1 0.00108035521321 -12.7830930378 -11.6754608943 -1.10763214347 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep="")" 0.9 1.0
1 0.00107497687632 -12.788083775 -11.6754608943 -1.11262288071 12 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 1.0 1.0
1 0.00106375237146 -12.7985802957 -11.6754608943 -1.12311940141 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep="")" 0.818181818182 1.0
1 0.00109295749426 -12.7714956066 -11.6754608943 -1.09603471227 10 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep="")" 0.75 1.0
1 0.0010712947696 -12.791514944 -11.6754608943 -1.11605404967 10 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep="")" 1.0 1.0
1 0.00105599156692 -12.8059027266 -11.6754608943 -1.13044183227 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep="")" 1.0 0.777777777778
1 0.0106548180591 -10.4943707362 -7.09049341566 -3.40387732055 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep="")" 1.0 0.111111111111
1 0.00104172660365 -12.8195033936 -11.6754608943 -1.14404249928 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 0.666666666667
1 0.00765539143551 -10.8249727636 -9.72955074528 -1.09542201829 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep="")" 0.9 1.0
1 0.00733435443069 -10.8678135304 -9.72955074528 -1.13826278516 12 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep="")" 0.888888888889 0.888888888889
1 0.00749680414308 -10.8459061105 -9.72955074528 -1.11635536523 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep="")" 0.75 1.0
1 0.00106570810065 -12.7967434645 -11.6754608943 -1.12128257018 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep="")" 0.727272727273 0.888888888889
1 0.00107065534275 -12.7921119951 -11.6754608943 -1.1166511008 12 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep="")" 0.727272727273 0.888888888889
1 0.00108773457482 -12.7762857643 -11.6754608943 -1.10082486995 10 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep="")" 0.818181818182 1.0
1 0.074583726414 -8.54846058715 -5.14458326661 -3.40387732055 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.111111111111
1 0.024127715638 -9.67702171979 -7.78364059622 -1.89338112357 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.818181818182 1.0
1 0.00101715518957 -12.8433732251 -11.6754608943 -1.16791233078 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 1.0 0.666666666667
1 0.00105793143432 -12.8040674015 -11.6754608943 -1.12860650719 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep="")" 0.818181818182 1.0
1 0.00745400340691 -10.8516316679 -9.72955074528 -1.12208092259 10 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep="")" 0.9 1.0
1 0.074583726414 -8.54846058715 -5.14458326661 -3.40387732055 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.111111111111
1 0.0528782462213 -8.89239089624 -7.78364059622 -1.10875030002 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.818181818182 1.0
1 0.0010840896454 -12.7796423277 -11.6754608943 -1.10418143334 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep="")" 0.818181818182 1.0
1 0.522086084898 -6.6025504381 -3.19867311755 -3.40387732055 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.111111111111
7 4.49132840571e-21 -61.0500599587 -1.2527629685 -59.7972969902 1 "lambda recurse_: flatten2str([], sep="")" 0.0 0.0
7 0.0018291855366 -20.5018059957 -7.78364059622 -12.7181653995 12 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.9 1.0
7 0.00721459304286 -19.1295710152 -11.6754608943 -7.45411012088 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep="")" 0.9 1.0
7 0.0334129193532 -17.5967341694 -9.72955074528 -7.86718342408 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep="")" 0.75 1.0
7 0.00592063823349 -19.3272325487 -11.6754608943 -7.65177165441 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep="")" 0.888888888889 0.888888888889
7 0.00632561548717 -19.2610694614 -11.6754608943 -7.5856085671 11 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.9 1.0
7 0.00550475682916 -19.4000642051 -11.6754608943 -7.72460331073 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep="")" 0.818181818182 1.0
7 4.01385230693e-06 -26.6236806253 -5.14458326661 -21.4790973587 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.111111111111
7 0.00563917688592 -19.3759386889 -11.6754608943 -7.70047779456 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 1.0 0.555555555556
7 0.0446921654691 -17.3058785844 -9.72955074528 -7.57632783915 11 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep="")" 0.9 1.0
7 0.00660979714171 -19.2171238377 -11.6754608943 -7.54166294342 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep="")" 1.0 1.0
7 0.348489922481 -15.2520674886 -7.78364059622 -7.46842689237 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.818181818182 1.0
7 0.00670404641455 -19.202965515 -11.6754608943 -7.52750462064 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep="")" 0.818181818182 1.0
7 0.00658235607855 -19.2212840536 -11.6754608943 -7.54582315931 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.818181818182 1.0
7 0.00649161932325 -19.2351647914 -11.6754608943 -7.55970389709 8 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep="")" 0.818181818182 1.0
7 0.00604949613967 -19.3057018157 -11.6754608943 -7.63024092133 12 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep="")" 0.9 1.0
7 0.0064318722111 -19.2444111375 -11.6754608943 -7.5689502432 10 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep="")" 0.818181818182 1.0
7 0.00715113304795 -19.1384059891 -11.6754608943 -7.46294509481 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep="")" 1.0 0.555555555556
7 5.73407472418e-07 -28.5695907744 -7.09049341566 -21.4790973587 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep="")" 1.0 0.111111111111
7 0.00666972549433 -19.2080980977 -11.6754608943 -7.53263720339 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 0.666666666667
7 0.0470964867876 -17.2534783938 -9.72955074528 -7.52392764851 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep="")" 1.0 0.888888888889
7 0.045652954861 -17.284608468 -9.72955074528 -7.5550577227 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep="")" 0.818181818182 1.0
7 0.0461881210627 -17.2729541564 -9.72955074528 -7.54340341109 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep="")" 0.9 1.0
7 0.00705442027432 -19.1520223919 -11.6754608943 -7.47656149759 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep="")" 0.8 0.888888888889
7 0.00582275330052 -19.343903576 -11.6754608943 -7.66844268163 10 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep="")" 0.9 1.0
7 0.00655276324938 -19.2257899707 -11.6754608943 -7.55032907638 8 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep="")" 0.8 0.888888888889
7 4.01385230693e-06 -26.6236806253 -5.14458326661 -21.4790973587 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.111111111111
7 0.00368021628356 -19.8027052784 -7.78364059622 -12.0190646822 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.727272727273 0.888888888889
7 0.0059841744045 -19.3165584161 -11.6754608943 -7.64109752182 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 1.0 0.666666666667
7 0.00610642670991 -19.296335026 -11.6754608943 -7.62087413163 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep="")" 1.0 1.0
7 0.0442788533703 -17.315169589 -9.72955074528 -7.58561884373 10 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep="")" 0.8 0.888888888889
7 4.01385230693e-06 -26.6236806253 -5.14458326661 -21.4790973587 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.111111111111
7 0.264787548857 -15.5267489995 -7.78364059622 -7.74310840329 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.9 1.0
7 0.00503554973907 -19.4891540978 -11.6754608943 -7.81369320346 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep="")" 0.818181818182 1.0
7 2.80969661485e-05 -24.6777704763 -3.19867311755 -21.4790973587 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.111111111111
13 2.02670855468e-40 -112.307420805 -1.2527629685 -111.054657836 1 "lambda recurse_: flatten2str([], sep="")" 0.0 0.0
13 2.95621978079e-05 -31.3394442742 -7.78364059622 -23.555803678 11 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.9 1.0
13 0.00701122647594 -25.8706727927 -11.6754608943 -14.1952118983 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep="")" 0.9 1.0
13 0.0600260490606 -23.7234068203 -9.72955074528 -13.993856075 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep="")" 1.0 1.0
13 0.00736852237705 -25.8209682448 -11.6754608943 -14.1455073504 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep="")" 0.9 1.0
13 0.00843007776775 -25.6863794422 -11.6754608943 -14.0109185479 11 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.692307692308 1.0
13 0.00707115700573 -25.8621613227 -11.6754608943 -14.1867004284 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep="")" 0.818181818182 1.0
13 1.16581762503e-11 -46.0854435183 -5.14458326661 -40.9408602517 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.111111111111
13 0.00540898094689 -26.1301247289 -11.6754608943 -14.4546638346 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 1.0 0.666666666667
13 0.0395952630053 -24.1394759493 -9.72955074528 -14.409925204 10 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep="")" 1.0 0.888888888889
13 0.0075978561153 -25.7903193219 -11.6754608943 -14.1148584276 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep="")" 1.0 1.0
13 0.386062257547 -21.8621867939 -7.78364059622 -14.0785461976 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.888888888889 0.888888888889
13 0.00692750596882 -25.8826855799 -11.6754608943 -14.2072246856 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep="")" 1.0 1.0
13 0.00697318124925 -25.8761138984 -11.6754608943 -14.2006530041 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.75 1.0
13 0.00897797742135 -25.6234108138 -11.6754608943 -13.9479499195 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep="")" 0.818181818182 1.0
13 0.00670940493541 -25.9146751755 -11.6754608943 -14.2392142812 9 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep="")" 0.818181818182 1.0
13 0.00522580468788 -26.1645766461 -11.6754608943 -14.4891157517 10 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep="")" 0.9 1.0
13 0.00707456876943 -25.8616789489 -11.6754608943 -14.1862180546 7 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep="")" 1.0 0.777777777778
13 1.66545375005e-12 -48.0313536674 -7.09049341566 -40.9408602517 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep="")" 1.0 0.111111111111
13 0.00923327500846 -25.5953716316 -11.6754608943 -13.9199107372 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 0.555555555556
13 0.0483939643228 -23.9388103374 -9.72955074528 -14.2092595922 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep="")" 0.9 1.0
13 0.0382286279851 -24.1746007807 -9.72955074528 -14.4450500354 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
13 0.050317122038 -23.8998400217 -9.72955074528 -14.1702892765 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep="")" 0.8 0.888888888889
13 0.00797190794384 -25.7422615845 -11.6754608943 -14.0668006901 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep="")" 0.818181818182 1.0
13 0.0085543916574 -25.6717406441 -11.6754608943 -13.9962797497 9 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep="")" 0.8 0.888888888889
13 0.00849748411632 -25.6784153059 -11.6754608943 -14.0029544116 10 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep="")" 0.9 1.0
13 1.16581762503e-11 -46.0854435183 -5.14458326661 -40.9408602517 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.111111111111
13 5.95357290623e-05 -30.6393640975 -7.78364059622 -22.8557235013 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.7 0.777777777778
13 0.0075694827763 -25.7940606996 -11.6754608943 -14.1185998053 7 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 1.0 0.666666666667
13 0.00772885773018 -25.7732243586 -11.6754608943 -14.0977634643 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep="")" 0.9 1.0
13 0.0517911748137 -23.8709656749 -9.72955074528 -14.1414149297 11 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep="")" 0.75 1.0
13 1.16581762503e-11 -46.0854435183 -5.14458326661 -40.9408602517 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.111111111111
13 0.185798562845 -22.5935223479 -7.78364059622 -14.8098817517 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.75 1.0
13 0.00536621738458 -26.1380621766 -11.6754608943 -14.4626012823 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep="")" 0.818181818182 1.0
13 8.16072337523e-11 -44.1395333693 -3.19867311755 -40.9408602517 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.111111111111
19 7.03672591294e-60 -163.563416729 -1.2527629685 -162.31065376 1 "lambda recurse_: flatten2str([], sep="")" 0.0 0.0
19 8.2804508409e-07 -41.3636523767 -7.78364059622 -33.5800117805 11 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.888888888889 0.888888888889
19 0.00722706430584 -32.2893765108 -11.6754608943 -20.6139156164 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep="")" 0.692307692308 1.0
19 0.0462041419762 -30.4341399738 -9.72955074528 -20.7045892285 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep="")" 0.9 1.0
19 0.00515337236583 -32.6275580924 -11.6754608943 -20.952097198 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep="")" 0.8 0.888888888889
19 0.00731720611624 -32.276980844 -11.6754608943 -20.6015199497 12 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.818181818182 1.0
19 0.00617444592967 -32.4467902705 -11.6754608943 -20.7713293762 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep="")" 0.9 1.0
19 6.30723291475e-17 -64.6617036664 -5.14458326661 -59.5171203998 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.111111111111
19 0.00729964401994 -32.2793838385 -11.6754608943 -20.6039229441 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 1.0 0.666666666667
19 0.0401293065526 -30.5751025169 -9.72955074528 -20.8455517717 12 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep="")" 0.8 0.888888888889
19 0.00653239593518 -32.3904356331 -11.6754608943 -20.7149747387 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep="")" 1.0 1.0
19 0.36987846235 -28.3540349495 -7.78364059622 -20.5703943533 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.9 1.0
19 0.00425119073238 -32.820010305 -11.6754608943 -21.1445494107 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep="")" 0.75 1.0
19 0.00347997865727 -33.0201832602 -11.6754608943 -21.3447223659 12 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.692307692308 1.0
19 0.00705977872571 -32.312795712 -11.6754608943 -20.6373348177 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep="")" 1.0 1.0
19 0.00739228115811 -32.266773052 -11.6754608943 -20.5913121576 9 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep="")" 0.818181818182 1.0
19 0.00517289321788 -32.6237772724 -11.6754608943 -20.9483163781 11 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep="")" 0.9 1.0
19 0.00467793902444 -32.7243517875 -11.6754608943 -21.0488908932 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep="")" 1.0 0.555555555556
19 9.01033273536e-18 -66.6076138154 -7.09049341566 -59.5171203998 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep="")" 1.0 0.111111111111
19 0.00959114041582 -32.006369622 -11.6754608943 -20.3309087277 8 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 0.666666666667
19 0.0430165017033 -30.5056256184 -9.72955074528 -20.7760748731 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep="")" 1.0 0.888888888889
19 0.0290670632858 -30.8976037337 -9.72955074528 -21.1680529885 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
19 0.0661243873216 -30.0756717964 -9.72955074528 -20.3461210511 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep="")" 0.9 1.0
19 0.00801751152659 -32.1855813308 -11.6754608943 -20.5101204364 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep="")" 1.0 1.0
19 0.00760292004925 -32.2386770305 -11.6754608943 -20.5632161362 11 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep="")" 0.9 1.0
19 0.00713679559395 -32.3019455418 -11.6754608943 -20.6264846475 10 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep="")" 0.8 0.888888888889
19 6.30723291475e-17 -64.6617036664 -5.14458326661 -59.5171203998 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.111111111111
19 5.75856154999e-07 -41.7268620804 -7.78364059622 -33.9432214842 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.888888888889 0.888888888889
19 0.0106337023873 -31.9031809932 -11.6754608943 -20.2277200989 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 1.0 0.666666666667
19 0.00618518337208 -32.4450527678 -11.6754608943 -20.7695918734 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep="")" 0.818181818182 1.0
19 0.0228066660137 -31.1401565588 -9.72955074528 -21.4106058135 11 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep="")" 0.727272727273 0.888888888889
19 6.30723291475e-17 -64.6617036664 -5.14458326661 -59.5171203998 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.111111111111
19 0.256093121809 -28.7216682856 -7.78364059622 -20.9380276894 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.818181818182 1.0
19 0.00577350155339 -32.5139306696 -11.6754608943 -20.8384697752 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep="")" 0.8 0.888888888889
19 4.41506304033e-16 -62.7157935173 -3.19867311755 -59.5171203998 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.111111111111
25 3.8707773094e-79 -214.819412653 -1.2527629685 -213.566649685 1 "lambda recurse_: flatten2str([], sep="")" 0.0 0.0
25 9.1371365133e-08 -50.476979348 -7.78364059622 -42.6933387518 9 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.818181818182 1.0
25 0.00713213102402 -39.2117908566 -11.6754608943 -27.5363299622 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep="")" 0.8 0.888888888889
25 0.0453475144652 -37.3620455605 -9.72955074528 -27.6324948152 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep="")" 0.8 0.888888888889
25 0.00667593126375 -39.277892218 -11.6754608943 -27.6024313236 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep="")" 0.9 1.0
25 0.00989137791183 -38.884737468 -11.6754608943 -27.2092765737 11 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.75 1.0
25 0.00533988410507 -39.5011969781 -11.6754608943 -27.8257360838 13 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep="")" 0.9 1.0
25 4.00394713001e-22 -83.5382370375 -5.14458326661 -78.3936537709 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.111111111111
25 0.00330670744672 -39.9804479625 -11.6754608943 -28.3049870681 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 1.0 0.777777777778
25 0.0270202804998 -37.879813214 -9.72955074528 -28.1502624687 11 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep="")" 1.0 1.0
25 0.00401690314574 -39.7858896837 -11.6754608943 -28.1104287894 8 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep="")" 0.888888888889 0.888888888889
25 0.211604582859 -35.8216815698 -7.78364059622 -28.0380409736 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.9 1.0
25 0.00749739305164 -39.1618455607 -11.6754608943 -27.4863846664 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep="")" 0.818181818182 1.0
25 0.00480758457119 -39.6062061379 -11.6754608943 -27.9307452435 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.818181818182 1.0
25 0.010000253018 -38.8737905332 -11.6754608943 -27.1983296389 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep="")" 0.9 1.0
25 0.00646706807795 -39.3096780783 -11.6754608943 -27.634217184 10 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep="")" 0.9 1.0
25 0.00354495159766 -39.9108764215 -11.6754608943 -28.2354155272 11 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep="")" 1.0 1.0
25 0.005609584633 -39.4519242514 -11.6754608943 -27.776463357 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep="")" 1.0 0.555555555556
25 5.71992447145e-23 -85.4841471866 -7.09049341566 -78.3936537709 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep="")" 1.0 0.111111111111
25 0.0101265889401 -38.8612363947 -11.6754608943 -27.1857755003 8 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 0.666666666667
25 0.0456448535538 -37.3555100641 -9.72955074528 -27.6259593188 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep="")" 1.0 1.0
25 0.0711342393692 -36.9118321404 -9.72955074528 -27.1822813952 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep="")" 0.9 1.0
25 0.0478432081617 -37.3084717601 -9.72955074528 -27.5789210148 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep="")" 0.8 0.888888888889
25 0.00877825943438 -39.0041227818 -11.6754608943 -27.3286618875 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep="")" 0.9 1.0
25 0.00858972079757 -39.0258346954 -11.6754608943 -27.3503738011 11 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep="")" 0.888888888889 0.888888888889
25 0.0070177716713 -39.2279551858 -11.6754608943 -27.5524942915 11 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep="")" 0.818181818182 1.0
25 4.00394713001e-22 -83.5382370375 -5.14458326661 -78.3936537709 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.111111111111
25 3.54453586001e-08 -51.4239191693 -7.78364059622 -43.6402785731 12 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.8 0.888888888889
25 0.011740207722 -38.7133814199 -11.6754608943 -27.0379205256 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 1.0 0.666666666667
25 0.012258182917 -38.6702072205 -11.6754608943 -26.9947463262 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep="")" 0.9 1.0
25 0.0796715705516 -36.7984881113 -9.72955074528 -27.068937366 11 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep="")" 0.818181818182 1.0
25 4.00394713001e-22 -83.5382370375 -5.14458326661 -78.3936537709 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.111111111111
25 0.329836404811 -35.3778041392 -7.78364059622 -27.5941635429 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.8 0.888888888889
25 0.00909671758273 -38.9684872844 -11.6754608943 -27.2930263901 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep="")" 0.75 1.0
25 2.80276299101e-21 -81.5923268885 -3.19867311755 -78.3936537709 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.111111111111
31 2.59985432174e-98 -266.075408578 -1.2527629685 -264.822645609 1 "lambda recurse_: flatten2str([], sep="")" 0.0 0.0
31 3.20899676517e-11 -65.5400025464 -7.78364059622 -57.7563619501 9 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.9 1.0
31 0.004942684882 -46.6873714745 -11.6754608943 -35.0119105802 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep="")" 1.0 0.888888888889
31 0.0361231940964 -44.6983450017 -9.72955074528 -34.9687942564 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep="")" 0.75 1.0
31 0.0101277329055 -45.9700026633 -11.6754608943 -34.294541769 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep="")" 0.8 0.888888888889
31 0.0127420684765 -45.7403711587 -11.6754608943 -34.0649102644 11 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 1.0 1.0
31 0.00942210490499 -46.0422216422 -11.6754608943 -34.3667607479 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep="")" 0.818181818182 1.0
31 3.15732202645e-28 -104.700183273 -5.14458326661 -99.5556000064 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.111111111111
31 0.00428840905523 -46.8293643419 -11.6754608943 -35.1539034476 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 1.0 0.777777777778
31 0.0488408768994 -44.3967125529 -9.72955074528 -34.6671618076 9 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep="")" 0.9 1.0
31 0.00745244951162 -46.2767373846 -11.6754608943 -34.6012764903 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep="")" 0.818181818182 1.0
31 0.369000979357 -42.3744808584 -7.78364059622 -34.5908402621 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.8 0.888888888889
31 0.00643044305298 -46.4242367166 -11.6754608943 -34.7487758222 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep="")" 0.8 0.888888888889
31 0.00466478330417 -46.7452387747 -11.6754608943 -35.0697778803 13 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.9 1.0
31 0.0047920280636 -46.7183264393 -11.6754608943 -35.042865545 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep="")" 0.9 1.0
31 0.00534582707875 -46.6089638852 -11.6754608943 -34.9335029909 10 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep="")" 1.0 1.0
31 0.00658593275849 -46.4003441823 -11.6754608943 -34.724883288 11 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep="")" 1.0 1.0
31 0.00283432946397 -47.2434747679 -11.6754608943 -35.5680138736 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep="")" 1.0 0.666666666667
31 4.51046003779e-29 -106.646093422 -7.09049341566 -99.5556000064 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep="")" 1.0 0.111111111111
31 0.000399949688303 -49.2016966755 -11.6754608943 -37.5262357812 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 0.777777777778
31 0.0616377508049 -44.1640056359 -9.72955074528 -34.4344548906 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep="")" 0.8 0.888888888889
31 0.0473023695668 -44.4287197657 -9.72955074528 -34.6991690204 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep="")" 0.75 1.0
31 0.0885767885954 -43.8014103129 -9.72955074528 -34.0718595677 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep="")" 0.75 1.0
31 0.00662798142187 -46.3939798599 -11.6754608943 -34.7185189656 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep="")" 0.818181818182 1.0
31 0.00903257531305 -46.0844426345 -11.6754608943 -34.4089817401 13 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep="")" 1.0 1.0
31 0.0123243397076 -45.7737040114 -11.6754608943 -34.0982431171 9 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep="")" 0.888888888889 0.888888888889
31 3.15732202645e-28 -104.700183273 -5.14458326661 -99.5556000064 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.111111111111
31 7.16658464655e-10 -62.4339466057 -7.78364059622 -54.6503060095 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.888888888889 0.888888888889
31 0.0045579766915 -46.7684013394 -11.6754608943 -35.0929404451 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 1.0 0.666666666667
31 0.00600623534137 -46.4924820033 -11.6754608943 -34.817021109 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep="")" 0.818181818182 1.0
31 0.0414210966241 -44.5614898252 -9.72955074528 -34.8319390799 10 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep="")" 1.0 1.0
31 3.15732202645e-28 -104.700183273 -5.14458326661 -99.5556000064 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.111111111111
31 0.180618790887 -43.0888914739 -7.78364059622 -35.3052508777 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.818181818182 1.0
31 0.00790030079845 -46.218379322 -11.6754608943 -34.5429184277 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep="")" 0.8 0.888888888889
31 2.21012541852e-27 -102.754273124 -3.19867311755 -99.5556000064 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.111111111111
37 8.23568904888e-118 -317.331404502 -1.2527629685 -316.078641533 1 "lambda recurse_: flatten2str([], sep="")" 0.0 0.0
37 1.58123923384e-12 -74.907652813 -7.78364059622 -67.1240122168 9 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.818181818182 1.0
37 0.0116517312275 -52.1871410687 -11.6754608943 -40.5116801744 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep="")" 0.75 1.0
37 0.0708303065483 -50.3823088732 -9.72955074528 -40.6527581279 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep="")" 0.9 1.0
37 0.00717339037408 -52.6722174426 -11.6754608943 -40.9967565482 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep="")" 0.9 1.0
37 0.00867022133895 -52.4827015212 -11.6754608943 -40.8072406268 10 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.818181818182 1.0
37 0.0112152582836 -52.225320643 -11.6754608943 -40.5498597487 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep="")" 0.75 1.0
37 1.29719586354e-33 -123.459943724 -5.14458326661 -118.315360457 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.111111111111
37 0.0133499070082 -52.0510864218 -11.6754608943 -40.3756255274 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 1.0 0.555555555556
37 0.0508566271239 -50.7135854 -9.72955074528 -40.9840346547 9 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep="")" 0.888888888889 0.888888888889
37 0.00560846690514 -52.9183184377 -11.6754608943 -41.2428575433 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep="")" 0.888888888889 0.888888888889
37 0.342482327836 -48.8063757821 -7.78364059622 -41.0227351859 9 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.888888888889 0.888888888889
37 0.00380392043008 -53.3065636139 -11.6754608943 -41.6311027196 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep="")" 1.0 0.888888888889
37 0.00171657451512 -54.1022650969 -11.6754608943 -42.4268042025 9 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.9 1.0
37 0.00540808800312 -52.9547002295 -11.6754608943 -41.2792393352 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep="")" 0.9 1.0
37 0.00419292362812 -53.209197587 -11.6754608943 -41.5337366927 11 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep="")" 0.875 0.777777777778
37 0.00572998514629 -52.8968829025 -11.6754608943 -41.2214220081 11 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep="")" 0.818181818182 1.0
37 0.00292164262997 -53.5704498383 -11.6754608943 -41.894988944 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep="")" 1.0 0.666666666667
37 1.85313694792e-34 -125.405853873 -7.09049341566 -118.315360457 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep="")" 1.0 0.111111111111
37 0.00566298997934 -52.9086438233 -11.6754608943 -41.233182929 7 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 0.666666666667
37 0.0629324429542 -50.500534024 -9.72955074528 -40.7709832787 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep="")" 0.9 1.0
37 0.0618213349687 -50.51834731 -9.72955074528 -40.7887965647 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep="")" 0.9 1.0
37 0.0638612938548 -50.485882393 -9.72955074528 -40.7563316478 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep="")" 0.9 1.0
37 0.00673047651549 -52.7359498951 -11.6754608943 -41.0604890008 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep="")" 0.9 1.0
37 0.00709791560861 -52.6827946762 -11.6754608943 -41.0073337819 9 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep="")" 0.818181818182 1.0
37 0.00765022430187 -52.607860873 -11.6754608943 -40.9323999787 10 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep="")" 0.9 1.0
37 1.29719586354e-33 -123.459943724 -5.14458326661 -118.315360457 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.111111111111
37 1.95511252828e-14 -79.3005841129 -7.78364059622 -71.5169435166 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.9 1.0
37 0.00415407928151 -53.2185050301 -11.6754608943 -41.5430441357 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 1.0 0.666666666667
37 0.0101435031412 -52.325762425 -11.6754608943 -40.6503015307 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep="")" 0.75 1.0
37 0.0329710045239 -51.1469673165 -9.72955074528 -41.4174165712 9 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep="")" 0.75 1.0
37 1.29719586354e-33 -123.459943724 -5.14458326661 -118.315360457 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.111111111111
37 0.18144633282 -49.4416359179 -7.78364059622 -41.6579953217 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.75 1.0
37 0.0099170310502 -52.3483422537 -11.6754608943 -40.6728813594 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep="")" 0.75 1.0
37 9.08037104481e-33 -121.514033575 -3.19867311755 -118.315360457 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.111111111111
43 2.02613896784e-137 -368.587400426 -1.2527629685 -367.334637458 1 "lambda recurse_: flatten2str([], sep="")" 0.0 0.0
43 8.46903778485e-15 -86.2417341772 -7.78364059622 -78.458093581 11 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.8 0.888888888889
43 0.00312184432733 -59.608706003 -11.6754608943 -47.9332451087 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep="")" 0.818181818182 1.0
43 0.0679346368395 -56.5285839408 -9.72955074528 -46.7990331955 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep="")" 1.0 1.0
43 0.00927085822175 -58.5202540049 -11.6754608943 -46.8447931105 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep="")" 0.9 1.0
43 0.00525567640712 -59.0878212478 -11.6754608943 -47.4123603535 9 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.9 1.0
43 0.00715984289855 -58.7786419215 -11.6754608943 -47.1031810272 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep="")" 0.9 1.0
43 3.44353461274e-38 -140.101109768 -5.14458326661 -134.956526501 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.111111111111
43 0.00128537527446 -60.4960792426 -11.6754608943 -48.8206183483 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 1.0 0.666666666667
43 0.0385999171953 -57.0938798295 -9.72955074528 -47.3643290842 9 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep="")" 0.818181818182 1.0
43 0.00211073478411 -60.0000938349 -11.6754608943 -48.3246329406 12 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep="")" 0.818181818182 1.0
43 0.137832105182 -55.8210936454 -7.78364059622 -48.0374530492 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 1.0 1.0
43 0.00841718685086 -58.6168542915 -11.6754608943 -46.9413933972 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep="")" 0.9 1.0
43 0.00497972974874 -59.1417543385 -11.6754608943 -47.4662934442 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.888888888889 0.888888888889
43 0.0051784668941 -59.1026209147 -11.6754608943 -47.4271600203 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep="")" 0.9 1.0
43 0.00202491381818 -60.04160282 -11.6754608943 -48.3661419257 10 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep="")" 0.818181818182 1.0
43 0.00400428405916 -59.3597651579 -11.6754608943 -47.6843042636 11 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep="")" 0.818181818182 1.0
43 0.00604194100292 -58.9484046423 -11.6754608943 -47.272943748 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep="")" 1.0 0.666666666667
43 4.91933516106e-39 -142.047019917 -7.09049341566 -134.956526501 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep="")" 1.0 0.111111111111
43 0.00219983319345 -59.9587484244 -11.6754608943 -48.2832875301 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 0.555555555556
43 0.0284313723797 -57.399636764 -9.72955074528 -47.6700860187 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep="")" 0.888888888889 0.888888888889
43 0.0151631789765 -58.0282599075 -9.72955074528 -48.2987091622 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep="")" 0.9 1.0
43 0.0565554321318 -56.7119087039 -9.72955074528 -46.9823579586 12 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep="")" 0.75 1.0
43 0.00921227288798 -58.5265933561 -11.6754608943 -46.8511324618 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep="")" 0.818181818182 1.0
43 0.00607902749117 -58.9422852297 -11.6754608943 -47.2668243353 11 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep="")" 1.0 1.0
43 0.00263174322321 -59.7794835116 -11.6754608943 -48.1040226173 10 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep="")" 0.9 1.0
43 3.44353461274e-38 -140.101109768 -5.14458326661 -134.956526501 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.111111111111
43 2.95799746299e-14 -84.9910534771 -7.78364059622 -77.2074128808 9 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.818181818182 1.0
43 0.00144970405101 -60.3757705279 -11.6754608943 -48.7003096335 5 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 1.0 0.666666666667
43 0.00596719073213 -58.9608537082 -11.6754608943 -47.2853928139 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep="")" 0.818181818182 1.0
43 0.0148389615295 -58.0498737032 -9.72955074528 -48.320322958 11 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep="")" 0.818181818182 1.0
43 3.44353461274e-38 -140.101109768 -5.14458326661 -134.956526501 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.111111111111
43 0.548059608879 -54.4407459044 -7.78364059622 -46.6571053081 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.818181818182 1.0
43 0.00619416102069 -58.9235228833 -11.6754608943 -47.2480619889 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep="")" 0.9 1.0
43 2.41047422892e-37 -138.155199619 -3.19867311755 -134.956526501 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.111111111111
49 5.45807244521e-157 -419.843396351 -1.2527629685 -418.590633382 1 "lambda recurse_: flatten2str([], sep="")" 0.0 0.0
49 1.181689787e-15 -94.4064634038 -7.78364059622 -86.6228228076 12 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.75 1.0
49 0.00213926363766 -66.1819260496 -11.6754608943 -54.5064651553 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep="")" 0.818181818182 1.0
49 0.0314383411305 -63.4943595218 -9.72955074528 -53.7648087765 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep="")" 0.9 1.0
49 0.00920684005566 -64.7224410328 -11.6754608943 -53.0469801385 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep="")" 0.9 1.0
49 0.0071314207531 -64.9778772462 -11.6754608943 -53.3024163519 9 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.818181818182 1.0
49 0.00131135755042 -66.6713248262 -11.6754608943 -54.9958639319 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep="")" 0.9 1.0
49 4.80431475241e-43 -157.476277024 -5.14458326661 -152.331693757 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.111111111111
49 0.000584905851123 -67.4786921079 -11.6754608943 -55.8032312135 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 1.0 0.666666666667
49 0.0702479681525 -62.6903563402 -9.72955074528 -52.9608055949 10 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep="")" 0.75 1.0
49 0.00323743456521 -65.7676065096 -11.6754608943 -54.0921456153 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep="")" 0.818181818182 1.0
49 0.175743754624 -61.7733607304 -7.78364059622 -53.9897201342 10 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.727272727273 0.888888888889
49 0.00312049850864 -65.8043949574 -11.6754608943 -54.1289340631 12 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep="")" 0.9 1.0
49 0.00381297076923 -65.6039791101 -11.6754608943 -53.9285182158 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.818181818182 1.0
49 0.00358243956821 -65.6663437129 -11.6754608943 -53.9908828186 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep="")" 1.0 1.0
49 0.00864778283009 -64.785084757 -11.6754608943 -53.1096238627 10 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep="")" 0.75 1.0
49 0.00995267440762 -64.6445464252 -11.6754608943 -52.9690855308 11 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep="")" 0.9 1.0
49 0.00122024498649 -66.7433360777 -11.6754608943 -55.0678751834 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep="")" 1.0 0.666666666667
49 6.86330678916e-44 -159.422187173 -7.09049341566 -152.331693757 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep="")" 1.0 0.111111111111
49 0.00323176142293 -65.7693604041 -11.6754608943 -54.0938995098 7 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 0.666666666667
49 0.0271827376444 -63.6398055985 -9.72955074528 -53.9102548532 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep="")" 0.75 1.0
49 0.0138178456342 -64.3164268063 -9.72955074528 -54.586876061 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep="")" 0.9 1.0
49 0.0081885358821 -64.839652612 -9.72955074528 -55.1101018667 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep="")" 0.9 1.0
49 0.00938139455412 -64.7036592998 -11.6754608943 -53.0281984055 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep="")" 0.888888888889 0.888888888889
49 0.00805154849416 -64.8565232924 -11.6754608943 -53.1810623981 12 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep="")" 0.888888888889 0.888888888889
49 0.00523781032701 -65.2864841904 -11.6754608943 -53.6110232961 11 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep="")" 1.0 1.0
49 4.80431475241e-43 -157.476277024 -5.14458326661 -152.331693757 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.111111111111
49 4.3820601648e-16 -95.3984749628 -7.78364059622 -87.6148343665 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.777777777778 0.777777777778
49 0.000878591839097 -67.0718225609 -11.6754608943 -55.3963616666 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 1.0 0.555555555556
49 0.00483808632209 -65.3658684704 -11.6754608943 -53.690407576 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep="")" 0.9 1.0
49 0.0299038565328 -63.5444002718 -9.72955074528 -53.8148495265 11 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep="")" 0.818181818182 1.0
49 4.80431475241e-43 -157.476277024 -5.14458326661 -152.331693757 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.111111111111
49 0.554070095844 -60.6250965194 -7.78364059622 -52.8414559231 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.9 1.0
49 0.00383983811302 -65.5969575173 -11.6754608943 -53.9214966229 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep="")" 0.9 1.0
49 3.36302032669e-42 -155.530366875 -3.19867311755 -152.331693757 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.111111111111
55 5.22634647541e-176 -471.099392275 -1.2527629685 -469.846629306 1 "lambda recurse_: flatten2str([], sep="")" 0.0 0.0
55 2.13458834908e-15 -101.278630949 -7.78364059622 -93.4949903526 10 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.75 1.0
55 0.0107394900173 -72.0319560467 -11.6754608943 -60.3564951524 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep="")" 0.818181818182 1.0
55 0.0160475223439 -71.6303291837 -9.72955074528 -61.9007784384 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep="")" 0.818181818182 1.0
55 0.0129164536349 -71.847381676 -11.6754608943 -60.1719207817 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep="")" 0.9 1.0
55 0.00709678964137 -72.4462411316 -11.6754608943 -60.7707802373 11 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.777777777778 0.777777777778
55 0.00409228347115 -72.9967805301 -11.6754608943 -61.3213196357 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep="")" 0.818181818182 1.0
55 1.470188615e-49 -179.939407226 -5.14458326661 -174.794823959 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.111111111111
55 0.000927016427518 -74.4816676426 -11.6754608943 -62.8062067483 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 1.0 0.666666666667
55 0.031128977945 -70.9677444982 -9.72955074528 -61.2381937529 11 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep="")" 0.818181818182 1.0
55 0.019856300923 -71.4173622666 -11.6754608943 -59.7419013723 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep="")" 1.0 1.0
55 0.124920788979 -69.578203802 -7.78364059622 -61.7945632057 9 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 0.9 1.0
55 0.00399460584488 -73.020938738 -11.6754608943 -61.3454778437 11 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep="")" 0.818181818182 1.0
55 0.00695159888955 -72.4669119611 -11.6754608943 -60.7914510667 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.888888888889 0.888888888889
55 0.00939937330757 -72.1652406326 -11.6754608943 -60.4897797383 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep="")" 0.818181818182 1.0
55 0.00755652605312 -72.3834720824 -11.6754608943 -60.7080111881 11 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep="")" 0.9 1.0
55 0.0149367622257 -71.7020582125 -11.6754608943 -60.0265973182 12 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep="")" 0.75 1.0
55 0.0117287231392 -71.9438428478 -11.6754608943 -60.2683819534 6 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep="")" 1.0 0.555555555556
55 2.10026945e-50 -181.885317375 -7.09049341566 -174.794823959 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep="")" 1.0 0.111111111111
55 0.00393055182977 -73.0371038195 -11.6754608943 -61.3616429252 5 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 0.555555555556
55 0.183826148373 -69.1918931851 -9.72955074528 -59.4623424398 8 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep="")" 0.818181818182 1.0
55 0.0700785384152 -70.1562670598 -9.72955074528 -60.4267163145 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep="")" 1.0 1.0
55 0.0166071836372 -71.5960482992 -9.72955074528 -61.866497554 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep="")" 0.9 1.0
55 0.00733441143136 -72.413306483 -11.6754608943 -60.7378455886 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep="")" 0.9 1.0
55 0.0211911942535 -71.3522979202 -11.6754608943 -59.6768370259 12 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep="")" 0.818181818182 1.0
55 0.0190246932547 -71.4601458699 -11.6754608943 -59.7846849756 10 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep="")" 1.0 1.0
55 1.470188615e-49 -179.939407226 -5.14458326661 -174.794823959 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.111111111111
55 2.44362822681e-19 -110.353761225 -7.78364059622 -102.570120629 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.888888888889 0.888888888889
55 0.0132861946744 -71.8191581485 -11.6754608943 -60.1436972542 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 1.0 0.555555555556
55 0.00360860438514 -73.1225625495 -11.6754608943 -61.4471016552 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep="")" 0.888888888889 0.888888888889
55 0.00909566307652 -72.1980859353 -9.72955074528 -62.46853519 11 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep="")" 0.818181818182 1.0
55 1.470188615e-49 -179.939407226 -5.14458326661 -174.794823959 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.111111111111
55 0.350844715696 -68.5455399301 -7.78364059622 -60.7618993339 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.818181818182 1.0
55 0.0188788881293 -71.4678393827 -11.6754608943 -59.7923784884 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep="")" 0.75 1.0
55 1.0291320305e-48 -177.993497077 -3.19867311755 -174.794823959 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.111111111111
61 7.56361854197e-196 -522.355388199 -1.2527629685 -521.102625231 1 "lambda recurse_: flatten2str([], sep="")" 0.0 0.0
61 1.11852522387e-17 -112.103995219 -7.78364059622 -104.320354623 9 "lambda recurse_: flatten2str(( [] if flip_() else cons_('a', recurse_()) ), sep="")" 0.7 0.777777777778
61 0.00841823404465 -77.8494148973 -11.6754608943 -66.173954003 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(cdr_([])) )), sep="")" 1.0 1.0
61 0.0312873668344 -76.5366005696 -9.72955074528 -66.8070498244 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_([]) )), sep="")" 0.818181818182 1.0
61 0.00666352674107 -78.0831660851 -11.6754608943 -66.4077051908 9 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(cdr_([])) )), sep="")" 0.818181818182 1.0
61 0.00839271778343 -77.8524505709 -11.6754608943 -66.1769896766 8 "lambda recurse_: flatten2str(cons_('a', cdr_(cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 0.9 1.0
61 0.0211099058453 -76.9300725685 -11.6754608943 -65.2546116742 11 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else car_(cons_('a', [])) ), sep="")" 1.0 1.0
61 3.60200731549e-54 -196.130163435 -5.14458326661 -190.985580169 1 "lambda recurse_: flatten2str(cons_('a', car_([])), sep="")" 1.0 0.111111111111
61 0.0239291639015 -76.8047170082 -11.6754608943 -65.1292561139 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( [] if flip_() else recurse_() ) )), sep="")" 1.0 0.555555555556
61 0.0432431355728 -76.2129764645 -9.72955074528 -66.4834257192 10 "lambda recurse_: flatten2str(cons_('a', ( car_([]) if flip_() else recurse_() )), sep="")" 0.818181818182 1.0
61 0.00151223228909 -79.5662280739 -11.6754608943 -67.8907671795 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', [])) if flip_() else recurse_() )), sep="")" 0.8 0.888888888889
61 0.286481688232 -74.3221403515 -7.78364059622 -66.5384997553 11 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else recurse_() )), sep="")" 1.0 1.0
61 0.00122176437806 -79.7795189447 -11.6754608943 -68.1040580503 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(cons_('a', recurse_())) if flip_() else [] )), sep="")" 0.818181818182 1.0
61 0.00607451664362 -78.175712549 -11.6754608943 -66.5002516546 11 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( [] if flip_() else recurse_() )))), sep="")" 1.0 1.0
61 0.00343655722823 -78.7453448057 -11.6754608943 -67.0698839114 11 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else car_(car_([])) )), sep="")" 0.75 1.0
61 0.00042977928236 -80.8242984691 -11.6754608943 -69.1488375748 9 "lambda recurse_: flatten2str(cons_('a', cdr_(( cons_('a', recurse_()) if flip_() else [] ))), sep="")" 0.9 1.0
61 0.0122251796557 -77.4763172392 -11.6754608943 -65.8008563448 10 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else [] ) if flip_() else recurse_() )), sep="")" 1.0 1.0
61 0.0105578204998 -77.6229481053 -11.6754608943 -65.9474872109 5 "lambda recurse_: flatten2str(cons_('a', ( ( [] if flip_() else recurse_() ) if flip_() else [] )), sep="")" 1.0 0.666666666667
61 5.14572473641e-55 -198.076073584 -7.09049341566 -190.985580169 1 "lambda recurse_: flatten2str(car_(car_(cons_('a', []))), sep="")" 1.0 0.111111111111
61 0.0111420554924 -77.5690882381 -11.6754608943 -65.8936273438 6 "lambda recurse_: flatten2str(cons_('a', ( ( recurse_() if flip_() else [] ) if flip_() else [] )), sep="")" 1.0 0.555555555556
61 0.0317157186632 -76.5230025553 -9.72955074528 -66.79345181 12 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_([]) )), sep="")" 0.818181818182 1.0
61 0.0290986442874 -76.6091233852 -9.72955074528 -66.8795726399 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else cons_('a', []) ), sep="")" 0.9 1.0
61 0.0219067694078 -76.8930192757 -9.72955074528 -67.1634685305 10 "lambda recurse_: flatten2str(cons_('a', ( cdr_([]) if flip_() else recurse_() )), sep="")" 0.8 0.888888888889
61 0.0106712768244 -77.6122592471 -11.6754608943 -65.9367983528 9 "lambda recurse_: flatten2str(cons_('a', ( cdr_(car_([])) if flip_() else recurse_() )), sep="")" 0.888888888889 0.888888888889
61 0.00942269902458 -77.736693402 -11.6754608943 -66.0612325076 9 "lambda recurse_: flatten2str(( car_(cons_('a', [])) if flip_() else cons_('a', recurse_()) ), sep="")" 1.0 0.888888888889
61 0.0065132890452 -78.1059704119 -11.6754608943 -66.4305095175 10 "lambda recurse_: flatten2str(cons_('a', ( cons_('a', cdr_(recurse_())) if flip_() else [] )), sep="")" 0.8 0.888888888889
61 3.60200731549e-54 -196.130163435 -5.14458326661 -190.985580169 1 "lambda recurse_: flatten2str(cons_('a', cdr_([])), sep="")" 1.0 0.111111111111
61 2.04322251529e-19 -116.106648232 -7.78364059622 -108.323007636 10 "lambda recurse_: flatten2str(( cons_('a', recurse_()) if flip_() else [] ), sep="")" 0.888888888889 0.888888888889
61 0.00395147153368 -78.6057269205 -11.6754608943 -66.9302660261 6 "lambda recurse_: flatten2str(cons_('a', ( [] if flip_() else ( recurse_() if flip_() else [] ) )), sep="")" 1.0 0.555555555556
61 0.00110149955617 -79.8831424859 -11.6754608943 -68.2076815915 8 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else cdr_(car_([])) )), sep="")" 0.9 1.0
61 0.0187931185152 -77.0463242038 -9.72955074528 -67.3167734585 9 "lambda recurse_: flatten2str(( cons_('a', []) if flip_() else cons_('a', recurse_()) ), sep="")" 0.818181818182 1.0
61 3.60200731549e-54 -196.130163435 -5.14458326661 -190.985580169 1 "lambda recurse_: flatten2str(car_(cons_('a', [])), sep="")" 1.0 0.111111111111
61 0.389767079747 -74.0142656409 -7.78364059622 -66.2306250447 10 "lambda recurse_: flatten2str(cons_('a', ( recurse_() if flip_() else [] )), sep="")" 0.75 1.0
61 0.000932788970866 -80.0493912573 -11.6754608943 -68.373930363 10 "lambda recurse_: flatten2str(cdr_(cons_('a', cons_('a', ( recurse_() if flip_() else [] )))), sep="")" 0.75 1.0
61 2.52140512084e-53 -194.184253286 -3.19867311755 -190.985580169 1 "lambda recurse_: flatten2str(cons_('a', []), sep="")" 1.0 0.111111111111
