

from LOTlib.Hypothesis import NdVectorHypothesis

class RosenbrockSampler(NdVectorHypothesis):
	
	def __init__(self):
		NdVectorHypothesis.__init__(self, v=0.0, N=2, proposal=numpy.eye(2)*0.1)
		
	def compute_posterior(self, data):
		"""
			Here we just overwrite compute_posterior since this is all MetropolisHastings calls. 
			This allows us to sample if we want. We'll just treat this as the posterior "probability" for the sampler
		"""
		x,y = self.v
		return (1.0-x)**2.0 + 100.0*(y-x**2.0)**2.0
		
if __name__ == "__main__":
	
	N = 1
	initial_hyp = NdVectorHypothesis()
	
	for x in LOTlib.MetropolisHastings.mh_sample(initial_hyp, [], MCMC_STEPS): 
		print xx